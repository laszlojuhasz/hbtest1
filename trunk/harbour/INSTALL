/*
 * $Id$
 */

HOW TO BUILD AND INSTALL HARBOUR
================================

   For all platforms you'll need:

   * GNU Make
   * Supported C compiler

   Linux/Darwin/BSD/HP-UX/Solaris
   ------------------------------
      $ export HB_COMPILER=<[gcc]|owatcom|icc|...>
      $ export HB_INSTALL_PREFIX=<DIR>
      $ ./make_gnu.sh
      $ sudo ./make_gnu.sh install

      To test it, go to <DIR>/bin directory and type:
      $ ./hbmk2 -n ../tests/hello.prg
      $ ./hello
      You should see: 'Hello world!' on screen.

   Windows with MinGW + msys
   -------------------------
      This is the recommended way to build with MinGW.

      Make sure to have msys and MinGW properly installed
      and setup. msys should be put in PATH _before_ MinGW.

      > set HB_INSTALL_PREFIX=<DIR>
        (use forward slashes and msys drive notation: /c/)
      > sh make_gnu.sh install

      To test it, go to <DIR>/bin directory and type:
      > hbmk2 -n ../tests/hello.prg
      > hello
      You should see: 'Hello world!' on screen.

   Windows with other compilers
   ----------------------------
      Make sure to have your C compiler of choice properly
      installed and GNU Make (with the name make.exe)
      accessible in the PATH _before_ the compiler tools.
      We recommend using the GNU Make from the MinGW binary
      distribution. Use your search engine with 'mingw gnu make'
      or try this link:
      http://sourceforge.net/project/showfiles.php?group_id=2435

      > set HB_COMPILER=<msvc|bcc32|owatcom|...>
      > set HB_INSTALL_PREFIX=<DIR>
      > make_gnu.bat install

      To test it, go to <DIR>\bin directory and type:
      > hbmk2 -n ..\tests\hello.prg
      > hello
      You should see: 'Hello world!' on screen.

      NOTE: <DIR> is your destination directory where
            executables, libraries and headers will be
            created. For a peace of mind, avoid using
            spaces, quotes in the name.

   DOS
   ---
      > set HB_COMPILER=<[djgpp]|owatcom>
      > set HB_INSTALL_PREFIX=<DIR>
      > make_gnu.bat install

   OS/2
   ----
      > set HB_COMPILER=<[gcc]|owatcom|icc>
      > set HB_INSTALL_PREFIX=<DIR>
      > make_gnu_os2.cmd install


HOW TO ENABLE OPTIONAL COMPONENTS BEFORE BUILD
==============================================

   On *nix systems most of these will be automatically picked up if
   installed in some well-known standard system locations.

   You only need to use manual setup, if the dependency isn't available
   on your platform on a system location, or you wish to use
   a non-standard location. Typically you need to do that on non-*nix
   (Windows/DOS/OS2) systems for all packages and for a few packages on
   *nix which aren't available through official package managers
   (ADS Client f.e.). Please see a list of official packages in
   doc/linux1st.txt.

   You can use these environment variables (adjust to your own dirs):

   HB_INC_ADS=C:\ads\acesdk
   HB_INC_ALLEGRO=C:\allegro\include
   HB_INC_APOLLO=C:\Apollo\include
   HB_INC_BLAT=C:\blat\full\source
   HB_INC_CURL=C:\curl\include
   HB_INC_FIREBIRD=C:\Firebird\include
   HB_INC_FREEIMAGE=C:\FreeImage\Dist
   HB_INC_GD=-IC:\gd\include
   HB_INC_LIBHARU=-IC:\libharu\include
   HB_INC_MYSQL=C:\mysql\include
   HB_INC_OPENSSL=C:\openssl
   HB_INC_PGSQL=C:\pgsql\include


SUPPORTED C COMPILERS UNDER DIFFERENT PLATFORMS
===============================================

   Abbreviation below can be used as HB_COMPILER values.

   Linux
   -----
   gcc      - GNU C
   gpp      - GNU C++
   owatcom  - Open Watcom C++
   icc      - Intel(R) C/C++

   Darwin/BSD/HP-UX/Solaris
   ------------------------
   gcc      - GNU C

   Windows
   -------
   mingw    - MinGW GNU C
   msvc     - Microsoft Visual C++
   gcc      - Cygwin GNU C
   bcc32    - Borland/CodeGear C++ 4.x and above
   rxsnt    - EMX/RSXNT/Windows GNU C
   icc      - IBM Visual Age C++
   dmc      - Digital Mars C
   msvc64   - Microsoft Visual C++ x64
   msvcia64 - Microsoft Visual C++ ia64
   mingwce  - MinGW GNU C (Windows CE / ARM)
   msvcce   - Microsoft Visual C++ (Windows CE / ARM)
   pocc     - Pelles C 4.5 and above
   pocc64   - Pelles C 5.0 x64
   poccce   - Pelles C 5.0 (Windows CE / ARM)
   xcc      - Pelles C (xhb)

   DOS (32-bit)
   ---
   djgpp    - Delorie GNU C
   owatcom  - Open Watcom C++ 9.x and above
   rxs32    - EMX/RSXNT/DOS GNU C

   OS/2
   ----
   gcc      - EMX GNU C
   owatcom  - Open Watcom C++
   icc      - IBM Visual Age C++ 3.0


OPTIONS AVAILABLE WHEN BUILDING HARBOUR
=======================================

   You can fine-tune Harbour builds with below listed
   environment variables. All of these are optional.

   General
   -------
   - HB_USER_PRGFLAGS          User Harbour compiler options
   - HB_USER_CFLAGS            User C compiler options
   - HB_USER_LDFLAGS           User linker options for executables
   - HB_USER_AFLAGS            User linker options for libraries
   - HB_USER_MAKEFLAGS         User GNU Make options

   - HB_BIN_INSTALL            Target directory to install executables
   - HB_LIB_INSTALL            Target directory to install libraries
   - HB_INC_INSTALL            Target directory to install language headers
   - HB_DOC_INSTALL            Target directory to install documentation

   Special
   -------
   - HB_BUILD_DLL=yes          To create a full build with .dlls.
                               This is only needed and available for
                               non-GNU Windows compilers.
   - HB_REBUILD_PARSER=yes     To rebuild the language parses.
                               This requires GNU Bison.
   - HB_VISUALC_VER_PRE80=yes  Set this if you're using a pre-8.0
                               version of MSVC compiler.

   Cross building
   --------------
   HB_BIN_COMPILE=<HARBOUR_NATIVE_BUILD_DIR>\bin
   HB_PPGEN_PATH=<HARBOUR_NATIVE_BUILD_DIR>\bin
   HB=<HARBOUR_NATIVE_BUILD_DIR>\bin\harbour[.exe]
   HBPP=<HARBOUR_NATIVE_BUILD_DIR>\bin\hbpp[.exe]

   You need these when building for a platform different to host.
   For this to work, you will need to point above envvars to
   a native Harbour build available on your system.



[ Viktor Szakats <harbour.01 syenar.hu> ]
