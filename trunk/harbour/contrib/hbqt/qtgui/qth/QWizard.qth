/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QDialog
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QWizard>
#include <QtCore/QVariant>


/*
 * QWizard ( QWidget * parent = 0, Qt::WindowFlags flags = 0 )
 * ~QWizard ()
 */
HB_FUNC( QT_QWIZARD )
{
   __HB_RETPTRGC__( new QWizard( hbqt_par_QWidget( 2 ) ) );
}
</CODE>

<ENUMS>
enum WizardButton { BackButton, NextButton, CommitButton, FinishButton, ..., Stretch }
enum WizardOption { IndependentPages, IgnoreSubTitles, ExtendedWatermarkPixmap, NoDefaultButton, ..., HaveCustomButton3 }
enum WizardPixmap { WatermarkPixmap, LogoPixmap, BannerPixmap, BackgroundPixmap }
enum WizardStyle { ClassicStyle, ModernStyle, MacStyle, AeroStyle }
flags WizardOptions
</ENUMS>

<PROTOS>
int addPage ( QWizardPage * page )
QAbstractButton * button ( WizardButton which ) const
QString buttonText ( WizardButton which ) const
int currentId () const
QWizardPage * currentPage () const
QVariant field ( const QString & name ) const
bool hasVisitedPage ( int id ) const
virtual int nextId () const
WizardOptions options () const
QWizardPage * page ( int id ) const
QList<int> pageIds () const
QPixmap pixmap ( WizardPixmap which ) const
void removePage ( int id )
void setButton ( WizardButton which, QAbstractButton * button )
void setButtonLayout ( const QList<WizardButton> & layout )
void setButtonText ( WizardButton which, const QString & text )
void setDefaultProperty ( const char * className, const char * property, const char * changedSignal )
void setField ( const QString & name, const QVariant & value )
void setOption ( WizardOption option, bool on = true )
void setOptions ( WizardOptions options )
void setPage ( int id, QWizardPage * page )
void setPixmap ( WizardPixmap which, const QPixmap & pixmap )
void setStartId ( int id )
void setSubTitleFormat ( Qt::TextFormat format )
void setTitleFormat ( Qt::TextFormat format )
void setWizardStyle ( WizardStyle style )
int startId () const
Qt::TextFormat subTitleFormat () const
bool testOption ( WizardOption option ) const
Qt::TextFormat titleFormat () const
virtual bool validateCurrentPage ()
QList<int> visitedPages () const
WizardStyle wizardStyle () const
</PROTOS>

<SLOTS>
void back ()
void next ()
void restart ()
</SLOTS>

<SIGNALS>
void currentIdChanged ( int id )
void customButtonClicked ( int which )
void helpRequested ()
</SIGNALS>

