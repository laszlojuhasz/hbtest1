/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Type     = PlainObject
New      =
</CLASS>

<DOC>
oIcon := QIcon():new()
oIcon := QIcon():new( cFileName )
oIcon := QIcon():new( pQPixmap )
</DOC>

<CODE>
#include <QtGui/QIcon>


/*
 * QIcon ()
 * QIcon ( const QPixmap & pixmap )
 * QIcon ( const QIcon & other )
 * QIcon ( const QString & fileName )
 * QIcon ( QIconEngine * engine )
 * QIcon ( QIconEngineV2 * engine )
 * ~QIcon ()
 */
HB_FUNC( QT_QICON )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      hb_retptr( new QIcon( hbqt_par_QString( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 1 );
      if( q )
      {
         if( q->type == HBQT_TYPE_QIcon )
         {
            hb_retptr( new QIcon( *hbqt_par_QIcon( 1 ) ) );
         }
         else if( q->type == HBQT_TYPE_QPixmap )
         {
            hb_retptr( new QIcon( *hbqt_par_QPixmap( 1 ) ) );
         }
      }
      else
      {
         hb_retptr( new QIcon( *hbqt_par_QIcon( 1 ) ) );
      }
   }
   else
   {
      hb_retptr( new QIcon() );
   }
}
</CODE>

<ENUMS>
enum Mode { Normal, Disabled, Active, Selected }
enum State { Off, On }
</ENUMS>

<PROTOS>
QSize actualSize ( const QSize & size, Mode mode = Normal, State state = Off ) const
void addFile ( const QString & fileName, const QSize & size = QSize(), Mode mode = Normal, State state = Off )
void addPixmap ( const QPixmap & pixmap, Mode mode = Normal, State state = Off )
QList<QSize> availableSizes ( Mode mode = Normal, State state = Off ) const
qint64 cacheKey () const
bool isNull () const

void paint ( ... ){
   QIcon * p = hbqt_par_QIcon( 1 );
   if( p )
   {
      if( HB_ISPOINTER( 2 ) && HB_ISPOINTER( 3 ) )
      {
         ( p )->paint( hbqt_par_QPainter( 2 ), *hbqt_par_QRect( 3 ), ( HB_ISNUM( 4 ) ? ( Qt::Alignment ) hb_parni( 4 ) : ( Qt::Alignment ) Qt::AlignCenter ), ( HB_ISNUM( 5 ) ? ( QIcon::Mode ) hb_parni( 5 ) : ( QIcon::Mode ) QIcon::Normal ), ( HB_ISNUM( 6 ) ? ( QIcon::State ) hb_parni( 6 ) : ( QIcon::State ) QIcon::Off ) );
      }
      else if( HB_ISPOINTER( 2 ) && HB_ISNUM( 3 ) )
      {
         ( p )->paint( hbqt_par_QPainter( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), ( HB_ISNUM( 7 ) ? ( Qt::Alignment ) hb_parni( 7 ) : ( Qt::Alignment ) Qt::AlignCenter ), ( HB_ISNUM( 8 ) ? ( QIcon::Mode ) hb_parni( 8 ) : ( QIcon::Mode ) QIcon::Normal ), ( HB_ISNUM( 9 ) ? ( QIcon::State ) hb_parni( 9 ) : ( QIcon::State ) QIcon::Off ) );
      }
   }
}
//void paint ( QPainter * painter, const QRect & rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off ) const
//void paint ( QPainter * painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off ) const

QPixmap pixmap ( ... ){
   QIcon * p = hbqt_par_QIcon( 1 );
   if( p )
   {
      if( HB_ISPOINTER( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QPixmap( new QPixmap( ( p )->pixmap( *hbqt_par_QSize( 2 ), ( HB_ISNUM( 3 ) ? ( QIcon::Mode ) hb_parni( 3 ) : ( QIcon::Mode ) QIcon::Normal ), ( HB_ISNUM( 4 ) ? ( QIcon::State ) hb_parni( 4 ) : ( QIcon::State ) QIcon::Off ) ) ), true ) );
      }
      else if( hb_pcount() >= 3 && HB_ISNUM( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QPixmap( new QPixmap( ( p )->pixmap( hb_parni( 2 ), hb_parni( 3 ), ( HB_ISNUM( 4 ) ? ( QIcon::Mode ) hb_parni( 4 ) : ( QIcon::Mode ) QIcon::Normal ), ( HB_ISNUM( 5 ) ? ( QIcon::State ) hb_parni( 5 ) : ( QIcon::State ) QIcon::Off ) ) ), true ) );
      }
   }
}
//QPixmap pixmap ( const QSize & size, Mode mode = Normal, State state = Off ) const
//QPixmap pixmap ( int w, int h, Mode mode = Normal, State state = Off ) const
//QPixmap pixmap ( int extent, Mode mode = Normal, State state = Off ) const        // Not Implemented

</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




