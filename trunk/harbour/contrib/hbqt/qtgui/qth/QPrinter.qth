/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherits = QPaintDevice
Type     = 
New      = 
</CLASS>

<CODE>
#include <QtGui/QPrinter>


/*
 * QPrinter ( PrinterMode mode = ScreenResolution )
 * QPrinter ( const QPrinterInfo & printer, PrinterMode mode = ScreenResolution )
 * ~QPrinter ()
 */
HB_FUNC( QT_QPRINTER )
{
   if( hb_pcount() >= 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( new QPrinter( *hbqt_par_QPrinterInfo( 1 ), ( QPrinter::PrinterMode ) ( HB_ISNUM( 2 ) ? hb_parni( 2 ) : QPrinter::ScreenResolution ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPrinter() );
   }
}
</CODE>

<ENUMS>
enum ColorMode { Color, GrayScale }
enum DuplexMode { DuplexNone, DuplexAuto, DuplexLongSide, DuplexShortSide }
enum Orientation { Portrait, Landscape }
enum OutputFormat { NativeFormat, PdfFormat, PostScriptFormat }
enum PageOrder { FirstPageFirst, LastPageFirst }
enum PaperSize { A0, A1, A2, A3, ..., Custom }
enum PaperSource { Auto, Cassette, Envelope, EnvelopeManual, ..., SmallFormat }
enum PrintRange { AllPages, Selection, PageRange }
enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution }
enum PrinterState { Idle, Active, Aborted, Error }
enum Unit { Millimeter, Point, Inch, Pica, ..., DevicePixel }
</ENUMS>

<PROTOS>
bool abort ()
bool collateCopies () const
ColorMode colorMode () const
QString creator () const
QString docName () const
bool doubleSidedPrinting () const
DuplexMode duplex () const
bool fontEmbeddingEnabled () const
int fromPage () const
bool fullPage () const
void getPageMargins ( qreal * left, qreal * top, qreal * right, qreal * bottom, Unit unit ) const
bool isValid () const
bool newPage ()
int numCopies () const
Orientation orientation () const
QString outputFileName () const
OutputFormat outputFormat () const
PageOrder pageOrder () const
QRect pageRect () const
QRectF pageRect ( Unit unit ) const
virtual QPaintEngine * paintEngine () const
QRect paperRect () const
QRectF paperRect ( Unit unit ) const
PaperSize paperSize () const
QSizeF paperSize ( Unit unit ) const
PaperSource paperSource () const
QPrintEngine * printEngine () const
QString printProgram () const
PrintRange printRange () const
QString printerName () const
// QString printerSelectionOption () const
PrinterState printerState () const
int resolution () const
void setCollateCopies ( bool collate )
void setColorMode ( ColorMode newColorMode )
void setCreator ( const QString & creator )
void setDocName ( const QString & name )
void setDoubleSidedPrinting ( bool doubleSided )
void setDuplex ( DuplexMode duplex )
void setFontEmbeddingEnabled ( bool enable )
void setFromTo ( int from, int to )
void setFullPage ( bool fp )
void setNumCopies ( int numCopies )
void setOrientation ( Orientation orientation )
void setOutputFileName ( const QString & fileName )
void setOutputFormat ( OutputFormat format )
void setPageMargins ( qreal left, qreal top, qreal right, qreal bottom, Unit unit )
void setPageOrder ( PageOrder pageOrder )
void setPaperSize ( PaperSize newPaperSize )
void setPaperSize ( const QSizeF & paperSize, Unit unit )
void setPaperSource ( PaperSource source )
void setPrintProgram ( const QString & printProg )
void setPrintRange ( PrintRange range )
void setPrinterName ( const QString & name )
// void setPrinterSelectionOption ( const QString & option )
void setResolution ( int dpi )
// void setWinPageSize ( int pageSize )
// QList<PaperSource> supportedPaperSources () const
QList<int> supportedResolutions () const
int toPage () const
// int winPageSize () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



