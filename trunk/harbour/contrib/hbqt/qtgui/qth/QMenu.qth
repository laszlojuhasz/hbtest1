/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QWidget
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QMenu>


/*
 * QMenu ( QWidget * parent = 0 )
 * QMenu ( const QString & title, QWidget * parent = 0 )
 * ~QMenu ()
 */
HB_FUNC( QT_QMENU )
{
   if( hb_pcount() >= 1 && HB_ISCHAR( 1 ) )
   {
      hb_retptr( ( QMenu* ) new QMenu( hbqt_par_QString( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else
   {
      hb_retptr( ( QMenu* ) new QMenu( hbqt_par_QWidget( 1 ) ) );
   }
}
</CODE>

<PROTOS>
QAction * actionAt ( const QPoint & pt ) const
QRect actionGeometry ( QAction * act ) const
QAction * activeAction () const

QAction * addAction ( ... ){
   QMenu * p = hbqt_par_QMenu( 1 );
   if( p )
   {
      void * pText;

      if( hb_pcount() >= 5 )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->addAction( ( HB_ISCHAR( 2 ) ? QIcon( hbqt_par_QString( 2 ) ) : *hbqt_par_QIcon( 2 )), hb_parstr_utf8( 3, &pText, NULL ), hbqt_par_QObject( 4 ), hbqt_par_char( 5 ), *hbqt_par_QKeySequence( 6 ) ), false ) );
      }
      else if( hb_pcount() >= 4 )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->addAction( hb_parstr_utf8( 2, &pText, NULL ), hbqt_par_QObject( 3 ), hbqt_par_char( 4 ), *hbqt_par_QKeySequence( 5 ) ), false ) );
      }
      else if( hb_pcount() == 3 )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->addAction( ( HB_ISCHAR( 2 ) ? QIcon( hbqt_par_QString( 2 ) ) : *hbqt_par_QIcon( 2 )), hb_parstr_utf8( 3, &pText, NULL ) ), false ) );
      }
      else if( hb_pcount() == 2 && HB_ISCHAR( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->addAction( hb_parstr_utf8( 2, &pText, NULL ) ), false ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );
         q->bNew = HB_FALSE;
         ( p )->addAction( hbqt_par_QAction( 2 ) );
      }

      if( pText )
      {
         hb_strfree( pText );
      }
   }
}
//QAction * addAction ( const QString & text )
//QAction * addAction ( const QIcon & icon, const QString & text )
//QAction * addAction ( const QString & text, const QObject * receiver, const char * member, const QKeySequence & shortcut = 0 )
//QAction * addAction ( const QIcon & icon, const QString & text, const QObject * receiver, const char * member, const QKeySequence & shortcut = 0 )
//QAction * addAction ( QAction * action )

QMenu * addMenu ( ... ){
   QMenu * p = hbqt_par_QMenu( 1 );
   if( p )
   {
      void * pText;

      if( hb_pcount() == 2 && HB_ISCHAR( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QMenu( ( p )->addMenu( hb_parstr_utf8( 2, &pText, NULL ) ), false ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->addMenu( hbqt_par_QMenu( 2 ) ), false ) );
      }
      else if( hb_pcount() == 3 )
      {
         hb_retptrGC( hbqt_gcAllocate_QMenu( ( p )->addMenu( ( HB_ISCHAR( 2 ) ? QIcon( hbqt_par_QString( 2 ) ) : *hbqt_par_QIcon( 2 )), hb_parstr_utf8( 3, &pText, NULL ) ), false ) );
      }

      if( pText )
      {
         hb_strfree( pText );
      }
   }
}
//QAction * addMenu ( QMenu * menu )
//QMenu * addMenu ( const QString & title )
//QMenu * addMenu ( const QIcon & icon, const QString & title )

QAction * addSeparator ()
void clear ()
QAction * defaultAction () const

QAction * exec ( ... ){
   QMenu * p = hbqt_par_QMenu( 1 );
   if( p )
   {
      if( hb_pcount() >= 2 && HB_ISPOINTER( 2 ) )
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->exec( *hbqt_par_QPoint( 2 ), hbqt_par_QAction( 3 ) ), false ) );
      }
      else
      {
         hb_retptrGC( hbqt_gcAllocate_QAction( ( p )->exec(), false ) );
      }
   }
}
//QAction * exec ()
//QAction * exec ( const QPoint & p, QAction * action = 0 )

void hideTearOffMenu ()
QIcon icon () const
QAction * insertMenu ( QAction * before, QMenu * menu )
QAction * insertSeparator ( QAction * before )
bool isEmpty () const
bool isTearOffEnabled () const
bool isTearOffMenuVisible () const
// OSMenuRef macMenu ( OSMenuRef merge = 0 )
QAction * menuAction () const
void popup ( const QPoint & p, QAction * atAction = 0 )
bool separatorsCollapsible () const
void setActiveAction ( QAction * act )
void setDefaultAction ( QAction * act )
void setIcon ( const QIcon & icon )
void setSeparatorsCollapsible ( bool collapse )
void setTearOffEnabled ( bool )
void setTitle ( const QString & title )
QString title () const
// HMENU wceMenu ( bool create = false )
</PROTOS>

<SIGNALS>
void aboutToHide ()
void aboutToShow ()
void hovered ( QAction * action )
void triggered ( QAction * action )
</SIGNALS>
