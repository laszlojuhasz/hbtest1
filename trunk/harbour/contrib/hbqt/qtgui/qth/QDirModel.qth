/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherits = QAbstractItemModel
Type     = Core
New      = 
</CLASS>

<CODE>
#include <QtGui/QDirModel>


/*
 * QDirModel ( const QStringList & nameFilters, QDir::Filters filters, QDir::SortFlags sort, QObject * parent = 0 )
 * QDirModel ( QObject * parent = 0 )
 * ~QDirModel ()
 */
HB_FUNC( QT_QDIRMODEL )
{
   __HB_RETPTRGC__( ( QDirModel* ) new QDirModel( hbqt_par_QObject( 1 ) ) );
}
</CODE>

<ENUMS>
enum Roles { FileIconRole, FilePathRole, FileNameRole }
</ENUMS>

<PROTOS>
virtual int columnCount ( const QModelIndex & parent = QModelIndex() ) const
virtual QVariant data ( const QModelIndex & index, int role = Qt::DisplayRole ) const
virtual bool dropMimeData ( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent )
QIcon fileIcon ( const QModelIndex & index ) const
QFileInfo fileInfo ( const QModelIndex & index ) const
QString fileName ( const QModelIndex & index ) const
QString filePath ( const QModelIndex & index ) const
QDir::Filters filter () const
virtual Qt::ItemFlags flags ( const QModelIndex & index ) const
virtual bool hasChildren ( const QModelIndex & parent = QModelIndex() ) const
virtual QVariant headerData ( int section, Qt::Orientation orientation, int role = Qt::DisplayRole ) const
QFileIconProvider * iconProvider () const
virtual QModelIndex index ( int row, int column, const QModelIndex & parent = QModelIndex() ) const
QModelIndex index ( const QString & path, int column = 0 ) const
bool isDir ( const QModelIndex & index ) const
bool isReadOnly () const
bool lazyChildCount () const
// virtual QMimeData * mimeData ( const QModelIndexList & indexes ) const
virtual QStringList mimeTypes () const
QModelIndex mkdir ( const QModelIndex & parent, const QString & name )
QStringList nameFilters () const
virtual QModelIndex parent ( const QModelIndex & child ) const
bool remove ( const QModelIndex & index )
bool resolveSymlinks () const
bool rmdir ( const QModelIndex & index )
virtual int rowCount ( const QModelIndex & parent = QModelIndex() ) const
virtual bool setData ( const QModelIndex & index, const QVariant & value, int role = Qt::EditRole )
void setFilter ( QDir::Filters filters )
void setIconProvider ( QFileIconProvider * provider )
void setLazyChildCount ( bool enable )
void setNameFilters ( const QStringList & filters )
void setReadOnly ( bool enable )
void setResolveSymlinks ( bool enable )
void setSorting ( QDir::SortFlags sort )
virtual void sort ( int column, Qt::SortOrder order = Qt::AscendingOrder )
QDir::SortFlags sorting () const
virtual Qt::DropActions supportedDropActions () const
</PROTOS>

<SLOTS>
void refresh ( const QModelIndex & parent = QModelIndex() )
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



