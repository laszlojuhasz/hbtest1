/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QDialog
New      = pParent, nFlags
</CLASS>

<CODE>
#include <QtGui/QInputDialog>


/*
 * QInputDialog ( QWidget * parent = 0, Qt::WindowFlags flags = 0 )
 * ~QInputDialog ()
 */
HB_FUNC( QT_QINPUTDIALOG )
{
   __HB_RETPTRGC__( ( QInputDialog * ) new QInputDialog( hbqt_par_QWidget( 1 ), ( Qt::WindowFlags ) hb_parni( 2 ) ) );
}
</CODE>

<ENUMS>
enum InputDialogOption { NoButtons, UseListViewForComboBoxItems }
enum InputMode { TextInput, IntInput, DoubleInput }
flags InputDialogOptions
</ENUMS>

<PROTOS>
QString cancelButtonText () const
QStringList comboBoxItems () const
virtual void done ( int result )
int doubleDecimals () const
double doubleMaximum () const
double doubleMinimum () const
double doubleValue () const
InputMode inputMode () const
int intMaximum () const
int intMinimum () const
int intStep () const
int intValue () const
bool isComboBoxEditable () const
QString labelText () const
QString okButtonText () const
void open ( QObject * receiver, const char * member )
InputDialogOptions options () const
void setCancelButtonText ( const QString & text )
void setComboBoxEditable ( bool editable )
void setComboBoxItems ( const QStringList & items )
void setDoubleDecimals ( int decimals )
void setDoubleMaximum ( double max )
void setDoubleMinimum ( double min )
void setDoubleRange ( double min, double max )
void setDoubleValue ( double value )
void setInputMode ( InputMode mode )
void setIntMaximum ( int max )
void setIntMinimum ( int min )
void setIntRange ( int min, int max )
void setIntStep ( int step )
void setIntValue ( int value )
void setLabelText ( const QString & text )
void setOkButtonText ( const QString & text )
void setOption ( InputDialogOption option, bool on = true )
void setOptions ( InputDialogOptions options )
void setTextEchoMode ( QLineEdit::EchoMode mode )
void setTextValue ( const QString & text )
bool testOption ( InputDialogOption option ) const
QLineEdit::EchoMode textEchoMode () const
QString textValue () const

double getDouble ( QWidget * parent, const QString & title, const QString & label, double value = 0, double min = -2147483647, double max = 2147483647, int decimals = 1, bool * ok = 0, Qt::WindowFlags flags = 0 )
int getInt ( QWidget * parent, const QString & title, const QString & label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool * ok = 0, Qt::WindowFlags flags = 0 )
QString getItem ( QWidget * parent, const QString & title, const QString & label, const QStringList & items, int current = 0, bool editable = true, bool * ok = 0, Qt::WindowFlags flags = 0 )
QString getText ( QWidget * parent, const QString & title, const QString & label, QLineEdit::EchoMode mode = QLineEdit::Normal, const QString & text = QString(), bool * ok = 0, Qt::WindowFlags flags = 0 )
</PROTOS>

<SIGNALS>
void doubleValueChanged ( double value )
void doubleValueSelected ( double value )
void intValueChanged ( int value )
void intValueSelected ( int value )
void textValueChanged ( const QString & text )
void textValueSelected ( const QString & text )
</SIGNALS>

