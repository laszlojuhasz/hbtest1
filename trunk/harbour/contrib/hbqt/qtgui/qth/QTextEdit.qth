/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QAbstractScrollArea
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QTextEdit>


/* QTextEdit ( QWidget * parent = 0 )
 * QTextEdit ( const QString & text, QWidget * parent = 0 )
 * virtual ~QTextEdit ()
 */
HB_FUNC( QT_QTEXTEDIT )
{
   if( hb_pcount() >= 1 && HB_ISCHAR( 1 ) )
      __HB_RETPTRGC__( new QTextEdit( hbqt_par_QString( 1 ), hbqt_par_QWidget( 2 ) ) );
   else
      __HB_RETPTRGC__( new QTextEdit( hbqt_par_QWidget( 1 ) ) );
}
</CODE>

<ENUMS>
flags AutoFormatting
enum AutoFormattingFlag { AutoNone, AutoBulletList, AutoAll }
enum LineWrapMode { NoWrap, WidgetWidth, FixedPixelWidth, FixedColumnWidth }
</ENUMS>

<PROTOS>
bool acceptRichText () const
Qt::Alignment alignment () const
QString anchorAt ( const QPoint & pos ) const
AutoFormatting autoFormatting () const
bool canPaste () const
QMenu * createStandardContextMenu ()
QMenu * createStandardContextMenu ( const QPoint & position )
QTextCharFormat currentCharFormat () const
QFont currentFont () const
QTextCursor cursorForPosition ( const QPoint & pos ) const
QRect cursorRect ( const QTextCursor & cursor ) const
QRect cursorRect () const
int cursorWidth () const
QTextDocument * document () const
QString documentTitle () const
void ensureCursorVisible ()
// QList<ExtraSelection> extraSelections () const
bool find ( const QString & exp, QTextDocument::FindFlags options = 0 )
QString fontFamily () const
bool fontItalic () const
qreal fontPointSize () const
bool fontUnderline () const
int fontWeight () const
bool isReadOnly () const
bool isUndoRedoEnabled () const
int lineWrapColumnOrWidth () const
LineWrapMode lineWrapMode () const
virtual QVariant loadResource ( int type, const QUrl & name )
void mergeCurrentCharFormat ( const QTextCharFormat & modifier )
void moveCursor ( QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor )
bool overwriteMode () const
void print ( QPrinter * printer ) const
void setAcceptRichText ( bool accept )
void setAutoFormatting ( AutoFormatting features )
void setCurrentCharFormat ( const QTextCharFormat & format )
void setCursorWidth ( int width )
void setDocument ( QTextDocument * document )
void setDocumentTitle ( const QString & title )
void setExtraSelections ( const QList<ExtraSelection> & selections )
void setLineWrapColumnOrWidth ( int w )
void setLineWrapMode ( LineWrapMode mode )
void setOverwriteMode ( bool overwrite )
void setReadOnly ( bool ro )
void setTabChangesFocus ( bool b )
void setTabStopWidth ( int width )
void setTextCursor ( const QTextCursor & cursor )
void setTextInteractionFlags ( Qt::TextInteractionFlags flags )
void setUndoRedoEnabled ( bool enable )
void setWordWrapMode ( QTextOption::WrapMode policy )
bool tabChangesFocus () const
int tabStopWidth () const
QColor textBackgroundColor () const
QColor textColor () const
QTextCursor textCursor () const
Qt::TextInteractionFlags textInteractionFlags () const
QString toHtml () const
QString toPlainText () const
QTextOption::WrapMode wordWrapMode () const
</PROTOS>

<SLOTS>
void append ( const QString & text )
void clear ()
void copy ()
void cut ()
void insertHtml ( const QString & text )
void insertPlainText ( const QString & text )
void paste ()
void redo ()
void scrollToAnchor ( const QString & name )
void selectAll ()
void setAlignment ( Qt::Alignment a )
void setCurrentFont ( const QFont & f )
void setFontFamily ( const QString & fontFamily )
void setFontItalic ( bool italic )
void setFontPointSize ( qreal s )
void setFontUnderline ( bool underline )
void setFontWeight ( int weight )
void setHtml ( const QString & text )
void setPlainText ( const QString & text )
void setText ( const QString & text )
void setTextBackgroundColor ( const QColor & c )
void setTextColor ( const QColor & c )
void undo ()
void zoomIn ( int range = 1 )
void zoomOut ( int range = 1 )
</SLOTS>

<SIGNALS>
void copyAvailable ( bool yes )
void currentCharFormatChanged ( const QTextCharFormat & f )
void cursorPositionChanged ()
void redoAvailable ( bool available )
void selectionChanged ()
void textChanged ()
void undoAvailable ( bool available )
</SIGNALS>
