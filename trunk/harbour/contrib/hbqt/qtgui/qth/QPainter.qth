/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
New      = pDevice
</CLASS>

<CODE>
#include <QtGui/QPainter>

/*
 * QPainter ()
 * QPainter ( QPaintDevice * device )
 * ~QPainter ()
 */
HB_FUNC( QT_QPAINTER )
{
   if( hb_pcount() >= 1 && HB_ISPOINTER( 1 ) )
   {
      hb_retptr( new QPainter( hbqt_par_QPaintDevice( 1 ) ) );
   }
   else
   {
      hb_retptr( new QPainter() );
   }
}
</CODE>

<ENUMS>
enum CompositionMode { CompositionMode_SourceOver, CompositionMode_DestinationOver, CompositionMode_Clear, CompositionMode_Source, ..., RasterOp_SourceAndNotDestination }
enum RenderHint { Antialiasing, TextAntialiasing, SmoothPixmapTransform, HighQualityAntialiasing, NonCosmeticDefaultPen }
enum RenderHints
</ENUMS>

<PROTOS>
const QBrush & background () const
Qt::BGMode backgroundMode () const
bool begin ( QPaintDevice * device )

void boundingRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 4 )
      {
         if( HB_ISCHAR( 4 ) )
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QRectF )
            {
               ( p )->boundingRect( *hbqt_par_QRectF( 2 ), hb_parni( 3 ), hbqt_par_QString( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QRect )
            {
               ( p )->boundingRect( *hbqt_par_QRect( 2 ), hb_parni( 3 ), hbqt_par_QString( 4 ) );
            }
         }
         else if( HB_ISPOINTER( 4 ) )
         {
            ( p )->boundingRect( *hbqt_par_QRectF( 2 ), hbqt_par_QString( 3 ), *hbqt_par_QTextOption( 4 ) );
         }
      }
      else if( hb_pcount() == 3 )
      {
         ( p )->boundingRect( *hbqt_par_QRectF( 2 ), hbqt_par_QString( 3 ), QTextOption() );
      }
      else if( hb_pcount() == 7 )
      {
         ( p )->boundingRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), hbqt_par_QString( 7 ) );
      }
   }
}
//QRectF boundingRect ( const QRectF & rectangle, int flags, const QString & text )
//QRect boundingRect ( const QRect & rectangle, int flags, const QString & text )
//QRect boundingRect ( int x, int y, int w, int h, int flags, const QString & text )
//QRectF boundingRect ( const QRectF & rectangle, const QString & text, const QTextOption & option = QTextOption() )

const QBrush & brush () const
QPoint brushOrigin () const
QPainterPath clipPath () const
QRegion clipRegion () const
QMatrix combinedMatrix () const
QTransform combinedTransform () const
CompositionMode compositionMode () const
QPaintDevice * device () const
const QMatrix & deviceMatrix () const
const QTransform & deviceTransform () const

void drawArc ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 4 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawArc( *hbqt_par_QRectF( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawArc( *hbqt_par_QRect( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
      }
      else if( hb_pcount() == 6 )
      {
         ( p )->drawArc( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), hb_parni( 7 ) );
      }
   }
}
//void drawArc ( const QRectF & rectangle, int startAngle, int spanAngle )
//void drawArc ( const QRect & rectangle, int startAngle, int spanAngle )
//void drawArc ( int x, int y, int width, int height, int startAngle, int spanAngle )

void drawChord ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 4 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawChord( *hbqt_par_QRectF( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawChord( *hbqt_par_QRect( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
      }
      else if( hb_pcount() == 6 )
      {
         ( p )->drawChord( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), hb_parni( 7 ) );
      }
   }
}
//void drawChord ( const QRectF & rectangle, int startAngle, int spanAngle )
//void drawChord ( const QRect & rectangle, int startAngle, int spanAngle )
//void drawChord ( int x, int y, int width, int height, int startAngle, int spanAngle )

void drawConvexPolygon ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawConvexPolygon( hbqt_par_QPointF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawConvexPolygon( hbqt_par_QPoint( 2 ), hb_parni( 3 ) );
         }
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPolygonF )
         {
            ( p )->drawConvexPolygon( *hbqt_par_QPolygonF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPolygon )
         {
            ( p )->drawConvexPolygon( *hbqt_par_QPolygon( 2 ) );
         }
      }
   }
}
//void drawConvexPolygon ( const QPointF * points, int pointCount )
//void drawConvexPolygon ( const QPoint * points, int pointCount )
//void drawConvexPolygon ( const QPolygonF & polygon )
//void drawConvexPolygon ( const QPolygon & polygon )

void drawEllipse ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 4 )
      {
         if( HB_ISNUM( 2 ) )
         {
            ( p )->drawEllipse( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
         else
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QPointF )
            {
               ( p )->drawEllipse( *hbqt_par_QPointF( 2 ), hb_parnd( 3 ), hb_parnd( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QPoint )
            {
               ( p )->drawEllipse( *hbqt_par_QPoint( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
            }
         }
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawEllipse( *hbqt_par_QRectF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawEllipse( *hbqt_par_QRect( 2 ) );
         }
      }
   }
}
//void drawEllipse ( const QRectF & rectangle )
//void drawEllipse ( const QRect & rectangle )
//void drawEllipse ( int x, int y, int width, int height )
//void drawEllipse ( const QPointF & center, qreal rx, qreal ry )
//void drawEllipse ( const QPoint & center, int rx, int ry )

void drawImage ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 4 )
      {
         if( HB_ISNUM( 2 ) )
         {
            ( p )->drawImage( hb_parni( 2 ), hb_parni( 3 ), *hbqt_par_QImage( 4 ), hb_parni( 5 ), hb_parni( 6 ), HB_ISNUM( 7 ) ? hb_parni( 7 ) : -1, HB_ISNUM( 8 ) ? hb_parni( 8 ) : -1, ( Qt::ImageConversionFlags ) ( HB_ISNUM( 9 ) ? hb_parni( 9 ) : Qt::AutoColor ) );
         }
         else
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QRectF )
            {
               ( p )->drawImage( *hbqt_par_QRectF( 2 ), *hbqt_par_QImage( 3 ), *hbqt_par_QRectF( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QRect )
            {
               ( p )->drawImage( *hbqt_par_QRect( 2 ), *hbqt_par_QImage( 3 ), *hbqt_par_QRect( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QPointF )
            {
               ( p )->drawImage( *hbqt_par_QPointF( 2 ), *hbqt_par_QImage( 3 ), *hbqt_par_QRectF( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QPoint )
            {
               ( p )->drawImage( *hbqt_par_QPoint( 2 ), *hbqt_par_QImage( 3 ), *hbqt_par_QRect( 4 ) );
            }
         }
      }
      else if( hb_pcount() == 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawImage( *hbqt_par_QRectF( 2 ), *hbqt_par_QImage( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawImage( *hbqt_par_QRect( 2 ), *hbqt_par_QImage( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawImage( *hbqt_par_QPointF( 2 ), *hbqt_par_QImage( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawImage( *hbqt_par_QPoint( 2 ), *hbqt_par_QImage( 3 ) );
         }
      }
   }
}

//void drawImage ( const QRectF & target, const QImage & image, const QRectF & source, Qt::ImageConversionFlags flags = Qt::AutoColor )
//void drawImage ( const QRect & target, const QImage & image, const QRect & source, Qt::ImageConversionFlags flags = Qt::AutoColor )
//void drawImage ( const QPointF & point, const QImage & image )
//void drawImage ( const QPoint & point, const QImage & image )
//void drawImage ( const QPointF & point, const QImage & image, const QRectF & source, Qt::ImageConversionFlags flags = Qt::AutoColor )
//void drawImage ( const QPoint & point, const QImage & image, const QRect & source, Qt::ImageConversionFlags flags = Qt::AutoColor )
//void drawImage ( const QRectF & rectangle, const QImage & image )
//void drawImage ( const QRect & rectangle, const QImage & image )
//void drawImage ( int x, int y, const QImage & image, int sx = 0, int sy = 0, int sw = -1, int sh = -1, Qt::ImageConversionFlags flags = Qt::AutoColor )

void drawLine ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      switch( hb_pcount() )
      {
      case 5:
         ( p )->drawLine( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ) );
         break;
      case 3:
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QPoint )
            {
               ( p )->drawLine( *hbqt_par_QPoint( 2 ), *hbqt_par_QPoint( 3 ) );
            }
            else if( q->type == HBQT_TYPE_QPointF )
            {
               ( p )->drawLine( *hbqt_par_QPointF( 2 ), *hbqt_par_QPointF( 3 ) );
            }
         }
         break;
      case 2:
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QLineF )
            {
               ( p )->drawLine( *hbqt_par_QLineF( 2 ) );
            }
            else if( q->type == HBQT_TYPE_QLine )
            {
               ( p )->drawLine( *hbqt_par_QLine( 2 ) );
            }
         }
         break;
      }
   }
}
//void drawLine ( const QLineF & line )
//void drawLine ( const QLine & line )
//void drawLine ( const QPoint & p1, const QPoint & p2 )
//void drawLine ( const QPointF & p1, const QPointF & p2 )
//void drawLine ( int x1, int y1, int x2, int y2 )

void drawLines ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QLineF )
         {
            ( p )->drawLines( hbqt_par_QLineF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QLine )
         {
            ( p )->drawLines( hbqt_par_QLine( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawLines( hbqt_par_QPointF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawLines( hbqt_par_QPoint( 2 ), hb_parni( 3 ) );
         }
      }
   }
}
//void drawLines ( const QLineF * lines, int lineCount )
//void drawLines ( const QLine * lines, int lineCount )
//void drawLines ( const QPointF * pointPairs, int lineCount )
//void drawLines ( const QPoint * pointPairs, int lineCount )
//
//void drawLines ( const QVector<QPointF> & pointPairs )
//void drawLines ( const QVector<QPoint> & pointPairs )
//void drawLines ( const QVector<QLineF> & lines )
//void drawLines ( const QVector<QLine> & lines )

void drawPath ( const QPainterPath & path )

void drawPicture ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 4 )
      {
         ( p )->drawPicture( hb_parni( 2 ), hb_parni( 3 ), *hbqt_par_QPicture( 4 ) );
      }
      else if( hb_pcount() == 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPicture( *hbqt_par_QPointF( 2 ), *hbqt_par_QPicture( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPicture( *hbqt_par_QPoint( 2 ), *hbqt_par_QPicture( 3 ) );
         }
      }
   }
}
//void drawPicture ( const QPointF & point, const QPicture & picture )
//void drawPicture ( const QPoint & point, const QPicture & picture )
//void drawPicture ( int x, int y, const QPicture & picture )

void drawPie ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 6 && HB_ISNUM( 2 ) )
      {
         ( p )->drawPie( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), hb_parni( 7 ) );
      }
      else if( hb_pcount() == 4 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawPie( *hbqt_par_QRectF( 2 ), hb_parnd( 3 ), hb_parnd( 4 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawPie( *hbqt_par_QRect( 2 ), hb_parni( 3 ), hb_parni( 4 ) );
         }
      }
   }
}
//void drawPie ( const QRectF & rectangle, int startAngle, int spanAngle )
//void drawPie ( const QRect & rectangle, int startAngle, int spanAngle )
//void drawPie ( int x, int y, int width, int height, int startAngle, int spanAngle )

void drawPixmap ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      switch( hb_pcount() )
      {
      case 10:
         ( p )->drawPixmap( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), *hbqt_par_QPixmap( 6 ), hb_parni( 7 ), hb_parni( 8 ), hb_parni( 9 ), hb_parni( 10 ) );
         break;
      case 8:
         ( p )->drawPixmap( hb_parni( 2 ), hb_parni( 3 ), *hbqt_par_QPixmap( 4 ), hb_parni( 5 ), hb_parni( 6 ), hb_parni( 7 ), hb_parni( 8 ) );
         break;
      case 6:
         ( p )->drawPixmap( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), *hbqt_par_QPixmap( 6 ) );
         break;
      case 4:
         if( HB_ISNUM( 2 ) )
         {
            ( p )->drawPixmap( hb_parni( 2 ), hb_parni( 3 ), *hbqt_par_QPixmap( 4 ) );
         }
         else
         {
            HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

            if( q->type == HBQT_TYPE_QRectF )
            {
               ( p )->drawPixmap( *hbqt_par_QRectF( 2 ), *hbqt_par_QPixmap( 3 ), *hbqt_par_QRectF( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QRect )
            {
               ( p )->drawPixmap( *hbqt_par_QRect( 2 ), *hbqt_par_QPixmap( 3 ), *hbqt_par_QRect( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QPointF )
            {
               ( p )->drawPixmap( *hbqt_par_QPointF( 2 ), *hbqt_par_QPixmap( 3 ), *hbqt_par_QRectF( 4 ) );
            }
            else if( q->type == HBQT_TYPE_QPoint )
            {
               ( p )->drawPixmap( *hbqt_par_QPoint( 2 ), *hbqt_par_QPixmap( 3 ), *hbqt_par_QRect( 4 ) );
            }
         }
         break;
      case 3:
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawPixmap( *hbqt_par_QRect( 2 ), *hbqt_par_QPixmap( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPixmap( *hbqt_par_QPointF( 2 ), *hbqt_par_QPixmap( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPixmap( *hbqt_par_QPoint( 2 ), *hbqt_par_QPixmap( 3 ) );
         }
         break;
      }
   }
}
//void drawPixmap ( const QRectF & target, const QPixmap & pixmap, const QRectF & source )
//void drawPixmap ( const QRect & target, const QPixmap & pixmap, const QRect & source )
//void drawPixmap ( const QPointF & point, const QPixmap & pixmap, const QRectF & source )
//void drawPixmap ( const QPoint & point, const QPixmap & pixmap, const QRect & source )
//void drawPixmap ( const QPointF & point, const QPixmap & pixmap )
//void drawPixmap ( const QPoint & point, const QPixmap & pixmap )
//void drawPixmap ( int x, int y, const QPixmap & pixmap )
//void drawPixmap ( const QRect & rectangle, const QPixmap & pixmap )
//void drawPixmap ( int x, int y, int width, int height, const QPixmap & pixmap )
//void drawPixmap ( int x, int y, int w, int h, const QPixmap & pixmap, int sx, int sy, int sw, int sh )
//void drawPixmap ( int x, int y, const QPixmap & pixmap, int sx, int sy, int sw, int sh )


void drawPoint ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 )
      {
         ( p )->drawPoint( hb_parni( 2 ), hb_parni( 3 ) );
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPoint( *hbqt_par_QPointF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPoint( *hbqt_par_QPoint( 2 ) );
         }
      }
   }
}
//void drawPoint ( const QPointF & position )
//void drawPoint ( const QPoint & position )
//void drawPoint ( int x, int y )

void drawPoints ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPoints( hbqt_par_QPointF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPoints( hbqt_par_QPoint( 2 ), hb_parni( 3 ) );
         }
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPolygonF )
         {
            ( p )->drawPoints( *hbqt_par_QPolygonF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPolygon )
         {
            ( p )->drawPoints( *hbqt_par_QPolygon( 2 ) );
         }
      }
   }
}
//void drawPoints ( const QPointF * points, int pointCount )
//void drawPoints ( const QPoint * points, int pointCount )
//void drawPoints ( const QPolygonF & points )
//void drawPoints ( const QPolygon & points )

void drawPolygon ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPolygon( hbqt_par_QPointF( 2 ), hb_parni( 3 ), ( Qt::FillRule ) ( HB_ISNUM( 4 ) ? hb_parni( 4 ) : Qt::OddEvenFill ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPolygon( hbqt_par_QPoint( 2 ), hb_parni( 3 ), ( Qt::FillRule ) ( HB_ISNUM( 4 ) ? hb_parni( 4 ) : Qt::OddEvenFill ) );
         }
      }
      else if( hb_pcount() >= 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPolygonF )
         {
            ( p )->drawPolygon( *hbqt_par_QPolygonF( 2 ), ( Qt::FillRule ) ( HB_ISNUM( 3 ) ? hb_parni( 3 ) : Qt::OddEvenFill ) );
         }
         else if( q->type == HBQT_TYPE_QPolygon )
         {
            ( p )->drawPolygon( *hbqt_par_QPolygonF( 2 ), ( Qt::FillRule ) ( HB_ISNUM( 3 ) ? hb_parni( 3 ) : Qt::OddEvenFill ) );
         }
      }
   }
}
//void drawPolygon ( const QPointF * points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill )
//void drawPolygon ( const QPoint * points, int pointCount, Qt::FillRule fillRule = Qt::OddEvenFill )
//void drawPolygon ( const QPolygonF & points, Qt::FillRule fillRule = Qt::OddEvenFill )
//void drawPolygon ( const QPolygon & points, Qt::FillRule fillRule = Qt::OddEvenFill )

void drawPolyline ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawPolyline( hbqt_par_QPointF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawPolyline( hbqt_par_QPoint( 2 ), hb_parni( 3 ) );
         }
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPolygonF )
         {
            ( p )->drawPolyline( *hbqt_par_QPolygonF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPolygon )
         {
            ( p )->drawPolyline( *hbqt_par_QPolygon( 2 ) );
         }
      }
   }
}
//void drawPolyline ( const QPointF * points, int pointCount )
//void drawPolyline ( const QPoint * points, int pointCount )
//void drawPolyline ( const QPolygonF & points )
//void drawPolyline ( const QPolygon & points )

void drawRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 4 && HB_ISNUM( 2 ) )
      {
         ( p )->drawRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 3 ), hb_parni( 4 ) );
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawRect( *hbqt_par_QRectF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawRect( *hbqt_par_QRect( 2 ) );
         }
      }
   }
}
//void drawRect ( const QRectF & rectangle )
//void drawRect ( const QRect & rectangle )
//void drawRect ( int x, int y, int width, int height )

void drawRects ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawRects( hbqt_par_QRectF( 2 ), hb_parni( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawRects( hbqt_par_QRect( 2 ), hb_parni( 3 ) );
         }
      }
   }
}
//void drawRects ( const QRectF * rectangles, int rectCount )
//void drawRects ( const QRect * rectangles, int rectCount )
//
//void drawRects ( const QVector<QRectF> & rectangles )
//void drawRects ( const QVector<QRect> & rectangles )

void drawRoundedRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 6 && HB_ISNUM( 2 ) )
      {
         ( p )->drawRoundedRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parnd( 6 ), ( Qt::SizeMode ) ( HB_ISNUM( 7 ) ? hb_parni( 7 ) : Qt::AbsoluteSize ) );
      }
      else if( hb_pcount() >= 4 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawRoundedRect( *hbqt_par_QRectF( 2 ), hb_parnd( 3 ), hb_parnd( 4 ), ( Qt::SizeMode ) ( HB_ISNUM( 5 ) ? hb_parni( 5 ) : Qt::AbsoluteSize ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawRoundedRect( *hbqt_par_QRect( 2 ), hb_parnd( 3 ), hb_parnd( 4 ), ( Qt::SizeMode ) ( HB_ISNUM( 5 ) ? hb_parni( 5 ) : Qt::AbsoluteSize ) );
         }
      }
   }
}
//void drawRoundedRect ( const QRectF & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
//void drawRoundedRect ( const QRect & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
//void drawRoundedRect ( int x, int y, int w, int h, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )

void drawText ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      int iP = hb_pcount();

      if( HB_ISNUM( 2 ) )
      {
         if( iP >= 7 )
         {
            ( p )->drawText( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), hb_parni( 6 ), hbqt_par_QString( 7 ), ( HB_ISPOINTER( 8 ) ? hbqt_par_QRect( 8 ) : 0 ) );
         }
         else if( iP == 4 )
         {
            ( p )->drawText( hb_parni( 2 ), hb_parni( 3 ), hbqt_par_QString( 4 ) );
         }
      }
      else if( HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->drawText( *hbqt_par_QPointF( 2 ), hbqt_par_QString( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->drawText( *hbqt_par_QPoint( 2 ), hbqt_par_QString( 3 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawText( *hbqt_par_QRect( 2 ), hb_parni( 3 ), hbqt_par_QString( 4 ), ( HB_ISPOINTER( 5 ) ? hbqt_par_QRect( 5 ) : 0 ) );
         }
         else if( q->type == HBQT_TYPE_QRectF )
         {
            if( HB_ISNUM( 3 ) )
            {
               ( p )->drawText( *hbqt_par_QRectF( 2 ), hb_parni( 3 ), hbqt_par_QString( 4 ), ( HB_ISPOINTER( 5 ) ? hbqt_par_QRectF( 5 ) : 0 ) );
            }
            else if( HB_ISCHAR( 3 ) )
            {
               ( p )->drawText( *hbqt_par_QRectF( 2 ), hbqt_par_QString( 3 ), ( HB_ISPOINTER( 4 ) ? *hbqt_par_QTextOption( 4 ) : QTextOption() ) );
            }
         }
      }
   }
}
//void drawText ( const QPointF & position, const QString & text )
//void drawText ( const QPoint & position, const QString & text )
//void drawText ( const QRectF & rectangle, int flags, const QString & text, QRectF * boundingRect = 0 )
//void drawText ( const QRect & rectangle, int flags, const QString & text, QRect * boundingRect = 0 )
//void drawText ( int x, int y, const QString & text )
//void drawText ( int x, int y, int width, int height, int flags, const QString & text, QRect * boundingRect = 0 )
//void drawText ( const QRectF & rectangle, const QString & text, const QTextOption & option = QTextOption() )

void drawTiledPixmap ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 6 && HB_ISNUM( 2 ) )
      {
         ( p )->drawTiledPixmap( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), *hbqt_par_QPixmap( 6 ), ( HB_ISNUM( 7 ) ? hb_parni( 7 ) : 0 ), ( HB_ISNUM( 8 ) ? hb_parni( 8 ) : 0 ) );
      }
      else if( hb_pcount() >= 3 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->drawTiledPixmap( *hbqt_par_QRectF( 2 ), *hbqt_par_QPixmap( 3 ), ( HB_ISPOINTER( 4 ) ? *hbqt_par_QPointF( 4 ) : QPointF() ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->drawTiledPixmap( *hbqt_par_QRect( 2 ), *hbqt_par_QPixmap( 3 ), ( HB_ISPOINTER( 4 ) ? *hbqt_par_QPointF( 4 ) : QPointF() ) );
         }
      }
   }
}
//void drawTiledPixmap ( const QRectF & rectangle, const QPixmap & pixmap, const QPointF & position = QPointF() )
//void drawTiledPixmap ( const QRect & rectangle, const QPixmap & pixmap, const QPoint & position = QPoint() )
//void drawTiledPixmap ( int x, int y, int width, int height, const QPixmap & pixmap, int sx = 0, int sy = 0 )

bool end ()

void eraseRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 5 && HB_ISNUM( 2 ) )
      {
         ( p )->eraseRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ) );
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->eraseRect( *hbqt_par_QRectF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->eraseRect( *hbqt_par_QRect( 2 ) );
         }
      }
   }
}
//void eraseRect ( const QRectF & rectangle )
//void eraseRect ( const QRect & rectangle )
//void eraseRect ( int x, int y, int width, int height )

void fillPath ( const QPainterPath & path, const QBrush & brush )


void fillRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 6 && HB_ISNUM( 2 ) )
      {
         if( HB_ISNUM( 6 ) )
         {
            ( p )->fillRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), ( Qt::GlobalColor ) hb_parni( 6 ) );
         }
         else if( HB_ISPOINTER( 6 ) )
         {
            HBQT_GC_T * r = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 6 );

            if( r->type == HBQT_TYPE_QBrush )
            {
               ( p )->fillRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), *hbqt_par_QBrush( 6 ) );
            }
            if( r->type == HBQT_TYPE_QColor )
            {
               ( p )->fillRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), *hbqt_par_QColor( 6 ) );
            }
         }
      }
      else if( hb_pcount() == 3 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( HB_ISNUM( 3 ) )
         {
            if( q->type == HBQT_TYPE_QRectF )
            {
               ( p )->fillRect( *hbqt_par_QRectF( 2 ), ( Qt::GlobalColor ) hb_parni( 3 ) );
            }
            else if( q->type == HBQT_TYPE_QRect )
            {
               ( p )->fillRect( *hbqt_par_QRect( 2 ), ( Qt::GlobalColor ) hb_parni( 3 ) );
            }
         }
         else if( HB_ISPOINTER( 3 ) )
         {
            HBQT_GC_T * r = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 3 );

            if( q->type == HBQT_TYPE_QRectF )
            {
               if( r->type == HBQT_TYPE_QBrush )
               {
                  ( p )->fillRect( *hbqt_par_QRectF( 2 ), *hbqt_par_QBrush( 3 ) );
               }
               if( r->type == HBQT_TYPE_QColor )
               {
                  ( p )->fillRect( *hbqt_par_QRectF( 2 ), *hbqt_par_QColor( 3 ) );
               }
            }
            else if( q->type == HBQT_TYPE_QRect )
            {
               if( r->type == HBQT_TYPE_QBrush )
               {
                  ( p )->fillRect( *hbqt_par_QRect( 2 ), *hbqt_par_QBrush( 3 ) );
               }
               if( r->type == HBQT_TYPE_QColor )
               {
                  ( p )->fillRect( *hbqt_par_QRect( 2 ), *hbqt_par_QColor( 3 ) );
               }
            }
         }
      }
   }
}
// void fillRect ( const QRectF & rectangle, const QBrush & brush )
// void fillRect ( const QRectF & rectangle, const QColor & color )
// void fillRect ( const QRectF & rectangle, Qt::GlobalColor color )
// //
// void fillRect ( const QRect  & rectangle, const QBrush & brush )
// void fillRect ( const QRect  & rectangle, const QColor & color )
// void fillRect ( const QRect  & rectangle, Qt::GlobalColor color )
// //
// void fillRect ( int x, int y, int width, int height, const QBrush & brush )
// void fillRect ( int x, int y, int width, int height, const QColor & color )
// void fillRect ( int x, int y, int width, int height, Qt::GlobalColor color )
//
//                       NOT IMPLEMENTED
// void fillRect ( const QRectF & rectangle, Qt::BrushStyle style )
// void fillRect ( const QRect  & rectangle, Qt::BrushStyle style )
// void fillRect ( int x, int y, int width, int height, Qt::BrushStyle style )
//
//                           original order
// void fillRect ( const QRectF & rectangle, const QBrush & brush )
// void fillRect ( int x, int y, int width, int height, Qt::BrushStyle style )
// void fillRect ( const QRect  & rectangle, Qt::BrushStyle style )
// void fillRect ( const QRectF & rectangle, Qt::BrushStyle style )
// void fillRect ( const QRect  & rectangle, const QBrush & brush )
// void fillRect ( const QRect  & rectangle, const QColor & color )
// void fillRect ( const QRectF & rectangle, const QColor & color )
// void fillRect ( int x, int y, int width, int height, const QBrush & brush )
// void fillRect ( int x, int y, int width, int height, const QColor & color )
// void fillRect ( int x, int y, int width, int height, Qt::GlobalColor color )
// void fillRect ( const QRect  & rectangle, Qt::GlobalColor color )
// void fillRect ( const QRectF & rectangle, Qt::GlobalColor color )

const QFont & font () const
QFontInfo fontInfo () const
QFontMetrics fontMetrics () const
bool hasClipping () const
void initFrom ( const QWidget * widget )
bool isActive () const
Qt::LayoutDirection layoutDirection () const
qreal opacity () const
QPaintEngine * paintEngine () const
const QPen & pen () const
RenderHints renderHints () const
void resetMatrix ()
void resetTransform ()
void restore ()
void rotate ( qreal angle )
void save ()
void scale ( qreal sx, qreal sy )
void setBackground ( const QBrush & brush )
void setBackgroundMode ( Qt::BGMode mode )

void setBrush ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 2 && HB_ISNUM( 2 ) )
      {
         ( p )->setBrush( ( Qt::BrushStyle ) hb_parni( 2 ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         ( p )->setBrush( *hbqt_par_QBrush( 2 ) );
      }
   }
}
//void setBrush ( const QBrush & brush )
//void setBrush ( Qt::BrushStyle style )

void setBrushOrigin ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 && HB_ISNUM( 2 ) )
      {
         ( p )->setBrushOrigin( hb_parni( 2 ), hb_parni( 3 ) );
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->setBrushOrigin( *hbqt_par_QPointF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->setBrushOrigin( *hbqt_par_QPoint( 2 ) );
         }
      }
   }
}
//void setBrushOrigin ( const QPointF & position )
//void setBrushOrigin ( const QPoint & position )
//void setBrushOrigin ( int x, int y )

void setClipPath ( const QPainterPath & path, Qt::ClipOperation operation = Qt::ReplaceClip )

void setClipRect ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() >= 5 && HB_ISNUM( 2 ) )
      {
         ( p )->setClipRect( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ), ( Qt::ClipOperation ) ( HB_ISNUM( 6 ) ? hb_parni( 6 ) : Qt::ReplaceClip ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QRectF )
         {
            ( p )->setClipRect( *hbqt_par_QRectF( 2 ), ( Qt::ClipOperation ) ( HB_ISNUM( 3 ) ? hb_parni( 3 ) : Qt::ReplaceClip ) );
         }
         else if( q->type == HBQT_TYPE_QRect )
         {
            ( p )->setClipRect( *hbqt_par_QRect( 2 ), ( Qt::ClipOperation ) ( HB_ISNUM( 3 ) ? hb_parni( 3 ) : Qt::ReplaceClip ) );
         }
      }
   }
}
//void setClipRect ( const QRectF & rectangle, Qt::ClipOperation operation = Qt::ReplaceClip )
//void setClipRect ( int x, int y, int width, int height, Qt::ClipOperation operation = Qt::ReplaceClip )
//void setClipRect ( const QRect & rectangle, Qt::ClipOperation operation = Qt::ReplaceClip )

void setClipRegion ( const QRegion & region, Qt::ClipOperation operation = Qt::ReplaceClip )
void setClipping ( bool enable )
void setCompositionMode ( CompositionMode mode )
void setFont ( const QFont & font )
void setLayoutDirection ( Qt::LayoutDirection direction )
void setOpacity ( qreal opacity )

void setPen ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 2 && HB_ISNUM( 2 ) )
      {
         ( p )->setPen( ( Qt::PenStyle ) hb_parni( 2 ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPen )
         {
            ( p )->setPen( *hbqt_par_QPen( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QColor )
         {
            ( p )->setPen( *hbqt_par_QColor( 2 ) );
         }
      }
   }
}
//void setPen ( const QPen & pen )
//void setPen ( const QColor & color )
//void setPen ( Qt::PenStyle style )

void setRenderHint ( RenderHint hint, bool on = true )
void setRenderHints ( RenderHints hints, bool on = true )
void setTransform ( const QTransform & transform, bool combine = false )
void setViewTransformEnabled ( bool enable )

void setViewport ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 5 && HB_ISNUM( 2 ) )
      {
         ( p )->setViewport( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         ( p )->setViewport( *hbqt_par_QRect( 2 ) );
      }
   }
}
//void setViewport ( const QRect & rectangle )
//void setViewport ( int x, int y, int width, int height )

void setWindow ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 5 && HB_ISNUM( 2 ) )
      {
         ( p )->setWindow( hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), hb_parni( 5 ) );
      }
      else if( hb_pcount() == 2 && HB_ISPOINTER( 2 ) )
      {
         ( p )->setWindow( *hbqt_par_QRect( 2 ) );
      }
   }
}
//void setWindow ( const QRect & rectangle )
//void setWindow ( int x, int y, int width, int height )

void setWorldMatrix ( const QMatrix & matrix, bool combine = false )
void setWorldMatrixEnabled ( bool enable )
void setWorldTransform ( const QTransform & matrix, bool combine = false )
void shear ( qreal sh, qreal sv )
void strokePath ( const QPainterPath & path, const QPen & pen )
bool testRenderHint ( RenderHint hint ) const
const QTransform & transform () const

void translate ( ... ){
   QPainter * p = hbqt_par_QPainter( 1 );
   if( p )
   {
      if( hb_pcount() == 3 && HB_ISNUM( 2 ) )
      {
         ( p )->translate( hb_parni( 2 ), hb_parni( 3 ) );
      }
      else if( hb_pcount() == 2 )
      {
         HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );

         if( q->type == HBQT_TYPE_QPointF )
         {
            ( p )->translate( *hbqt_par_QPointF( 2 ) );
         }
         else if( q->type == HBQT_TYPE_QPoint )
         {
            ( p )->translate( *hbqt_par_QPoint( 2 ) );
         }
      }
   }
}
//void translate ( const QPointF & offset )
//void translate ( const QPoint & offset )
//void translate ( qreal dx, qreal dy )

bool viewTransformEnabled () const
QRect viewport () const
QRect window () const
const QMatrix & worldMatrix () const
bool worldMatrixEnabled () const
const QTransform & worldTransform () const


QPaintDevice * redirected ( const QPaintDevice * device, QPoint * offset = 0 )
void restoreRedirected ( const QPaintDevice * device )
void setRedirected ( const QPaintDevice * device, QPaintDevice * replacement, const QPoint & offset = QPoint() )
</PROTOS>

