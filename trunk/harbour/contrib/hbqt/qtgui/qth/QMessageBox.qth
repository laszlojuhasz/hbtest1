/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QDialog
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QMessageBox>


/*
 * QMessageBox ( QWidget * parent = 0 )
 * QMessageBox ( Icon icon, const QString & title, const QString & text, StandardButtons buttons = NoButton, QWidget * parent = 0, Qt::WindowFlags f = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint )
 * ~QMessageBox ()
 */
HB_FUNC( QT_QMESSAGEBOX )
{
   __HB_RETPTRGC__( new QMessageBox() );
}
</CODE>

<ENUMS>
enum ButtonRole { InvalidRole, AcceptRole, RejectRole, DestructiveRole, ..., ResetRole }
enum Icon { NoIcon, Question, Information, Warning, Critical }
enum StandardButton { Ok, Open, Save, Cancel, ..., ButtonMask }
flags StandardButtons
</ENUMS>

<PROTOS>
void addButton ( QAbstractButton * button, ButtonRole role )
QPushButton * addButton ( const QString & text, ButtonRole role )
QPushButton * addButton ( StandardButton button )
QAbstractButton * button ( StandardButton which ) const
ButtonRole buttonRole ( QAbstractButton * button ) const
QList<QAbstractButton *> buttons () const
QAbstractButton * clickedButton () const
QPushButton * defaultButton () const
QString detailedText () const
QAbstractButton * escapeButton () const
Icon icon () const
QPixmap iconPixmap () const
QString informativeText () const
void open ( QObject * receiver, const char * member )
void removeButton ( QAbstractButton * button )
void setDefaultButton ( QPushButton * button )
void setDefaultButton ( StandardButton button )
void setDetailedText ( const QString & text )
void setEscapeButton ( QAbstractButton * button )
void setEscapeButton ( StandardButton button )
void setIcon ( Icon )
void setIconPixmap ( const QPixmap & pixmap )
void setInformativeText ( const QString & text )
void setStandardButtons ( StandardButtons buttons )
void setText ( const QString & text )
void setTextFormat ( Qt::TextFormat format )
void setWindowModality ( Qt::WindowModality windowModality )
void setWindowTitle ( const QString & title )
StandardButton standardButton ( QAbstractButton * button ) const
StandardButtons standardButtons () const
QString text () const
Qt::TextFormat textFormat () const

void about ( QWidget * parent, const QString & title, const QString & text )
void aboutQt ( QWidget * parent, const QString & title = QString() )
StandardButton critical ( QWidget * parent, const QString & title, const QString & text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton )
StandardButton information ( QWidget * parent, const QString & title, const QString & text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton )
StandardButton question ( QWidget * parent, const QString & title, const QString & text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton )
StandardButton warning ( QWidget * parent, const QString & title, const QString & text, StandardButtons buttons = Ok, StandardButton defaultButton = NoButton )
</PROTOS>

<SLOTS>
int exec ()
</SLOTS>

<SIGNALS>
void buttonClicked ( QAbstractButton * button )
</SIGNALS>

