/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = No
Inherit  = 
Type     = 
New      = 
Version  = 0x040700
</CLASS>

<CODE>
#include <QtDeclarative/QDeclarativeProperty>


/*
 * QDeclarativeProperty ()
 * QDeclarativeProperty ( QObject * obj )
 * QDeclarativeProperty ( QObject * obj, QDeclarativeContext * ctxt )
 * QDeclarativeProperty ( QObject * obj, QDeclarativeEngine * engine )
 * QDeclarativeProperty ( QObject * obj, const QString & name )
 * QDeclarativeProperty ( QObject * obj, const QString & name, QDeclarativeContext * ctxt )
 * QDeclarativeProperty ( QObject * obj, const QString & name, QDeclarativeEngine * engine )
 * QDeclarativeProperty ( const QDeclarativeProperty & other )
 */
HB_FUNC( QT_QDECLARATIVEPROPERTY ) 
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDECLARATIVEPROPERTY" ) )
   {
      __HB_RETPTRGC__( new QDeclarativeProperty( *hbqt_par_QDeclarativeProperty( 1 ) ) );
   }   
   else if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      if( hb_pcount() == 1 )   
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ) ) );
      }      
      else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 2, "QDECLARATIVECONTEXT" ) )
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hbqt_par_QDeclarativeContext( 2 ) ) );
      }
      else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 2, "QDECLARATIVEENGINE" ) )
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hbqt_par_QDeclarativeEngine( 2 ) ) );
      } 
      else if( hb_pcount() == 2 && HB_ISCHAR( 2 ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ) ) );
         hb_strfree( pText01 );
      }
      else if( hb_pcount() == 3 && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QDECLARATIVECONTEXT" ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QDeclarativeContext( 3 ) ) );
         hb_strfree( pText01 );
      }   
      else if( hb_pcount() == 3 && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QDECLARATIVEENGINE" ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ),  hbqt_par_QDeclarativeEngine( 3 ) ) );
         hb_strfree( pText01 );
      }   
   }
   else
   {   
      __HB_RETPTRGC__( new QDeclarativeProperty() );
   }
}
</CODE>

<ENUMS>
enum PropertyTypeCategory { InvalidCategory, List, Object, Normal }
enum Type { Invalid, Property, SignalProperty }
</ENUMS>

<PROTOS>
bool connectNotifySignal ( QObject * dest, const char * slot ) const
bool connectNotifySignal ( QObject * dest, int method ) const
bool hasNotifySignal () const
int index () const
bool isDesignable () const
bool isProperty () const
bool isResettable () const
bool isSignalProperty () const
bool isValid () const
bool isWritable () const
QMetaMethod method () const
QString name () const
bool needsNotifySignal () const
QObject * object () const
QMetaProperty property () const
int propertyType () const
PropertyTypeCategory propertyTypeCategory () const
const char * propertyTypeName () const
QVariant read () const
bool reset () const
Type type () const
bool write ( const QVariant & value ) const

QVariant read ( QObject * object, const QString & name )
QVariant read ( QObject * object, const QString & name, QDeclarativeContext * ctxt )
QVariant read ( QObject * object, const QString & name, QDeclarativeEngine * engine )
bool write ( QObject * object, const QString & name, const QVariant & value )
bool write ( QObject * object, const QString & name, const QVariant & value, QDeclarativeContext * ctxt )
bool write ( QObject * object, const QString & name, const QVariant & value, QDeclarativeEngine * engine )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



