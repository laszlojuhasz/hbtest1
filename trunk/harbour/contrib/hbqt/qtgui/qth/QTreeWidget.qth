/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QTreeView
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QTreeWidget>


/*
 * QTreeWidget ( QWidget * parent = 0 )
 * ~QTreeWidget ()
 */
HB_FUNC( QT_QTREEWIDGET )
{
   __HB_RETPTRGC__( new QTreeWidget( hbqt_par_QWidget( 1 ) ) );
}
</CODE>

<PROTOS>
void addTopLevelItem ( QTreeWidgetItem * item )   [*D=1*]
void addTopLevelItems ( const QList<QTreeWidgetItem *> & items )
void closePersistentEditor ( QTreeWidgetItem * item, int column = 0 )
int columnCount () const
int currentColumn () const
QTreeWidgetItem * currentItem () const
void editItem ( QTreeWidgetItem * item, int column = 0 )
QList<QTreeWidgetItem *> findItems ( const QString & text, Qt::MatchFlags flags, int column = 0 ) const
QTreeWidgetItem * headerItem () const
int indexOfTopLevelItem ( QTreeWidgetItem * item ) const
void insertTopLevelItem ( int index, QTreeWidgetItem * item )
void insertTopLevelItems ( int index, const QList<QTreeWidgetItem *> & items )
QTreeWidgetItem * invisibleRootItem () const
bool isFirstItemColumnSpanned ( const QTreeWidgetItem * item ) const
QTreeWidgetItem * itemAbove ( const QTreeWidgetItem * item ) const
QTreeWidgetItem * itemAt ( const QPoint & p ) const
QTreeWidgetItem * itemAt ( int x, int y ) const
QTreeWidgetItem * itemBelow ( const QTreeWidgetItem * item ) const
QWidget * itemWidget ( QTreeWidgetItem * item, int column ) const
void openPersistentEditor ( QTreeWidgetItem * item, int column = 0 )
void removeItemWidget ( QTreeWidgetItem * item, int column )
QList<QTreeWidgetItem *> selectedItems () const
void setColumnCount ( int columns )
void setCurrentItem ( QTreeWidgetItem * item )   [*D=1*]
void setCurrentItem ( QTreeWidgetItem * item, int column )   [*D=1*]
void setCurrentItem ( QTreeWidgetItem * item, int column, QItemSelectionModel::SelectionFlags command )   [*D=1*]
void setFirstItemColumnSpanned ( const QTreeWidgetItem * item, bool span )
void setHeaderItem ( QTreeWidgetItem * item )   [*D=1*]
void setHeaderLabel ( const QString & label )
void setHeaderLabels ( const QStringList & labels )
void setItemWidget ( QTreeWidgetItem * item, int column, QWidget * widget )
int sortColumn () const
void sortItems ( int column, Qt::SortOrder order )
QTreeWidgetItem * takeTopLevelItem ( int index )
QTreeWidgetItem * topLevelItem ( int index ) const
int topLevelItemCount () const
QRect visualItemRect ( const QTreeWidgetItem * item ) const
</PROTOS>

<SLOTS>
void clear ()
void collapseItem ( const QTreeWidgetItem * item )
void expandItem ( const QTreeWidgetItem * item )
void scrollToItem ( const QTreeWidgetItem * item, QAbstractItemView::ScrollHint hint = EnsureVisible )
</SLOTS>

<SIGNALS>
void currentItemChanged ( QTreeWidgetItem * current, QTreeWidgetItem * previous )
void itemActivated ( QTreeWidgetItem * item, int column )
void itemChanged ( QTreeWidgetItem * item, int column )
void itemClicked ( QTreeWidgetItem * item, int column )
void itemCollapsed ( QTreeWidgetItem * item )
void itemDoubleClicked ( QTreeWidgetItem * item, int column )
void itemEntered ( QTreeWidgetItem * item, int column )
void itemExpanded ( QTreeWidgetItem * item )
void itemPressed ( QTreeWidgetItem * item, int column )
void itemSelectionChanged ()
</SIGNALS>

