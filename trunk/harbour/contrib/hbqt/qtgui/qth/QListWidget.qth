/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QListView
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QListWidget>


/*
 * QListWidget ( QWidget * parent = 0 )
 * ~QListWidget ()
 */
HB_FUNC( QT_QLISTWIDGET )
{
   hb_retptr( new QListWidget( hbqt_par_QWidget( 1 ) ) );
}
</CODE>

<PROTOS>
void addItem ( const QString & label )
void addItem ( QListWidgetItem * item ){
   HBQT_GC_T * p = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 1 );
   HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 2 );
   HB_TRACE( HB_TR_DEBUG, ( "Entering function QT_QLISTWIDGET_ADDITEM()" ) );
   if( p && p->ph && q && q->ph )
   {
      HB_TRACE( HB_TR_DEBUG, ( "QT_QLISTWIDGET_ADDITEM() Qt object: %p is attached to: %p", p->ph, q->ph ) );
      q->bNew = HB_FALSE;
      hbqt_par_QListWidget( 1 )->addItem( hbqt_par_QListWidgetItem( 2 ) );
   }
}
void addItems ( const QStringList & labels )
void closePersistentEditor ( QListWidgetItem * item )
int count () const
QListWidgetItem * currentItem () const
int currentRow () const
void editItem ( QListWidgetItem * item )
QList<QListWidgetItem *> findItems ( const QString & text, Qt::MatchFlags flags ) const
void insertItem ( int row, QListWidgetItem * item ){
   HBQT_GC_T * p = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 1 );
   HBQT_GC_T * q = ( HBQT_GC_T * ) hb_parptrGC( hbqt_gcFuncs(), 3 );
   HB_TRACE( HB_TR_DEBUG, ( "Entering function QT_QLISTWIDGET_INSERTITEM()" ) );
   if( p && p->ph && q && q->ph )
   {
      HB_TRACE( HB_TR_DEBUG, ( "QT_QLISTWIDGET_INSERTITEM() Qt object: %p is attached to: %p", p->ph, q->ph ) );
      q->bNew = HB_FALSE;
      hbqt_par_QListWidget( 1 )->insertItem( hb_parni( 2 ), hbqt_par_QListWidgetItem( 3 ) );
   }
}
void insertItem ( int row, const QString & label )
void insertItems ( int row, const QStringList & labels )
bool isSortingEnabled () const
QListWidgetItem * item ( int row ) const
QListWidgetItem * itemAt ( const QPoint & p ) const
QListWidgetItem * itemAt ( int x, int y ) const
QWidget * itemWidget ( QListWidgetItem * item ) const
void openPersistentEditor ( QListWidgetItem * item )
void removeItemWidget ( QListWidgetItem * item )
int row ( const QListWidgetItem * item ) const
QList<QListWidgetItem *> selectedItems () const
void setCurrentItem ( QListWidgetItem * item )
void setCurrentItem ( QListWidgetItem * item, QItemSelectionModel::SelectionFlags command )
void setCurrentRow ( int row )
void setCurrentRow ( int row, QItemSelectionModel::SelectionFlags command )
void setItemWidget ( QListWidgetItem * item, QWidget * widget )
void setSortingEnabled ( bool enable )
void sortItems ( Qt::SortOrder order = Qt::AscendingOrder )
QListWidgetItem * takeItem ( int row )
QRect visualItemRect ( const QListWidgetItem * item ) const
</PROTOS>

<SLOTS>
void clear ()
void scrollToItem ( const QListWidgetItem * item, QAbstractItemView::ScrollHint hint = EnsureVisible )
</SLOTS>

<SIGNALS>
void currentItemChanged ( QListWidgetItem * current, QListWidgetItem * previous )
void currentRowChanged ( int currentRow )
void currentTextChanged ( const QString & currentText )
void itemActivated ( QListWidgetItem * item )
void itemChanged ( QListWidgetItem * item )
void itemClicked ( QListWidgetItem * item )
void itemDoubleClicked ( QListWidgetItem * item )
void itemEntered ( QListWidgetItem * item )
void itemPressed ( QListWidgetItem * item )
void itemSelectionChanged ()
</SIGNALS>


