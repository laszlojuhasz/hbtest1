/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject    = no
Inherits   =
Type       = Core
New        =
Destructor =
</CLASS>

<CODE>
#include <QtGui/QPainterPath>


/* QPainterPath ()
 * QPainterPath ( const QPointF & startPoint )
 * QPainterPath ( const QPainterPath & path )
 * ~QPainterPath ()
 */
HB_FUNC( QT_QPAINTERPATH )
{
   __HB_RETPTRGC__( new QPainterPath() );
}
</CODE>

<ENUMS>
enum ElementType { MoveToElement, LineToElement, CurveToElement, CurveToDataElement }
</ENUMS>

<PROTOS>

void addEllipse ( const QRectF & boundingRectangle )
void addEllipse ( qreal x, qreal y, qreal width, qreal height )
void addEllipse ( const QPointF & center, qreal rx, qreal ry )
void addPath ( const QPainterPath & path )
void addPolygon ( const QPolygonF & polygon )
void addRect ( const QRectF & rectangle )
void addRect ( qreal x, qreal y, qreal width, qreal height )
void addRegion ( const QRegion & region )
void addRoundedRect ( const QRectF & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
void addRoundedRect ( qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
void addText ( const QPointF & point, const QFont & font, const QString & text )
void addText ( qreal x, qreal y, const QFont & font, const QString & text )
qreal angleAtPercent ( qreal t ) const
void arcMoveTo ( const QRectF & rectangle, qreal angle )
void arcMoveTo ( qreal x, qreal y, qreal width, qreal height, qreal angle )
void arcTo ( const QRectF & rectangle, qreal startAngle, qreal sweepLength )
void arcTo ( qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength )
QRectF boundingRect () const
void closeSubpath ()
void connectPath ( const QPainterPath & path )

bool contains ( const QPointF & point ) const
bool contains ( const QRectF & rectangle ) const
bool contains ( const QPainterPath & p ) const

QRectF controlPointRect () const
void cubicTo ( const QPointF & c1, const QPointF & c2, const QPointF & endPoint )
void cubicTo ( qreal c1X, qreal c1Y, qreal c2X, qreal c2Y, qreal endPointX, qreal endPointY )
QPointF currentPosition () const
// const QPainterPath::Element & elementAt ( int index ) const
int elementCount () const
Qt::FillRule fillRule () const
QPainterPath intersected ( const QPainterPath & p ) const

bool intersects ( const QRectF & rectangle ) const
bool intersects ( const QPainterPath & p ) const

bool isEmpty () const
qreal length () const
void lineTo ( const QPointF & endPoint )
void lineTo ( qreal x, qreal y )
void moveTo ( const QPointF & point )
void moveTo ( qreal x, qreal y )
qreal percentAtLength ( qreal len ) const
QPointF pointAtPercent ( qreal t ) const
void quadTo ( const QPointF & c, const QPointF & endPoint )
void quadTo ( qreal cx, qreal cy, qreal endPointX, qreal endPointY )
void setElementPositionAt ( int index, qreal x, qreal y )
void setFillRule ( Qt::FillRule fillRule )
QPainterPath simplified () const
qreal slopeAtPercent ( qreal t ) const
QPainterPath subtracted ( const QPainterPath & p ) const

QPolygonF toFillPolygon ( const QTransform & matrix ) const
QPolygonF toFillPolygon ( const QMatrix & matrix = QMatrix() ) const

QList<QPolygonF> toFillPolygons ( const QTransform & matrix ) const
QList<QPolygonF> toFillPolygons ( const QMatrix & matrix = QMatrix() ) const

QPainterPath toReversed () const

QList<QPolygonF> toSubpathPolygons ( const QTransform & matrix ) const
QList<QPolygonF> toSubpathPolygons ( const QMatrix & matrix = QMatrix() ) const

QPainterPath united ( const QPainterPath & p ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




