/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
New      =
Type     = PlainObject
</CLASS>

<DOC>
oPen := QPen():new()
oPen := QPen():new( pQPen_other )
oPen := QPen():new( nQt_PenStyle )
oPen := QPen():new( "QColor", pQColor )
oPen := QPen():new( pQBrush, nWidth, [ nQt_PenStyle = Qt_SolidLine ], ;
                                     [ nQt_CapStyle = Qt_SquareCap ], ;
                                     [ nQt_PenJointStyle = Qt_BevelJoin ] )

/* TODO
 * oPen := QPen():new( pQPen )
 */
</DOC>

<CODE>
#include <QtGui/QPen>


/*
 * QPen ()
 * QPen ( Qt::PenStyle style )
 * QPen ( const QColor & color )
 * QPen ( const QBrush & brush, qreal width, Qt::PenStyle style = Qt::SolidLine, Qt::PenCapStyle cap = Qt::SquareCap, Qt::PenJoinStyle join = Qt::BevelJoin )
 * QPen ( const QPen & pen )
 * ~QPen ()
 */
HB_FUNC( QT_QPEN )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( ( QPen* ) new QPen( ( Qt::PenStyle ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( ( QPen* ) new QPen( *hbqt_par_QPen( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISPOINTER( 2 ) )
   {
      QString objName = ( QString ) hbqt_par_QString( 1 );

      if( objName == ( QString ) "QColor" )
      {
         __HB_RETPTRGC__( ( QPen* ) new QPen( *hbqt_par_QColor( 2 ) ) );
      }
      else
      {
         __HB_RETPTRGC__( ( QPen* ) new QPen() );
      }
   }
   else if( hb_pcount() >= 2 && HB_ISPOINTER( 1 ) && HB_ISNUM( 2 ) )
   {
      Qt::PenStyle iStyle = HB_ISNUM( 3 ) ? ( Qt::PenStyle ) hb_parni( 3 ) : Qt::SolidLine;
      Qt::PenCapStyle iCap = HB_ISNUM( 4 ) ? ( Qt::PenCapStyle ) hb_parni( 4 ) : Qt::SquareCap;
      Qt::PenJoinStyle iJoin = HB_ISNUM( 5 ) ? ( Qt::PenJoinStyle ) hb_parni( 5 ) : Qt::BevelJoin;

      __HB_RETPTRGC__( ( QPen* ) new QPen( *hbqt_par_QBrush( 1 ), hb_parnd( 2 ), iStyle, iCap, iJoin ) );
   }   
   else
   {
      __HB_RETPTRGC__( ( QPen* ) new QPen() );
   }
}
</CODE>

<PROTOS>
QBrush brush () const
Qt::PenCapStyle capStyle () const
QColor color () const
qreal dashOffset () const
QVector<qreal> dashPattern () const
bool isCosmetic () const
bool isSolid () const
Qt::PenJoinStyle joinStyle () const
qreal miterLimit () const
void setBrush ( const QBrush & brush )
void setCapStyle ( Qt::PenCapStyle style )
void setColor ( const QColor & color )
void setCosmetic ( bool cosmetic )
void setDashOffset ( qreal offset )
void setDashPattern ( const QVector<qreal> & pattern )
void setJoinStyle ( Qt::PenJoinStyle style )
void setMiterLimit ( qreal limit )
void setStyle ( Qt::PenStyle style )
void setWidth ( int width )
void setWidthF ( qreal width )
Qt::PenStyle style () const
int width () const
qreal widthF () const
</PROTOS>

