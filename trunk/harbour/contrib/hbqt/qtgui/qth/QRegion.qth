/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Type     = PlainObject
New      = nX, nY, nWidth, nHeight, nType
</CLASS>

<DOC>
oRegion := QRegion():new()
oRegion := QRegion():new( pQRegion_other )
oRegion := QRegion():new( nX, nY, nW, nH, [ nQRegion_RegionType = QRegion_Rectangle ] )
oRegion := QRegion():new( "QPolygon", pQPolygon, [ nQt_FillRule = Qt_OddEvenFill ] )
oRegion := QRegion():new( "QBitmap" , pQBitmap )
oRegion := QRegion():new( "QRect"   , pQRect, [ nQRegion_RegionType = QRegion_Rectangle ] ) )
oRegion := QRegion():new( pQRect, nQRegion_RegionType )
</DOC>

<CODE>
#include <QtGui/QRegion>


/*
 * QRegion ()
 * QRegion ( int x, int y, int w, int h, RegionType t = Rectangle )
 * QRegion ( const QPolygon & a, Qt::FillRule fillRule = Qt::OddEvenFill )
 * QRegion ( const QRegion & r )
 * QRegion ( const QBitmap & bm )
 * QRegion ( const QRect & r, RegionType t = Rectangle )
 * ~QRegion ()
 */
HB_FUNC( QT_QREGION )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( ( QRegion* ) new QRegion( *hbqt_par_QRegion( 1 ) ) );      
   }
   else if( hb_pcount() >= 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( ( QRegion* ) new QRegion( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), HB_ISNUM( 5 ) ? ( QRegion::RegionType ) hb_parni( 5 ) : QRegion::Rectangle ) );
   }
   else if( hb_pcount() >= 2 && HB_ISCHAR( 1 ) && HB_ISPOINTER( 2 ) )
   {
      if(      ( QString ) "QPolygon" == hbqt_par_QString( 1 ) )
      {
         __HB_RETPTRGC__( ( QRegion* ) new QRegion( *hbqt_par_QPolygon( 2 ), HB_ISNUM( 3 ) ? ( Qt::FillRule ) hb_parni( 3 ) : Qt::OddEvenFill ) );
      }  
      else if( ( QString ) "QBitmap"  == hbqt_par_QString( 1 ) )
      {
         __HB_RETPTRGC__( ( QRegion* ) new QRegion( *hbqt_par_QBitmap( 2 ) ) );
      }
      else if( ( QString ) "QRect"    == hbqt_par_QString( 1 ) )
      {
         __HB_RETPTRGC__( ( QRegion* ) new QRegion( *hbqt_par_QRect( 2 ), HB_ISNUM( 3 ) ? ( QRegion::RegionType ) hb_parni( 3 ) : QRegion::Rectangle ) );
      }
      else
      {
         __HB_RETPTRGC__( ( QRegion* ) new QRegion() );
      }
   }
   else if( hb_pcount() == 2 && HB_ISPOINTER( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( ( QRegion* ) new QRegion( *hbqt_par_QRect( 1 ), ( QRegion::RegionType ) hb_parni( 2 ) ) );      
   }
   else
   {
      __HB_RETPTRGC__( ( QRegion* ) new QRegion() );
   }
}
</CODE>

<ENUMS>
enum RegionType { Rectangle, Ellipse }
</ENUMS>

<PROTOS>
QRect boundingRect () const
bool contains ( const QPoint & p ) const
bool contains ( const QRect & r ) const
#
# non-portable
// Handle handle () const
#
QRegion intersected ( const QRegion & r ) const
QRegion intersected ( const QRect & rect ) const
bool intersects ( const QRegion & region ) const
bool intersects ( const QRect & rect ) const
bool isEmpty () const
int numRects () const
QVector<QRect> rects () const
void setRects ( const QRect * rects, int number )
QRegion subtracted ( const QRegion & r ) const
void translate ( int dx, int dy )
void translate ( const QPoint & point )
QRegion translated ( int dx, int dy ) const
QRegion translated ( const QPoint & p ) const
QRegion united ( const QRegion & r ) const
QRegion united ( const QRect & rect ) const
QRegion xored ( const QRegion & r ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




