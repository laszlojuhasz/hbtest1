/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = 
Inherit  = QAbstractScrollArea
Type     = 
New      = 
</CLASS>

<CODE>
#include <QtGui/QGraphicsView>


/*
 * QGraphicsView ( QWidget * parent = 0 )
 * QGraphicsView ( QGraphicsScene * scene, QWidget * parent = 0 )
 * ~QGraphicsView ()
 */
HB_FUNC( QT_QGRAPHICSVIEW )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( new QGraphicsView( hbqt_par_QWidget( 1 ) ) ); 
   }
   else if( hb_pcount() >= 2 && HB_ISCHAR( 1 ) && HB_ISPOINTER( 2 ) )
   {
      if( ( QString ) "QGraphicsScene" == hbqt_par_QString( 1 ) )
      {
         __HB_RETPTRGC__( new QGraphicsView( hbqt_par_QGraphicsScene( 2 ), ( HB_ISPOINTER( 3 ) ? hbqt_par_QWidget( 3 ) : 0 ) ) );
      }
      else
      {
         __HB_RETPTRGC__( new QGraphicsView() );
      }   
   }
   else
   {
      __HB_RETPTRGC__( new QGraphicsView() );
   }
}
</CODE>

<ENUMS>
flags CacheMode
enum CacheModeFlag { CacheNone, CacheBackground }
enum DragMode { NoDrag, ScrollHandDrag, RubberBandDrag }
flags OptimizationFlags
enum OptimizationFlag { DontClipPainter, DontSavePainterState, DontAdjustForAntialiasing }
enum ViewportAnchor { NoAnchor, AnchorViewCenter, AnchorUnderMouse }
enum ViewportUpdateMode { FullViewportUpdate, MinimalViewportUpdate, SmartViewportUpdate, BoundingRectViewportUpdate, NoViewportUpdate }
</ENUMS>

<PROTOS>
Qt::Alignment alignment () const
QBrush backgroundBrush () const
CacheMode cacheMode () const
void centerOn ( const QPointF & pos )
void centerOn ( qreal x, qreal y )
void centerOn ( const QGraphicsItem * item )
DragMode dragMode () const
void ensureVisible ( const QRectF & rect, int xmargin = 50, int ymargin = 50 )
void ensureVisible ( qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50 )
void ensureVisible ( const QGraphicsItem * item, int xmargin = 50, int ymargin = 50 )
void fitInView ( const QRectF & rect, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
void fitInView ( qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
void fitInView ( const QGraphicsItem * item, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
QBrush foregroundBrush () const
bool isInteractive () const
QGraphicsItem * itemAt ( const QPoint & pos ) const
QGraphicsItem * itemAt ( int x, int y ) const
QList<QGraphicsItem *> items () const
QList<QGraphicsItem *> items ( const QPoint & pos ) const
QList<QGraphicsItem *> items ( int x, int y ) const
QList<QGraphicsItem *> items ( int x, int y, int w, int h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QRect & rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPolygon & polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPainterPath & path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QPoint mapFromScene ( const QPointF & point ) const
QPolygon mapFromScene ( const QRectF & rect ) const
QPolygon mapFromScene ( const QPolygonF & polygon ) const
QPainterPath mapFromScene ( const QPainterPath & path ) const
QPoint mapFromScene ( qreal x, qreal y ) const
QPolygon mapFromScene ( qreal x, qreal y, qreal w, qreal h ) const
QPointF mapToScene ( const QPoint & point ) const
QPolygonF mapToScene ( const QRect & rect ) const
QPolygonF mapToScene ( const QPolygon & polygon ) const
QPainterPath mapToScene ( const QPainterPath & path ) const
QPointF mapToScene ( int x, int y ) const
QPolygonF mapToScene ( int x, int y, int w, int h ) const
QMatrix matrix () const
OptimizationFlags optimizationFlags () const
void render ( QPainter * painter, const QRectF & target = QRectF(), const QRect & source = QRect(), Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio )
QPainter::RenderHints renderHints () const
void resetCachedContent ()
void resetMatrix ()
void resetTransform ()
ViewportAnchor resizeAnchor () const
void rotate ( qreal angle )
Qt::ItemSelectionMode rubberBandSelectionMode () const
void scale ( qreal sx, qreal sy )
QGraphicsScene * scene () const
QRectF sceneRect () const
void setAlignment ( Qt::Alignment alignment )
void setBackgroundBrush ( const QBrush & brush )
void setCacheMode ( CacheMode mode )
void setDragMode ( DragMode mode )
void setForegroundBrush ( const QBrush & brush )
void setInteractive ( bool allowed )
void setMatrix ( const QMatrix & matrix, bool combine = false )
void setOptimizationFlag ( OptimizationFlag flag, bool enabled = true )
void setOptimizationFlags ( OptimizationFlags flags )
void setRenderHint ( QPainter::RenderHint hint, bool enabled = true )
void setRenderHints ( QPainter::RenderHints hints )
void setResizeAnchor ( ViewportAnchor anchor )
void setRubberBandSelectionMode ( Qt::ItemSelectionMode mode )
void setScene ( QGraphicsScene * scene )
void setSceneRect ( const QRectF & rect )
void setSceneRect ( qreal x, qreal y, qreal w, qreal h )
void setTransform ( const QTransform & matrix, bool combine = false )
void setTransformationAnchor ( ViewportAnchor anchor )
void setViewportUpdateMode ( ViewportUpdateMode mode )
void shear ( qreal sh, qreal sv )
QTransform transform () const
ViewportAnchor transformationAnchor () const
void translate ( qreal dx, qreal dy )
QTransform viewportTransform () const
ViewportUpdateMode viewportUpdateMode () const
</PROTOS>

<SLOTS>
void invalidateScene ( const QRectF & rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers )
void updateScene ( const QList<QRectF> & rects )
void updateSceneRect ( const QRectF & rect )
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



