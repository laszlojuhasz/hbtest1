/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject    = 
Inherits   = QObject
Type       = Core
New        =
Destructor = 
</CLASS>

<CODE>
#include <QtGui/QItemSelectionModel>


/* QItemSelectionModel ( QAbstractItemModel * model )
 * QItemSelectionModel ( QAbstractItemModel * model, QObject * parent )
 * virtual ~QItemSelectionModel ()
 */
HB_FUNC( QT_QITEMSELECTIONMODEL )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( new QItemSelectionModel( hbqt_par_QAbstractItemModel( 1 ) ) );
   }
}
</CODE>

<ENUMS>
enum SelectionFlag { NoUpdate, Clear, Select, Deselect, ..., ClearAndSelect }
flags SelectionFlags
</ENUMS>

<PROTOS>
bool columnIntersectsSelection ( int column, const QModelIndex & parent ) const
QModelIndex currentIndex () const
bool hasSelection () const
bool isColumnSelected ( int column, const QModelIndex & parent ) const
bool isRowSelected ( int row, const QModelIndex & parent ) const
bool isSelected ( const QModelIndex & index ) const
const QAbstractItemModel * model () const
bool rowIntersectsSelection ( int row, const QModelIndex & parent ) const
// QModelIndexList selectedColumns ( int row = 0 ) const
// QModelIndexList selectedIndexes () const
// QModelIndexList selectedRows ( int column = 0 ) const
const QItemSelection selection () const
</PROTOS>

<SLOTS>
virtual void clear ()
void clearSelection ()
virtual void reset ()
virtual void select ( const QModelIndex & index, QItemSelectionModel::SelectionFlags command )
virtual void select ( const QItemSelection & selection, QItemSelectionModel::SelectionFlags command )
void setCurrentIndex ( const QModelIndex & index, QItemSelectionModel::SelectionFlags command )
</SLOTS>

<SIGNALS>
void currentChanged ( const QModelIndex & current, const QModelIndex & previous )
void currentColumnChanged ( const QModelIndex & current, const QModelIndex & previous )
void currentRowChanged ( const QModelIndex & current, const QModelIndex & previous )
void selectionChanged ( const QItemSelection & selected, const QItemSelection & deselected )
</SIGNALS>




