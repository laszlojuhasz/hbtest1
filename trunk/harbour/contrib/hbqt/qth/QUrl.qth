/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherit  = QWidget
New      = pParent
</CLASS>

<CODE>
#include <QtCore/QStringList>
#include <QtCore/QUrl>


/*
 * QUrl ()
 * QUrl ( const QString & url )
 * QUrl ( const QUrl & other )
 * QUrl ( const QString & url, ParsingMode parsingMode )
 * ~QUrl ()
 */
HB_FUNC( QT_QURL )
{
   hb_retptr( new QUrl( hbqt_par_QString( 1 ) ) );
}
/*
 * void setQueryDelimiters ( char valueDelimiter, char pairDelimiter )
 */
HB_FUNC( QT_QURL_SETQUERYDELIMITERS )
{
   hbqt_par_QUrl( 1 )->setQueryDelimiters( ( char ) hb_parni( 2 ), ( char ) hb_parni( 3 ) );
}
</CODE>

<ENUMS>
enum FormattingOption { None, RemoveScheme, RemovePassword, RemoveUserInfo, ..., StripTrailingSlash }
flags FormattingOptions
enum ParsingMode { TolerantMode, StrictMode }
</ENUMS>

<PROTOS>
void addEncodedQueryItem ( const QByteArray & key, const QByteArray & value )
void addQueryItem ( const QString & key, const QString & value )
QList<QByteArray> allEncodedQueryItemValues ( const QByteArray & key ) const
QStringList allQueryItemValues ( const QString & key ) const
QString authority () const
void clear ()
QByteArray encodedFragment () const
QByteArray encodedHost () const
QByteArray encodedPassword () const
QByteArray encodedPath () const
QByteArray encodedQuery () const
QByteArray encodedQueryItemValue ( const QByteArray & key ) const
QList<QPair<QByteArray, QByteArray> > encodedQueryItems () const
QByteArray encodedUserName () const
QString errorString () const
QString fragment () const
bool hasEncodedQueryItem ( const QByteArray & key ) const
bool hasFragment () const
bool hasQuery () const
bool hasQueryItem ( const QString & key ) const
QString host () const
bool isEmpty () const
bool isParentOf ( const QUrl & childUrl ) const
bool isRelative () const
bool isValid () const
QString password () const
QString path () const
int port () const
int port ( int defaultPort ) const
QString queryItemValue ( const QString & key ) const
QList<QPair<QString, QString> > queryItems () const
char queryPairDelimiter () const
char queryValueDelimiter () const
void removeAllEncodedQueryItems ( const QByteArray & key )
void removeAllQueryItems ( const QString & key )
void removeEncodedQueryItem ( const QByteArray & key )
void removeQueryItem ( const QString & key )
QUrl resolved ( const QUrl & relative ) const
QString scheme () const
void setAuthority ( const QString & authority )
void setEncodedFragment ( const QByteArray & fragment )
void setEncodedHost ( const QByteArray & host )
void setEncodedPassword ( const QByteArray & password )
void setEncodedPath ( const QByteArray & path )
void setEncodedQuery ( const QByteArray & query )
void setEncodedQueryItems ( const QList<QPair<QByteArray, QByteArray> > & query )
void setEncodedUrl ( const QByteArray & encodedUrl )
void setEncodedUrl ( const QByteArray & encodedUrl, ParsingMode parsingMode )
void setEncodedUserName ( const QByteArray & userName )
void setFragment ( const QString & fragment )
void setHost ( const QString & host )
void setPassword ( const QString & password )
void setPath ( const QString & path )
void setPort ( int port )
#
# Shifted to CODE Section
#
//void setQueryDelimiters ( char valueDelimiter, char pairDelimiter )
void setQueryItems ( const QList<QPair<QString, QString> > & query )
void setScheme ( const QString & scheme )
void setUrl ( const QString & url )
void setUrl ( const QString & url, ParsingMode parsingMode )
void setUserInfo ( const QString & userInfo )
void setUserName ( const QString & userName )
QByteArray toEncoded ( FormattingOptions options = None ) const
QString toLocalFile () const
QString toString ( FormattingOptions options = None ) const
QString userInfo () const
QString userName () const


QString fromAce ( const QByteArray & domain )
QUrl fromEncoded ( const QByteArray & input )
QUrl fromEncoded ( const QByteArray & input, ParsingMode parsingMode )
QUrl fromLocalFile ( const QString & localFile )
QString fromPercentEncoding ( const QByteArray & input )
QStringList idnWhitelist ()
void setIdnWhitelist ( const QStringList & list )
QByteArray toAce ( const QString & domain )
QByteArray toPercentEncoding ( const QString & input, const QByteArray & exclude = QByteArray(), const QByteArray & include = QByteArray() )
</PROTOS>
