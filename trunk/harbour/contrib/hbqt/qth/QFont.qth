/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;
<CLASS>
New=
</CLASS>

<CODE>
#include <QtGui/QFont>

/*
 * QFont ()
 * QFont ( const QString & family, int pointSize = -1, int weight = -1, bool italic = false )
 * QFont ( const QFont & font, QPaintDevice * pd )
 * QFont ( const QFont & font )
 */
HB_FUNC( QT_QFONT )
{
   if( HB_ISCHAR( 1 ) )
   {
      hb_retptr( ( QFont* ) new QFont() );
   }
   else
   {
      hb_retptr( ( QFont* ) new QFont( hbqt_par_QString( 1 ),
                                       HB_ISNUM( 2 ) ? hb_parni( 2 ) : -1,
                                       HB_ISNUM( 3 ) ? hb_parni( 3 ) : -1,
                                       hb_parl( 4 ) ) );
   }
}
</CODE>

<ENUMS>
enum Capitalization { MixedCase, AllUppercase, AllLowercase, SmallCaps, Capitalize }
enum SpacingType { PercentageSpacing, AbsoluteSpacing }
enum Stretch { UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, ..., UltraExpanded }
enum Style { StyleNormal, StyleItalic, StyleOblique }
enum StyleHint { AnyStyle, SansSerif, Helvetica, Serif, ..., System }
enum StyleStrategy { PreferDefault, PreferBitmap, PreferDevice, PreferOutline, ..., PreferQuality }
enum Weight { Light, Normal, DemiBold, Bold, Black }
</ENUMS>

<PROTOS>
bool bold () const
Capitalization capitalization () const
QString defaultFamily () const
bool exactMatch () const
QString family () const
bool fixedPitch () const
#
# member not found
#
// FT_Face freetypeFace () const
#
bool fromString ( const QString & descrip )
#
# Not portable
// HFONT handle () const
#
# member not found
// bool isCopyOf ( const QFont & f ) const
bool italic () const
bool kerning () const
QString key () const
QString lastResortFamily () const
QString lastResortFont () const
qreal letterSpacing () const
SpacingType letterSpacingType () const
#
# member not found
// quint32 macFontID () const
bool overline () const
int pixelSize () const
int pointSize () const
qreal pointSizeF () const
bool rawMode () const
QString rawName () const
#
# error: invalid conversion from `QFont*' to `uint'
# initializing argument 1 of `void QFont::resolve(uint)'
// QFont resolve ( const QFont & other ) const
void setBold ( bool enable )
void setCapitalization ( Capitalization caps )
void setFamily ( const QString & family )
void setFixedPitch ( bool enable )
void setItalic ( bool enable )
void setKerning ( bool enable )
void setLetterSpacing ( SpacingType type, qreal spacing )
void setOverline ( bool enable )
void setPixelSize ( int pixelSize )
void setPointSize ( int pointSize )
void setPointSizeF ( qreal pointSize )
void setRawMode ( bool enable )
void setRawName ( const QString & name )
void setStretch ( int factor )
void setStrikeOut ( bool enable )
void setStyle ( Style style )
void setStyleHint ( StyleHint hint, StyleStrategy strategy = PreferDefault )
void setStyleStrategy ( StyleStrategy s )
void setUnderline ( bool enable )
void setWeight ( int weight )
void setWordSpacing ( qreal spacing )
int stretch () const
bool strikeOut () const
Style style () const
StyleHint styleHint () const
StyleStrategy styleStrategy () const
QString toString () const
bool underline () const
int weight () const
qreal wordSpacing () const
</PROTOS>

