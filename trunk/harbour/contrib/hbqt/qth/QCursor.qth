/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherits =
Type     = PlainObject
New      =
</CLASS>

<DOC>
oCursor := QCursor():new()
oCursor := QCursor():new( pQCursor )
oCursor := QCursor():new( nQt_CursorShape )
oCursor := QCursor():new( "QPixmap", pQPixmap, [ nHotX = -1 ] , [ nHotY = -1 ] )
oCursor := QCursor():new( pQBitmap, pQBitmapAsMask, [ nHotX = -1 ], [ nHotY = -1 ] )
</DOC>

<CODE>
#include <qpixmap.h>
#include <QtGui/QCursor>

/*
 * QCursor ()
 * QCursor ( Qt::CursorShape shape )
 * QCursor ( const QBitmap & bitmap, const QBitmap & mask, int hotX = -1, int hotY = -1 )
 * QCursor ( const QPixmap & pixmap, int hotX = -1, int hotY = -1 )
 * QCursor ( const QCursor & c )
 * QCursor ( HCURSOR cursor )
 * QCursor ( Qt::HANDLE handle )
 * ~QCursor ()
 */
HB_FUNC( QT_QCURSOR )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      hb_retptr( ( QCursor* ) new QCursor( ( Qt::CursorShape ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      hb_retptr( ( QCursor* ) new QCursor( *hbqt_par_QCursor( 1 ) ) );
   }
   else if( hb_pcount() >= 2 && HB_ISCHAR( 1 ) && HB_ISPOINTER( 2 ) )
   {
      QString objName = hbqt_par_QString( 1 );

      if( objName == ( QString ) "QPixmap" )
      {
         hb_retptr( ( QCursor* ) new QCursor( *hbqt_par_QPixmap( 2 ), 
                                              HB_ISNUM( 3 ) ? hb_parni( 3 ) : -1,
                                              HB_ISNUM( 4 ) ? hb_parni( 4 ) : -1 ) );
      }
      else
      {
         hb_retptr( ( QCursor* ) new QCursor() );
      }
   }
   else if( hb_pcount() >= 2 && HB_ISPOINTER( 1 ) && HB_ISPOINTER( 2 ) )
   {
      hb_retptr( ( QCursor* ) new QCursor( *hbqt_par_QBitmap( 1 ), *hbqt_par_QBitmap( 2 ), 
                                           HB_ISNUM( 3 ) ? hb_parni( 3 ) : -1,
                                           HB_ISNUM( 4 ) ? hb_parni( 4 ) : -1 ) );
   }
   else
   {
      hb_retptr( ( QCursor* ) new QCursor() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
const QBitmap * bitmap () const
// HCURSOR_or_HANDLE handle () const
QPoint hotSpot () const
const QBitmap * mask () const
QPixmap pixmap () const
void setShape ( Qt::CursorShape shape )
Qt::CursorShape shape () const

QPoint pos ()
void setPos ( int x, int y )
void setPos ( const QPoint & p )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
