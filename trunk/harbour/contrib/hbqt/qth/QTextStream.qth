/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Type     = Core
New      = cText, nIOMode
</CLASS>

<CODE>
#include <QtCore/QTextStream>


/*
 * QTextStream ()
 * QTextStream ( QIODevice * device )
 * QTextStream ( FILE * fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( QByteArray * array, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( const QByteArray & array, QIODevice::OpenMode openMode = QIODevice::ReadOnly )
 * virtual ~QTextStream ()
 */
HB_FUNC( QT_QTEXTSTREAM )
{
   hb_retptr( ( QTextStream* ) new QTextStream( hb_parcx( 1 ), 
      ( QIODevice::OpenMode ) ( HB_ISNUM( 2 ) ?  hb_parni( 2 ) : QIODevice::ReadWrite ) ) );
}
/*
 * QChar padChar () const
 */
HB_FUNC( QT_QTEXTSTREAM_PADCHAR )
{

}
</CODE>

<ENUMS>
flags NumberFlags
enum FieldAlignment { AlignLeft, AlignRight, AlignCenter, AlignAccountingStyle }
enum NumberFlag { ShowBase, ForcePoint, ForceSign, UppercaseBase, UppercaseDigits }
enum RealNumberNotation { ScientificNotation, FixedNotation, SmartNotation }
enum Status { Ok, ReadPastEnd, ReadCorruptData }
</ENUMS>

<PROTOS>
bool atEnd () const
bool autoDetectUnicode () const
QTextCodec * codec () const
QIODevice * device () const
FieldAlignment fieldAlignment () const
int fieldWidth () const
void flush ()
bool generateByteOrderMark () const
int integerBase () const
QLocale locale () const
NumberFlags numberFlags () const
qint64 pos () const
QString read ( qint64 maxlen )
QString readAll ()
QString readLine ( qint64 maxlen = 0 )
RealNumberNotation realNumberNotation () const
int realNumberPrecision () const
void reset ()
void resetStatus ()
bool seek ( qint64 pos )
void setAutoDetectUnicode ( bool enabled )
void setCodec ( QTextCodec * codec )
void setCodec ( const char * codecName )
void setDevice ( QIODevice * device )
void setFieldAlignment ( FieldAlignment mode )
void setFieldWidth ( int width )
void setGenerateByteOrderMark ( bool generate )
void setIntegerBase ( int base )
void setLocale ( const QLocale & locale )
void setNumberFlags ( NumberFlags flags )
void setPadChar ( QChar ch )
void setRealNumberNotation ( RealNumberNotation notation )
void setRealNumberPrecision ( int precision )
void setStatus ( Status status )
#
//void setString ( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
#
void skipWhiteSpace ()
Status status () const
#
//QString * string () const
#
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




