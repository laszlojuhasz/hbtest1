/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherits = 
Type     = Core
New      = 
List     = yes
</CLASS>

<CODE>
#include <QtCore/QList>


/*
 * QList ()
 * QList ( const QList<T> & other )
 * ~QList ()
 */
HB_FUNC( QT_QLIST )
{
   QList<void*>* list = NULL;
   hb_retptr( ( QList<void*>* ) list );
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void append ( const T & value )
void append ( const QList<T> & value )
// const T & at ( int i ) const
// T & back ()
// const T & back () const
//iterator begin ()
//const_iterator begin () const
void clear ()
//const_iterator constBegin () const
//const_iterator constEnd () const
//bool contains ( const T & value ) const
int count ( const T & value ) const
int count () const
bool empty () const
//iterator end ()
//const_iterator end () const
bool endsWith ( const T & value ) const
//iterator erase ( iterator pos )
//iterator erase ( iterator begin, iterator end )
// T & first ()
// const T & first () const
// T & front ()
// const T & front () const
int indexOf ( const T & value, int from = 0 ) const
void insert ( int i, const T & value )
//iterator insert ( iterator before, const T & value )
bool isEmpty () const
// T & last ()
// const T & last () const
int lastIndexOf ( const T & value, int from = -1 ) const
int length () const
// QList<T> mid ( int pos, int length = -1 ) const
void move ( int from, int to )
void pop_back ()
void pop_front ()
void prepend ( const T & value )
void push_back ( const T & value )
void push_front ( const T & value )
int removeAll ( const T & value )
void removeAt ( int i )
void removeFirst ()
void removeLast ()
bool removeOne ( const T & value )
void replace ( int i, const T & value )
int size () const
bool startsWith ( const T & value ) const
void swap ( int i, int j )
// T takeAt ( int i )
// T takeFirst ()
// T takeLast ()
QSet<T> toSet () const
//std::list<T> toStdList () const
QVector<T> toVector () const
// T value ( int i ) const
// T value ( int i, const T & defaultValue ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



