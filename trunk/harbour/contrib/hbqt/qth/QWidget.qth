/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QObject, QPaintDevice
New      = pParent, nFlags
</CLASS>

<CODE>
#include <QtGui/QWidget>
#include <QtGui/QIcon>
#include <QtCore/QVariant>
#include <QtCore/QLocale>


/*
 * QWidget( QWidget * parent = 0, Qt::WindowFlags f = 0 )
 */
HB_FUNC( QT_QWIDGET )
{
   hb_retptr( new QWidget( hbqt_par_QWidget( 1 ), ( Qt::WindowFlags ) hb_parni( 2 ) ) );
}
</CODE>

<ENUMS>
enum RenderFlag { DrawWindowBackground, DrawChildren, IgnoreMask }
# From QPaintDevice : Parent Class
enum PaintDeviceMetric { PdmWidth, PdmHeight, PdmWidthMM, PdmHeightMM, ..., PdmPhysicalDpiY }
</ENUMS>

<PROTOS>
bool acceptDrops () const
QString accessibleDescription () const
QString accessibleName () const
QList<QAction *> actions () const
void activateWindow ()
void addAction ( QAction * action )
void addActions ( QList<QAction *> actions )
void adjustSize ()
bool autoFillBackground () const
QPalette::ColorRole backgroundRole () const
QSize baseSize () const
QWidget * childAt ( int x, int y ) const
QWidget * childAt ( const QPoint & p ) const
QRect childrenRect () const
QRegion childrenRegion () const
void clearFocus ()
void clearMask ()
QRect contentsRect () const
Qt::ContextMenuPolicy contextMenuPolicy () const
QCursor cursor () const
WId effectiveWinId () const
void ensurePolished () const
Qt::FocusPolicy focusPolicy () const
QWidget * focusProxy () const
QWidget * focusWidget () const
const QFont & font () const
QFontInfo fontInfo () const
QFontMetrics fontMetrics () const
QPalette::ColorRole foregroundRole () const
QRect frameGeometry () const
QSize frameSize () const
const QRect & geometry () const
void getContentsMargins ( int * left, int * top, int * right, int * bottom ) const
# non-portable
// virtual HDC getDC () const
void grabKeyboard ()
void grabMouse ()
void grabMouse ( const QCursor & cursor )
int grabShortcut ( const QKeySequence & key, Qt::ShortcutContext context = Qt::WindowShortcut )
QGraphicsProxyWidget * graphicsProxyWidget () const
//bool hasEditFocus () const
bool hasFocus () const
bool hasMouseTracking () const
int height () const
virtual int heightForWidth ( int w ) const
QInputContext * inputContext ()
virtual QVariant inputMethodQuery ( Qt::InputMethodQuery query ) const
void insertAction ( QAction * before, QAction * action )
void insertActions ( QAction * before, QList<QAction *> actions )
bool isActiveWindow () const
bool isAncestorOf ( const QWidget * child ) const
bool isEnabled () const
bool isEnabledTo ( QWidget * ancestor ) const
bool isFullScreen () const
bool isHidden () const
bool isMaximized () const
bool isMinimized () const
bool isModal () const
bool isVisible () const
bool isVisibleTo ( QWidget * ancestor ) const
bool isWindow () const
bool isWindowModified () const
QLayout * layout () const
Qt::LayoutDirection layoutDirection () const
QLocale locale () const
//Qt::HANDLE macCGHandle () const
//Qt::HANDLE macQDHandle () const
QPoint mapFrom ( QWidget * parent, const QPoint & pos ) const
QPoint mapFromGlobal ( const QPoint & pos ) const
QPoint mapFromParent ( const QPoint & pos ) const
QPoint mapTo ( QWidget * parent, const QPoint & pos ) const
QPoint mapToGlobal ( const QPoint & pos ) const
QPoint mapToParent ( const QPoint & pos ) const
QRegion mask () const
int maximumHeight () const
QSize maximumSize () const
int maximumWidth () const
int minimumHeight () const
QSize minimumSize () const
virtual QSize minimumSizeHint () const
int minimumWidth () const
#
#  Note that order of the function calls is swaped
#  It implies that we can implement the method in a simpler way
#  Infact we can remove second method with QPoint as it needs more code
#
void move ( int x, int y )
void move ( const QPoint & )
#
QWidget * nativeParentWidget () const
QWidget * nextInFocusChain () const
QRect normalGeometry () const
void overrideWindowFlags ( Qt::WindowFlags flags )
virtual QPaintEngine * paintEngine () const
const QPalette & palette () const
QWidget * parentWidget () const
QPoint pos () const
QRect rect () const
# non-portable
// virtual void releaseDC ( HDC hdc ) const
void releaseKeyboard ()
void releaseMouse ()
void releaseShortcut ( int id )
void removeAction ( QAction * action )
void render ( QPaintDevice * target, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
void render ( QPainter * painter, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
#
#  As a normalized behavior, int types are the best.
#    
void repaint ( int x, int y, int w, int h )
void repaint ( const QRect & rect )
void repaint ( const QRegion & rgn )
#
#   Please never change this order as it is considered natural
#
void resize ( int w, int h )
void resize ( const QSize & )
#
bool restoreGeometry ( const QByteArray & geometry )
QByteArray saveGeometry () const
#
#  Normalized behavior
#
void scroll ( int dx, int dy )
void scroll ( int dx, int dy, const QRect & r )
#
void setAcceptDrops ( bool on )
void setAccessibleDescription ( const QString & description )
void setAccessibleName ( const QString & name )
void setAttribute ( Qt::WidgetAttribute attribute, bool on = true )
void setAutoFillBackground ( bool enabled )
void setBackgroundRole ( QPalette::ColorRole role )
void setBaseSize ( const QSize & )
void setBaseSize ( int basew, int baseh )
void setContentsMargins ( int left, int top, int right, int bottom )
void setContextMenuPolicy ( Qt::ContextMenuPolicy policy )
void setCursor ( const QCursor & )
//void setEditFocus ( bool enable )
void setFixedHeight ( int h )
void setFixedSize ( const QSize & s )
void setFixedSize ( int w, int h )
void setFixedWidth ( int w )
void setFocus ( Qt::FocusReason reason )
void setFocusPolicy ( Qt::FocusPolicy policy )
void setFocusProxy ( QWidget * w )
void setFont ( const QFont & )
void setForegroundRole ( QPalette::ColorRole role )
void setGeometry ( const QRect & )
void setGeometry ( int x, int y, int w, int h )
void setInputContext ( QInputContext * context )
void setLayout ( QLayout * layout )
void setLayoutDirection ( Qt::LayoutDirection direction )
void setLocale ( const QLocale & locale )
void setMask ( const QBitmap & bitmap )
void setMask ( const QRegion & region )
void setMaximumHeight ( int maxh )
void setMaximumSize ( const QSize & )
void setMaximumSize ( int maxw, int maxh )
void setMaximumWidth ( int maxw )
void setMinimumHeight ( int minh )
void setMinimumSize ( const QSize & )
void setMinimumSize ( int minw, int minh )
void setMinimumWidth ( int minw )
void setMouseTracking ( bool enable )
void setPalette ( const QPalette & )
void setParent ( QWidget * parent )
void setParent ( QWidget * parent, Qt::WindowFlags f )
void setShortcutAutoRepeat ( int id, bool enable = true )
void setShortcutEnabled ( int id, bool enable = true )
void setSizeIncrement ( const QSize & )
void setSizeIncrement ( int w, int h )
#
# do not know how to handle ??
#
//void setSizePolicy ( QSizePolicy )
void setSizePolicy ( QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical )
void setStatusTip ( const QString & )
void setStyle ( QStyle * style )
void setToolTip ( const QString & )
void setUpdatesEnabled ( bool enable )
void setWhatsThis ( const QString & )
void setWindowFilePath ( const QString & filePath )
void setWindowFlags ( Qt::WindowFlags type )
void setWindowIcon ( const QIcon & icon )
void setWindowIconText ( const QString & )
void setWindowModality ( Qt::WindowModality windowModality )
void setWindowOpacity ( qreal level )
void setWindowRole ( const QString & role )
void setWindowState ( Qt::WindowStates windowState )
void setWindowSurface ( QWindowSurface * surface )   (preliminary)
QSize size () const
virtual QSize sizeHint () const
QSize sizeIncrement () const
QSizePolicy sizePolicy () const
void stackUnder ( QWidget * w )
QString statusTip () const
QStyle * style () const
QString styleSheet () const
bool testAttribute ( Qt::WidgetAttribute attribute ) const
QString toolTip () const
bool underMouse () const
void unsetCursor ()
void unsetLayoutDirection ()
void unsetLocale ()
void update ( int x, int y, int w, int h )
void update ( const QRect & rect )
void update ( const QRegion & rgn )
void updateGeometry ()
bool updatesEnabled () const
QRegion visibleRegion () const
QString whatsThis () const
int width () const
WId winId () const
QWidget * window () const
QString windowFilePath () const
Qt::WindowFlags windowFlags () const
QIcon windowIcon () const
QString windowIconText () const
Qt::WindowModality windowModality () const
qreal windowOpacity () const
QString windowRole () const
Qt::WindowStates windowState () const
QWindowSurface * windowSurface () const   (preliminary)
QString windowTitle () const
Qt::WindowType windowType () const
int x () const
//Qt::HANDLE x11PictureHandle () const
int y () const
</PROTOS>

<SLOTS>
bool close ()
void hide ()
void lower ()
void raise ()
void repaint ()
void setDisabled ( bool disable )
void setEnabled ( bool enable )
void setFocus ()
void setHidden ( bool hidden )
void setStyleSheet ( const QString & styleSheet )
virtual void setVisible ( bool visible )
void setWindowModified ( bool modified )
void setWindowTitle ( const QString & title )
void show ()
void showFullScreen ()
void showMaximized ()
void showMinimized ()
void showNormal ()
void update ()
</SLOTS>

<SIGNALS>
void clicked ( bool checked = false )
void pressed ()
void released ()
void toggled ( bool checked )
</SIGNALS>
