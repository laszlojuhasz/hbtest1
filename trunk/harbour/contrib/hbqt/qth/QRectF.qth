/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Type     = PlainObject
New      = 
</CLASS>

<DOC>
oRectF := QRectF():new()
oRectF := QRectF():new( pQRectF_other )
oRectF := QRectF():new( pQPoint_topLeft, pQPoint_bottomRight )
oRectF := QRectF():new( nX, nY, nWidth, nHeight )

/* TODO:
 *
 * oRect := QRectF():new( pQPoint_topLeft, pQSize_size )
 */
</DOC>

<CODE>
#include <QtCore/QRectF>


/*
 * QRectF ()
 * QRectF ( const QPointF & topLeft, const QSizeF & size )
 * QRectF ( const QPointF & topLeft, const QPointF & bottomRight )
 * QRectF ( qreal x, qreal y, qreal width, qreal height )
 * QRectF ( const QRect & rectangle )
 */
HB_FUNC( QT_QRECTF )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      hb_retptr( ( QRectF* ) new QRectF( *hbqt_par_QRectF( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISPOINTER( 1 ) && HB_ISPOINTER( 2 ) )
   {
      hb_retptr( ( QRectF* ) new QRectF( *hbqt_par_QPoint( 1 ), *hbqt_par_QPoint( 2 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      hb_retptr( ( QRectF* ) new QRectF( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ), hb_parnd( 4 ) ) );
   }
   else
   {
      hb_retptr( ( QRectF* ) new QRectF() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void adjust ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 )
QRectF adjusted ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 ) const
qreal bottom () const
QPointF bottomLeft () const
QPointF bottomRight () const
QPointF center () const
bool contains ( const QPointF & point ) const
bool contains ( qreal x, qreal y ) const
bool contains ( const QRectF & rectangle ) const
void getCoords ( qreal * x1, qreal * y1, qreal * x2, qreal * y2 ) const
void getRect ( qreal * x, qreal * y, qreal * width, qreal * height ) const
qreal height () const
QRectF intersected ( const QRectF & rectangle ) const
bool intersects ( const QRectF & rectangle ) const
bool isEmpty () const
bool isNull () const
bool isValid () const
qreal left () const
void moveBottom ( qreal y )
void moveBottomLeft ( const QPointF & position )
void moveBottomRight ( const QPointF & position )
void moveCenter ( const QPointF & position )
void moveLeft ( qreal x )
void moveRight ( qreal x )
void moveTo ( qreal x, qreal y )
void moveTo ( const QPointF & position )
void moveTop ( qreal y )
void moveTopLeft ( const QPointF & position )
void moveTopRight ( const QPointF & position )
QRectF normalized () const
qreal right () const
void setBottom ( qreal y )
void setBottomLeft ( const QPointF & position )
void setBottomRight ( const QPointF & position )
void setCoords ( qreal x1, qreal y1, qreal x2, qreal y2 )
void setHeight ( qreal height )
void setLeft ( qreal x )
void setRect ( qreal x, qreal y, qreal width, qreal height )
void setRight ( qreal x )
void setSize ( const QSizeF & size )
void setTop ( qreal y )
void setTopLeft ( const QPointF & position )
void setTopRight ( const QPointF & position )
void setWidth ( qreal width )
void setX ( qreal x )
void setY ( qreal y )
QSizeF size () const
QRect toAlignedRect () const
QRect toRect () const
qreal top () const
QPointF topLeft () const
QPointF topRight () const
void translate ( qreal dx, qreal dy )
void translate ( const QPointF & offset )
QRectF translated ( qreal dx, qreal dy ) const
QRectF translated ( const QPointF & offset ) const
QRectF united ( const QRectF & rectangle ) const
qreal width () const
qreal x () const
qreal y () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




