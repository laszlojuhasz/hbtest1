/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherits = QIODevice
Type     = Core
New      = 
</CLASS>

<CODE>
#include <QtCore/QProcess>


/*
 * QProcess ( QObject * parent = 0 )
 * virtual ~QProcess ()
 */
HB_FUNC( QT_QPROCESS )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      hb_retptr( ( QProcess* ) new QProcess( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      hb_retptr( ( QProcess* ) new QProcess() );
   }
}
</CODE>

<ENUMS>
# FROM QIODevice
flags OpenMode
enum OpenModeFlag { NotOpen, ReadOnly, WriteOnly, ReadWrite, ..., Unbuffered }

enum ExitStatus { NormalExit, CrashExit }
enum ProcessChannel { StandardOutput, StandardError }
enum ProcessChannelMode { SeparateChannels, MergedChannels, ForwardedChannels }
enum ProcessError { FailedToStart, Crashed, Timedout, WriteError, ReadError, UnknownError }
enum ProcessState { NotRunning, Starting, Running }
</ENUMS>

<PROTOS>
virtual void close ()
void closeReadChannel ( ProcessChannel channel )
void closeWriteChannel ()
QStringList environment () const
QProcess::ProcessError error () const
int exitCode () const
QProcess::ExitStatus exitStatus () const
// Q_PID pid () const
ProcessChannelMode processChannelMode () const
QByteArray readAllStandardError ()
QByteArray readAllStandardOutput ()
ProcessChannel readChannel () const
void setEnvironment ( const QStringList & environment )
void setProcessChannelMode ( ProcessChannelMode mode )
void setReadChannel ( ProcessChannel channel )
void setStandardErrorFile ( const QString & fileName, OpenMode mode = Truncate )
void setStandardInputFile ( const QString & fileName )
void setStandardOutputFile ( const QString & fileName, OpenMode mode = Truncate )
void setStandardOutputProcess ( QProcess * destination )
void setWorkingDirectory ( const QString & dir )
void start ( const QString & program, const QStringList & arguments, OpenMode mode = ReadWrite )
void start ( const QString & program, OpenMode mode = ReadWrite )
QProcess::ProcessState state () const
bool waitForFinished ( int msecs = 30000 )
bool waitForStarted ( int msecs = 30000 )
QString workingDirectory () const

int execute ( const QString & program, const QStringList & arguments )
int execute ( const QString & program )
bool startDetached ( const QString & program, const QStringList & arguments, const QString & workingDirectory, qint64 * pid = 0 )
bool startDetached ( const QString & program, const QStringList & arguments )
bool startDetached ( const QString & program )
QStringList systemEnvironment ()
</PROTOS>

<SLOTS>
void kill ()
void terminate ()
</SLOTS>

<SIGNALS>
void error ( QProcess::ProcessError error )
void finished ( int exitCode, QProcess::ExitStatus exitStatus )
void readyReadStandardError ()
void readyReadStandardOutput ()
void started ()
void stateChanged ( QProcess::ProcessState newState )
</SIGNALS>

<VARIABLES>
</VARIABLES>



