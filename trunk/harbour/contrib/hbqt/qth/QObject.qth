/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
New      = pParent
Calls    = QT_Qbject
</CLASS>

<CODE>
#include <QWidget>
#include <QtCore/QObject>
#include <QtCore/QVariant>

/*
 * Q_INVOKABLE QObject ( QObject * parent = 0 )
 * virtual ~QObject ()
 */
HB_FUNC( QT_QOBJECT )
{
   hb_retptr( ( QObject* ) new QObject( hbqt_par_QWidget( 1 ) ) );
}
</CODE>

<PROTOS>
bool blockSignals ( bool block )
const QObjectList & children () const
bool connect ( const QObject * sender, const char * signal, const char * method, Qt::ConnectionType type = Qt::AutoConnection ) const
bool disconnect ( const char * signal = 0, const QObject * receiver = 0, const char * method = 0 )
bool disconnect ( const QObject * receiver, const char * method = 0 )
void dumpObjectInfo ()
void dumpObjectTree ()
QList<QByteArray> dynamicPropertyNames () const
virtual bool event ( QEvent * e )
virtual bool eventFilter ( QObject * watched, QEvent * event )
//T findChild ( const QString & name = QString() ) const
QList<T> findChildren ( const QString & name = QString() ) const
QList<T> findChildren ( const QRegExp & regExp ) const
bool inherits ( const char * className ) const
void installEventFilter ( QObject * filterObj )
bool isWidgetType () const
void killTimer ( int id )
virtual const QMetaObject * metaObject () const
void moveToThread ( QThread * targetThread )
QString objectName () const
QObject * parent () const
QVariant property ( const char * name ) const
void removeEventFilter ( QObject * obj )
void setObjectName ( const QString & name )
void setParent ( QObject * parent )
bool setProperty ( const char * name, const QVariant & value )
bool signalsBlocked () const
int startTimer ( int interval )
QThread * thread () const


bool connect ( const QObject * sender, const char * signal, const QObject * receiver, const char * method, Qt::ConnectionType type = Qt::AutoConnection )
bool disconnect ( const QObject * sender, const char * signal, const QObject * receiver, const char * method )
const QMetaObject staticMetaObject
QString tr ( const char * sourceText, const char * disambiguation = 0, int n = -1 )
QString trUtf8 ( const char * sourceText, const char * disambiguation = 0, int n = -1 )
</PROTOS>

<SLOTS>
void deleteLater ()
</SLOTS>

<SIGNALS>
void destroyed ( QObject * obj = 0 )
</SIGNALS>
