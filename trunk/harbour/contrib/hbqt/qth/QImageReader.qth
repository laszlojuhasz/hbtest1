/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherits = 
Type     = Core
New      = 
</CLASS>

<CODE>
#include <QtGui/QImageReader>


/*
 * QImageReader ()
 * QImageReader ( QIODevice * device, const QByteArray & format = QByteArray() )
 * QImageReader ( const QString & fileName, const QByteArray & format = QByteArray() )
 * ~QImageReader ()
 */
HB_FUNC( QT_QIMAGEREADER )
{
   hb_retptr( ( QImageReader* ) new QImageReader() );
}
</CODE>

<ENUMS>
enum ImageReaderError { FileNotFoundError, DeviceError, UnsupportedFormatError, InvalidDataError, UnknownError }
</ENUMS>

<PROTOS>
bool autoDetectImageFormat () const
QColor backgroundColor () const
bool canRead () const
QRect clipRect () const
int currentImageNumber () const
QRect currentImageRect () const
QIODevice * device () const
ImageReaderError error () const
QString errorString () const
QString fileName () const
QByteArray format () const
int imageCount () const
QImage::Format imageFormat () const
bool jumpToImage ( int imageNumber )
bool jumpToNextImage ()
int loopCount () const
int nextImageDelay () const
int quality () const
QImage read ()
bool read ( QImage * image )
QRect scaledClipRect () const
QSize scaledSize () const
void setAutoDetectImageFormat ( bool enabled )
void setBackgroundColor ( const QColor & color )
void setClipRect ( const QRect & rect )
void setDevice ( QIODevice * device )
void setFileName ( const QString & fileName )
void setFormat ( const QByteArray & format )
void setQuality ( int quality )
void setScaledClipRect ( const QRect & rect )
void setScaledSize ( const QSize & size )
QSize size () const
bool supportsAnimation () const
bool supportsOption ( QImageIOHandler::ImageOption option ) const
QString text ( const QString & key ) const
QStringList textKeys () const

QByteArray imageFormat ( const QString & fileName )
QByteArray imageFormat ( QIODevice * device )
QList<QByteArray> supportedImageFormats ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




