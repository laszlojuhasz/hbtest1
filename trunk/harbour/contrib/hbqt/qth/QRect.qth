/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Type     = PlainObject
New      = 
</CLASS>

<DOC>
oRect := QRect():new()
oRect := QRect():new( pQRect_other )
oRect := QRect():new( pQPoint_topLeft, pQPoint_bottomRight )
oRect := QRect():new( nX, nY, nWidth, nHeight )

/* TODO:
 *
 * oRect := QRect():new( pQPoint_topLeft, pQSize_size )
 */
</DOC>

<CODE>
#include <QtCore/QRect>


/*
 * QRect ()
 * QRect ( const QPoint & topLeft, const QPoint & bottomRight )
 * QRect ( const QPoint & topLeft, const QSize & size )
 * QRect ( int x, int y, int width, int height )
 * ~QRect ()
 */
HB_FUNC( QT_QRECT )
{
   if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      hb_retptr( ( QRect* ) new QRect( *hbqt_par_QRect( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISPOINTER( 1 ) && HB_ISPOINTER( 2 ) )
   {
      hb_retptr( ( QRect* ) new QRect( *hbqt_par_QPoint( 1 ), *hbqt_par_QPoint( 2 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      hb_retptr( ( QRect* ) new QRect( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
   }
   else
   {
      hb_retptr( ( QRect* ) new QRect() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void adjust ( int dx1, int dy1, int dx2, int dy2 )
QRect adjusted ( int dx1, int dy1, int dx2, int dy2 ) const
int bottom () const
QPoint bottomLeft () const
QPoint bottomRight () const
QPoint center () const
bool contains ( const QPoint & point, bool proper = false ) const
bool contains ( int x, int y, bool proper ) const
bool contains ( int x, int y ) const
bool contains ( const QRect & rectangle, bool proper = false ) const
void getCoords ( int * x1, int * y1, int * x2, int * y2 ) const
void getRect ( int * x, int * y, int * width, int * height ) const
int height () const
QRect intersected ( const QRect & rectangle ) const
bool intersects ( const QRect & rectangle ) const
bool isEmpty () const
bool isNull () const
bool isValid () const
int left () const
void moveBottom ( int y )
void moveBottomLeft ( const QPoint & position )
void moveBottomRight ( const QPoint & position )
void moveCenter ( const QPoint & position )
void moveLeft ( int x )
void moveRight ( int x )
void moveTo ( int x, int y )
void moveTo ( const QPoint & position )
void moveTop ( int y )
void moveTopLeft ( const QPoint & position )
void moveTopRight ( const QPoint & position )
QRect normalized () const
int right () const
void setBottom ( int y )
void setBottomLeft ( const QPoint & position )
void setBottomRight ( const QPoint & position )
void setCoords ( int x1, int y1, int x2, int y2 )
void setHeight ( int height )
void setLeft ( int x )
void setRect ( int x, int y, int width, int height )
void setRight ( int x )
void setSize ( const QSize & size )
void setTop ( int y )
void setTopLeft ( const QPoint & position )
void setTopRight ( const QPoint & position )
void setWidth ( int width )
void setX ( int x )
void setY ( int y )
QSize size () const
int top () const
QPoint topLeft () const
QPoint topRight () const
void translate ( int dx, int dy )
void translate ( const QPoint & offset )
QRect translated ( int dx, int dy ) const
QRect translated ( const QPoint & offset ) const
QRect united ( const QRect & rectangle ) const
int width () const
int x () const
int y () const 
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




