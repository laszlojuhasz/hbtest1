/*
 * $Id$
 */

/*  $DOC$
 *  $TEMPLATE$
 *     Class
 *  $NAME$
 *     QByteArray()
 *  $CATEGORY$
 *     Harbour Bindings for Qt
 *  $SUBCATEGORY$
 *     GUI
 *  $EXTERNALLINK$
 *     http://doc.trolltech.com/4.5/qbytearray.html
 *  $ONELINER$
 *     Creates a new QByteArray object.
 *  $INHERITS$
 *     
 *  $SYNTAX$
 *     QByteArray( ... )
 * 
 *  $ARGUMENTS$
 * 
 *  $RETURNS$
 *     An instance of the object of type QByteArray
 *  $METHODS$
 *     :append( oQByteArray )                              -> oQByteArray
 *     :append_1( cStr )                                   -> oQByteArray
 *     :append_2( cStr )                                   -> oQByteArray
 *     :append_3( cStr, nLen )                             -> oQByteArray
 *     :append_4( nCh )                                    -> oQByteArray
 *     :at( nI )                                           -> cChar
 *     :capacity()                                         -> nInt
 *     :chop( nN )                                         -> NIL
 *     :clear()                                            -> NIL
 *     :constData()                                        -> cChar
 *     :count( oQByteArray )                               -> nInt
 *     :count_1( cStr )                                    -> nInt
 *     :count_2( nCh )                                     -> nInt
 *     :count_3()                                          -> nInt
 *     :data()                                             -> cChar
 *     :data_1()                                           -> cChar
 *     :endsWith( oQByteArray )                            -> lBool
 *     :endsWith_1( cStr )                                 -> lBool
 *     :endsWith_2( nCh )                                  -> lBool
 *     :fill( nCh, nSize )                                 -> oQByteArray
 *     :indexOf( oQByteArray, nFrom )                      -> nInt
 *     :indexOf_1( cStr, nFrom )                           -> nInt
 *     :indexOf_2( cStr, nFrom )                           -> nInt
 *     :indexOf_3( nCh, nFrom )                            -> nInt
 *     :insert( nI, oQByteArray )                          -> oQByteArray
 *     :insert_1( nI, cStr )                               -> oQByteArray
 *     :insert_2( nI, cStr )                               -> oQByteArray
 *     :insert_3( nI, nCh )                                -> oQByteArray
 *     :isEmpty()                                          -> lBool
 *     :isNull()                                           -> lBool
 *     :lastIndexOf( oQByteArray, nFrom )                  -> nInt
 *     :lastIndexOf_1( cStr, nFrom )                       -> nInt
 *     :lastIndexOf_2( cStr, nFrom )                       -> nInt
 *     :lastIndexOf_3( nCh, nFrom )                        -> nInt
 *     :left( nLen )                                       -> oQByteArray
 *     :leftJustified( nWidth, nFill, lTruncate )          -> oQByteArray
 *     :length()                                           -> nInt
 *     :mid( nPos, nLen )                                  -> oQByteArray
 *     :prepend( oQByteArray )                             -> oQByteArray
 *     :prepend_1( cStr )                                  -> oQByteArray
 *     :prepend_2( nCh )                                   -> oQByteArray
 *     :push_back( oQByteArray )                           -> NIL
 *     :push_back_1( cStr )                                -> NIL
 *     :push_back_2( nCh )                                 -> NIL
 *     :push_front( oQByteArray )                          -> NIL
 *     :push_front_1( cStr )                               -> NIL
 *     :push_front_2( nCh )                                -> NIL
 *     :remove( nPos, nLen )                               -> oQByteArray
 *     :repeated( nTimes )                                 -> oQByteArray
 *     :replace( nPos, nLen, oQByteArray )                 -> oQByteArray
 *     :replace_1( nPos, nLen, cAfter )                    -> oQByteArray
 *     :replace_2( oQByteArray, oQByteArray )              -> oQByteArray
 *     :replace_3( cBefore, oQByteArray )                  -> oQByteArray
 *     :replace_4( cBefore, nBsize, cAfter, nAsize )       -> oQByteArray
 *     :replace_5( oQByteArray, cAfter )                   -> oQByteArray
 *     :replace_6( cBefore, oQByteArray )                  -> oQByteArray
 *     :replace_7( cBefore, cAfter )                       -> oQByteArray
 *     :replace_8( cBefore, cAfter )                       -> oQByteArray
 *     :replace_9( nBefore, oQByteArray )                  -> oQByteArray
 *     :replace_10( nBefore, cAfter )                      -> oQByteArray
 *     :replace_11( nBefore, cAfter )                      -> oQByteArray
 *     :replace_12( nBefore, nAfter )                      -> oQByteArray
 *     :reserve( nSize )                                   -> NIL
 *     :resize( nSize )                                    -> NIL
 *     :right( nLen )                                      -> oQByteArray
 *     :rightJustified( nWidth, nFill, lTruncate )         -> oQByteArray
 *     :setNum( nN, nBase )                                -> oQByteArray
 *     :setNum_1( nN, nBase )                              -> oQByteArray
 *     :setNum_2( nN, nBase )                              -> oQByteArray
 *     :setNum_3( nN, nBase )                              -> oQByteArray
 *     :setNum_4( nN, nBase )                              -> oQByteArray
 *     :setNum_5( nN, nBase )                              -> oQByteArray
 *     :setNum_6( nN, nF, nPrec )                          -> oQByteArray
 *     :setNum_7( nN, nF, nPrec )                          -> oQByteArray
 *     :simplified()                                       -> oQByteArray
 *     :size()                                             -> nInt
 *     :split( nSep )                                      -> oQList_QByteArray>
 *     :squeeze()                                          -> NIL
 *     :startsWith( oQByteArray )                          -> lBool
 *     :startsWith_1( cStr )                               -> lBool
 *     :startsWith_2( nCh )                                -> lBool
 *     :toBase64()                                         -> oQByteArray
 *     :toDouble( @lOk )                                   -> nDouble
 *     :toFloat( @lOk )                                    -> nFloat
 *     :toHex()                                            -> oQByteArray
 *     :toInt( @lOk, nBase )                               -> nInt
 *     :toLong( @lOk, nBase )                              -> nLong
 *     :toLongLong( @lOk, nBase )                          -> nQlonglong
 *     :toLower()                                          -> oQByteArray
 *     :toPercentEncoding( oQByteArray, oQByteArray, nPercent )  -> oQByteArray
 *     :toShort( @lOk, nBase )                             -> nShort
 *     :toUInt( @lOk, nBase )                              -> nUint
 *     :toULong( @lOk, nBase )                             -> nUlong
 *     :toULongLong( @lOk, nBase )                         -> nQulonglong
 *     :toUShort( @lOk, nBase )                            -> nUshort
 *     :toUpper()                                          -> oQByteArray
 *     :trimmed()                                          -> oQByteArray
 *     :truncate( nPos )                                   -> NIL
 * 
 *  $DESCRIPTION$
 * 
 *  $EXAMPLES$
 * 
 *  $TESTS$
 * 
 *  $STATUS$
 *     R
 *  $COMPLIANCE$
 *     Not Clipper compatible
 *  $PLATFORMS$
 *     Windows, Linux, Mac OS X, OS/2
 *  $VERSION$
 *     4.5 or upper
 *  $FILES$
 *     Harbour source: contrib/hbqt/qtcore/TQByteArray.prg
 *     C++ wrappers  : contrib/hbqt/qtcore/QByteArray.cpp
 *     Library       : hbqtcore
 *  $END$
 */
