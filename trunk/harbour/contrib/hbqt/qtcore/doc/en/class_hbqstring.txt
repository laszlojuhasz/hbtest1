/*
 * $Id$
 */

/*  $DOC$
 *  $TEMPLATE$
 *     Class
 *  $NAME$
 *     HBQString()
 *  $CATEGORY$
 *     Harbour Bindings for Qt
 *  $SUBCATEGORY$
 *     GUI
 *  $EXTERNALLINK$
 *     http://doc.trolltech.com/4.5/hbqstring.html
 *  $ONELINER$
 *     Creates a new HBQString object.
 *  $INHERITS$
 *     
 *  $SYNTAX$
 *     HBQString( ... )
 *     HBQString():from( pPtr_OR_oObj_of_type_HBQString )
 * 
 *  $ARGUMENTS$
 * 
 *  $RETURNS$
 *     An instance of the object of type HBQString
 *  $METHODS$
 *     :append( cStr )                                     -> cQString
 *     :append_1( oQStringRef )                            -> cQString
 *     :append_2( oQLatin1String )                         -> cQString
 *     :append_3( oQByteArray )                            -> cQString
 *     :append_4( cStr )                                   -> cQString
 *     :append_5( oQChar )                                 -> cQString
 *     :arg( cA, nFieldWidth, oQChar )                     -> cQString
 *     :arg_1( cA1, cA2 )                                  -> cQString
 *     :arg_2( cA1, cA2, cA3 )                             -> cQString
 *     :arg_3( cA1, cA2, cA3, cA4 )                        -> cQString
 *     :arg_4( cA1, cA2, cA3, cA4, cA5 )                   -> cQString
 *     :arg_5( cA1, cA2, cA3, cA4, cA5, cA6 )              -> cQString
 *     :arg_6( cA1, cA2, cA3, cA4, cA5, cA6, cA7 )         -> cQString
 *     :arg_7( cA1, cA2, cA3, cA4, cA5, cA6, cA7, cA8 )    -> cQString
 *     :arg_8( cA1, cA2, cA3, cA4, cA5, cA6, cA7, cA8, cA9 )  -> cQString
 *     :arg_9( nA, nFieldWidth, nBase, oQChar )            -> cQString
 *     :arg_10( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_11( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_12( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_13( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_14( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_15( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_16( nA, nFieldWidth, nBase, oQChar )           -> cQString
 *     :arg_17( oQChar, nFieldWidth, oQChar )              -> cQString
 *     :arg_18( nA, nFieldWidth, oQChar )                  -> cQString
 *     :arg_19( nA, nFieldWidth, nFormat, nPrecision, oQChar )  -> cQString
 *     :at( nPosition )                                    -> oQChar
 *     :capacity()                                         -> nInt
 *     :chop( nN )                                         -> NIL
 *     :clear()                                            -> NIL
 *     :compare( cOther )                                  -> nInt
 *     :compare_1( cOther, nCs )                           -> nInt
 *     :compare_2( oQLatin1String, nCs )                   -> nInt
 *     :compare_3( oQStringRef, nCs )                      -> nInt
 *     :constData()                                        -> oQChar
 *     :count( cStr, nCs )                                 -> nInt
 *     :count_1( oQChar, nCs )                             -> nInt
 *     :count_2( oQRegExp )                                -> nInt
 *     :count_3()                                          -> nInt
 *     :data()                                             -> oQChar
 *     :data_1()                                           -> oQChar
 *     :endsWith( cS, nCs )                                -> lBool
 *     :endsWith_1( oQLatin1String, nCs )                  -> lBool
 *     :endsWith_2( oQChar, nCs )                          -> lBool
 *     :fill( oQChar, nSize )                              -> cQString
 *     :indexOf( cStr, nFrom, nCs )                        -> nInt
 *     :indexOf_1( oQLatin1String, nFrom, nCs )            -> nInt
 *     :indexOf_2( oQChar, nFrom, nCs )                    -> nInt
 *     :indexOf_3( oQRegExp, nFrom )                       -> nInt
 *     :indexOf_4( oQRegExp, nFrom )                       -> nInt
 *     :insert( nPosition, cStr )                          -> cQString
 *     :insert_1( nPosition, oQLatin1String )              -> cQString
 *     :insert_2( nPosition, oQChar, nSize )               -> cQString
 *     :insert_3( nPosition, oQChar )                      -> cQString
 *     :isEmpty()                                          -> lBool
 *     :isNull()                                           -> lBool
 *     :lastIndexOf( cStr, nFrom, nCs )                    -> nInt
 *     :lastIndexOf_1( oQLatin1String, nFrom, nCs )        -> nInt
 *     :lastIndexOf_2( oQChar, nFrom, nCs )                -> nInt
 *     :lastIndexOf_3( oQRegExp, nFrom )                   -> nInt
 *     :lastIndexOf_4( oQRegExp, nFrom )                   -> nInt
 *     :left( nN )                                         -> cQString
 *     :leftJustified( nWidth, oQChar, lTruncate )         -> cQString
 *     :leftRef( nN )                                      -> oQStringRef
 *     :length()                                           -> nInt
 *     :localeAwareCompare( oQStringRef )                  -> nInt
 *     :localeAwareCompare_1( cOther )                     -> nInt
 *     :mid( nPosition, nN )                               -> cQString
 *     :midRef( nPosition, nN )                            -> oQStringRef
 *     :normalized( nMode )                                -> cQString
 *     :normalized_1( nMode, nVersion )                    -> cQString
 *     :prepend( cStr )                                    -> cQString
 *     :prepend_1( oQLatin1String )                        -> cQString
 *     :prepend_2( oQByteArray )                           -> cQString
 *     :prepend_3( cStr )                                  -> cQString
 *     :prepend_4( oQChar )                                -> cQString
 *     :push_back( cOther )                                -> NIL
 *     :push_back_1( oQChar )                              -> NIL
 *     :push_front( cOther )                               -> NIL
 *     :push_front_1( oQChar )                             -> NIL
 *     :remove( nPosition, nN )                            -> cQString
 *     :remove_1( oQChar, nCs )                            -> cQString
 *     :remove_2( cStr, nCs )                              -> cQString
 *     :remove_3( oQRegExp )                               -> cQString
 *     :repeated( nTimes )                                 -> cQString
 *     :replace( nPosition, nN, cAfter )                   -> cQString
 *     :replace_1( nPosition, nN, oQChar, nSize )          -> cQString
 *     :replace_2( nPosition, nN, oQChar )                 -> cQString
 *     :replace_3( cBefore, cAfter, nCs )                  -> cQString
 *     :replace_4( oQChar, nBlen, oQChar, nAlen, nCs )     -> cQString
 *     :replace_5( oQChar, cAfter, nCs )                   -> cQString
 *     :replace_6( oQChar, oQChar, nCs )                   -> cQString
 *     :replace_7( oQLatin1String, oQLatin1String, nCs )   -> cQString
 *     :replace_8( oQLatin1String, cAfter, nCs )           -> cQString
 *     :replace_9( cBefore, oQLatin1String, nCs )          -> cQString
 *     :replace_10( oQChar, oQLatin1String, nCs )          -> cQString
 *     :replace_11( oQRegExp, cAfter )                     -> cQString
 *     :reserve( nSize )                                   -> NIL
 *     :resize( nSize )                                    -> NIL
 *     :right( nN )                                        -> cQString
 *     :rightJustified( nWidth, oQChar, lTruncate )        -> cQString
 *     :rightRef( nN )                                     -> oQStringRef
 *     :section( oQChar, nStart, nEnd, nFlags )            -> cQString
 *     :section_1( cSep, nStart, nEnd, nFlags )            -> cQString
 *     :section_2( oQRegExp, nStart, nEnd, nFlags )        -> cQString
 *     :setNum( nN, nBase )                                -> cQString
 *     :setNum_1( nN, nBase )                              -> cQString
 *     :setNum_2( nN, nBase )                              -> cQString
 *     :setNum_3( nN, nBase )                              -> cQString
 *     :setNum_4( nN, nBase )                              -> cQString
 *     :setNum_5( nN, nBase )                              -> cQString
 *     :setNum_6( nN, nBase )                              -> cQString
 *     :setNum_7( nN, nBase )                              -> cQString
 *     :setNum_8( nN, nFormat, nPrecision )                -> cQString
 *     :setNum_9( nN, nFormat, nPrecision )                -> cQString
 *     :setUnicode( oQChar, nSize )                        -> cQString
 *     :setUtf16( @nUnicode, nSize )                       -> cQString
 *     :simplified()                                       -> cQString
 *     :size()                                             -> nInt
 *     :split( cSep, nBehavior, nCs )                      -> oQStringList
 *     :split_1( oQChar, nBehavior, nCs )                  -> oQStringList
 *     :split_2( oQRegExp, nBehavior )                     -> oQStringList
 *     :squeeze()                                          -> NIL
 *     :startsWith( cS, nCs )                              -> lBool
 *     :startsWith_1( oQLatin1String, nCs )                -> lBool
 *     :startsWith_2( oQChar, nCs )                        -> lBool
 *     :toAscii()                                          -> oQByteArray
 *     :toCaseFolded()                                     -> cQString
 *     :toDouble( @lOk )                                   -> nDouble
 *     :toFloat( @lOk )                                    -> nFloat
 *     :toInt( @lOk, nBase )                               -> nInt
 *     :toLatin1()                                         -> oQByteArray
 *     :toLocal8Bit()                                      -> oQByteArray
 *     :toLong( @lOk, nBase )                              -> nLong
 *     :toLongLong( @lOk, nBase )                          -> nQlonglong
 *     :toLower()                                          -> cQString
 *     :toShort( @lOk, nBase )                             -> nShort
 *     :toUInt( @lOk, nBase )                              -> nUint
 *     :toULong( @lOk, nBase )                             -> nUlong
 *     :toULongLong( @lOk, nBase )                         -> nQulonglong
 *     :toUShort( @lOk, nBase )                            -> nUshort
 *     :toUpper()                                          -> cQString
 *     :toUtf8()                                           -> oQByteArray
 *     :trimmed()                                          -> cQString
 *     :truncate( nPosition )                              -> NIL
 *     :unicode()                                          -> oQChar
 *     :compare_4( cS1, cS2, nCs )                         -> nInt
 *     :compare_5( cS1, cS2 )                              -> nInt
 *     :compare_6( cS1, oQLatin1String, nCs )              -> nInt
 *     :compare_7( oQLatin1String, cS2, nCs )              -> nInt
 *     :compare_8( cS1, oQStringRef, nCs )                 -> nInt
 *     :fromAscii( cStr, nSize )                           -> cQString
 *     :fromLatin1( cStr, nSize )                          -> cQString
 *     :fromLocal8Bit( cStr, nSize )                       -> cQString
 *     :fromRawData( oQChar, nSize )                       -> cQString
 *     :fromUcs4( @nUnicode, nSize )                       -> cQString
 *     :fromUtf8( cStr, nSize )                            -> cQString
 *     :fromUtf16( @nUnicode, nSize )                      -> cQString
 *     :localeAwareCompare_2( cS1, cS2 )                   -> nInt
 *     :localeAwareCompare_3( cS1, oQStringRef )           -> nInt
 *     :number( nN, nBase )                                -> cQString
 *     :number_1( nN, nFormat, nPrecision )                -> cQString
 *     :number_2( nN, nBase )                              -> cQString
 *     :number_3( nN, nBase )                              -> cQString
 *     :number_4( nN, nBase )                              -> cQString
 *     :number_5( nN, nBase )                              -> cQString
 *     :number_6( nN, nBase )                              -> cQString
 * 
 *  $DESCRIPTION$
 * 
 *  $EXAMPLES$
 * 
 *  $TESTS$
 * 
 *  $STATUS$
 *     R
 *  $COMPLIANCE$
 *     Not Clipper compatible
 *  $PLATFORMS$
 *     Windows, Linux, Mac OS X, OS/2
 *  $VERSION$
 *     4.5 or upper
 *  $FILES$
 *     Harbour source: contrib/hbqt/qtcore/THBQString.prg
 *     C++ wrappers  : contrib/hbqt/qtcore/HBQString.cpp
 *     Library       : hbqtcore
 *  $END$
 */
