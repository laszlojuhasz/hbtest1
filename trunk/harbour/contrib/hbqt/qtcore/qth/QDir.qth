/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

; Header File to Generate Sources
;

<CLASS>
QObject  = no
New      = pParent
</CLASS>

<CODE>
#include <QtCore/QDir>


/*
 * QDir ( const QDir & dir )
 * QDir ( const QString & path = QString() )
 * QDir ( const QString & path, const QString & nameFilter, SortFlags sort = SortFlags( Name | IgnoreCase ), Filters filters = AllEntries )
 * ~QDir ()
 */
HB_FUNC( QT_QDIR )
{
   __HB_RETPTRGC__( new QDir( hbqt_par_QString( 1 ) ) );
}
</CODE>


<ENUMS>
enum Filter { Dirs, AllDirs, Files, Drives, ..., CaseSensitive }
enum SortFlag { Name, Time, Size, Type, ..., LocaleAware }
flags Filters
flags SortFlags
</ENUMS>

<PROTOS>
QString absoluteFilePath ( const QString & fileName ) const
QString absolutePath () const
QString canonicalPath () const
bool cd ( const QString & dirName )
bool cdUp ()
uint count () const
QString dirName () const
// QFileInfoList entryInfoList ( const QStringList & nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort ) const
// QFileInfoList entryInfoList ( Filters filters = NoFilter, SortFlags sort = NoSort ) const
QStringList entryList ( const QStringList & nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort ) const
QStringList entryList ( Filters filters = NoFilter, SortFlags sort = NoSort ) const
bool exists ( const QString & name ) const
bool exists () const
QString filePath ( const QString & fileName ) const
Filters filter () const
bool isAbsolute () const
bool isReadable () const
bool isRelative () const
bool isRoot () const
bool makeAbsolute ()
bool mkdir ( const QString & dirName ) const
bool mkpath ( const QString & dirPath ) const
QStringList nameFilters () const
QString path () const
void refresh () const
QString relativeFilePath ( const QString & fileName ) const
bool remove ( const QString & fileName )
bool rename ( const QString & oldName, const QString & newName )
bool rmdir ( const QString & dirName ) const
bool rmpath ( const QString & dirPath ) const
void setFilter ( Filters filters )
void setNameFilters ( const QStringList & nameFilters )
void setPath ( const QString & path )
void setSorting ( SortFlags sort )
SortFlags sorting () const


void addSearchPath ( const QString & prefix, const QString & path )
QString cleanPath ( const QString & path )
QDir current ()
QString currentPath ()
// QFileInfoList drives ()
QString fromNativeSeparators ( const QString & pathName )
QDir home ()
QString homePath ()
bool isAbsolutePath ( const QString & path )
bool isRelativePath ( const QString & path )
bool match ( const QString & filter, const QString & fileName )
bool match ( const QStringList & filters, const QString & fileName )
QDir root ()
QString rootPath ()
QStringList searchPaths ( const QString & prefix )
QChar separator ()
bool setCurrent ( const QString & path )
void setSearchPaths ( const QString & prefix, const QStringList & searchPaths )
QDir temp ()
QString tempPath ()
QString toNativeSeparators ( const QString & pathName )
</PROTOS>



