/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherits = QObject
Type     = Core
New      =
Constructor = No
</CLASS>


<CODE>
#include "hbapi.h"
#include "hbvm.h"
#include "hbinit.h"

#include <QtCore/QStringList>
#include <QtCore/QCoreApplication>
#include <QtCore/QTextCodec>

HB_FUNC( HB_QTCORE ) {;}

static void hbqtcore_Exit( void * cargo )
{
   HB_SYMBOL_UNUSED( cargo );
}

static void hbqtcore_Init( void * cargo )
{
   HB_SYMBOL_UNUSED( cargo );

   QTextCodec * codec = QTextCodec::codecForName( "UTF8" );
   QTextCodec::setCodecForTr( codec );
   QTextCodec::setCodecForCStrings( codec );
}

HB_CALL_ON_STARTUP_BEGIN( _hb_hbqtcore_init_ )
   hb_vmAtInit( hbqtcore_Init, NULL );
   hb_vmAtExit( hbqtcore_Exit, NULL );
HB_CALL_ON_STARTUP_END( _hb_hbqtcore_init_ )

#if defined( HB_PRAGMA_STARTUP )
   #pragma startup _hb_hbqtcore_init_
#elif defined( HB_DATASEG_STARTUP )
   #define HB_DATASEG_BODY    HB_DATASEG_FUNC( _hb_hbqtcore_init_ )
   #include "hbiniseg.h"
#endif

/*
 * QCoreApplication ( int & argc, char ** argv )
 * ~QCoreApplication ()
 */
HB_FUNC( QT_QCOREAPPLICATION )
{

}
</CODE>

<ENUMS>
enum Encoding { CodecForTr, UnicodeUTF8, DefaultCodec }
</ENUMS>

<PROTOS>
// bool filterEvent ( void * message, long * result )
virtual bool notify ( QObject * receiver, QEvent * event )
// EventFilter setEventFilter ( EventFilter filter )
// virtual bool winEventFilter ( MSG * msg, long * result )

void addLibraryPath ( const QString & path )
QString applicationDirPath ()
QString applicationFilePath ()
QString applicationName ()
qint64 applicationPid ()
QString applicationVersion ()
QStringList arguments ()
bool closingDown ()
int exec ()
void exit ( int returnCode = 0 )
void flush ()
bool hasPendingEvents ()
void installTranslator ( QTranslator * translationFile )
QCoreApplication * instance ()
QStringList libraryPaths ()
QString organizationDomain ()
QString organizationName ()
void postEvent ( QObject * receiver, QEvent * event )
void postEvent ( QObject * receiver, QEvent * event, int priority )
void processEvents ( QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents )
void processEvents ( QEventLoop::ProcessEventsFlags flags, int maxtime )
void removeLibraryPath ( const QString & path )
void removePostedEvents ( QObject * receiver )
void removePostedEvents ( QObject * receiver, int eventType )
void removeTranslator ( QTranslator * translationFile )
bool sendEvent ( QObject * receiver, QEvent * event )
void sendPostedEvents ( QObject * receiver, int event_type )
void sendPostedEvents ()
void setApplicationName ( const QString & application )
void setApplicationVersion ( const QString & version )
void setAttribute ( Qt::ApplicationAttribute attribute, bool on = true )
void setLibraryPaths ( const QStringList & paths )
void setOrganizationDomain ( const QString & orgDomain )
void setOrganizationName ( const QString & orgName )
bool startingUp ()
bool testAttribute ( Qt::ApplicationAttribute attribute )
QString translate ( const char * context, const char * sourceText, const char * disambiguation, Encoding encoding, int n )
QString translate ( const char * context, const char * sourceText, const char * disambiguation = 0, Encoding encoding = CodecForTr )
</PROTOS>

<SLOTS>
void quit ()
</SLOTS>

<SIGNALS>
void aboutToQuit ()
</SIGNALS>
