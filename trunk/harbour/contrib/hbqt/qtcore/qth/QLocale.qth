/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject    = no
Inherits   = 
Type       = Core
New        =
Destructor = 
</CLASS>

<CODE>
#include <QtCore/QLocale>
#include <QtCore/QDate>

/* QLocale ()
 * QLocale ( const QString & name )
 * QLocale ( QLocale::Language language, QLocale::Country country = AnyCountry )
 * QLocale ( const QLocale & other )
 */
HB_FUNC( QT_QLOCALE )
{
   __HB_RETPTRGC__( new QLocale() );
}
</CODE>

<ENUMS>
enum Country { AnyCountry, Afghanistan, Albania, Algeria, ..., Zimbabwe }
enum FormatType { LongFormat, ShortFormat, NarrowFormat }
enum Language { C, Abkhazian, Afan, Afar, ..., Chewa }
enum MeasurementSystem { MetricSystem, ImperialSystem }
enum NumberOption { OmitGroupSeparator, RejectGroupSeparator }
flags NumberOptions
</ENUMS>

<PROTOS>
QString amText () const
Country country () const
QString dateFormat ( FormatType format = LongFormat ) const
QString dateTimeFormat ( FormatType format = LongFormat ) const
QString dayName ( int day, FormatType type = LongFormat ) const
QChar decimalPoint () const
QChar exponential () const
QChar groupSeparator () const
Language language () const
MeasurementSystem measurementSystem () const
QString monthName ( int month, FormatType type = LongFormat ) const
QString name () const
QChar negativeSign () const
NumberOptions numberOptions () const
QChar percent () const
QString pmText () const
QChar positiveSign () const
void setNumberOptions ( NumberOptions options )
QString standaloneDayName ( int day, FormatType type = LongFormat ) const
QString standaloneMonthName ( int month, FormatType type = LongFormat ) const
QString timeFormat ( FormatType format = LongFormat ) const
QDate toDate ( const QString & string, FormatType format = LongFormat ) const
QDate toDate ( const QString & string, const QString & format ) const
QDateTime toDateTime ( const QString & string, FormatType format = LongFormat ) const
QDateTime toDateTime ( const QString & string, const QString & format ) const
double toDouble ( const QString & s, bool * ok = 0 ) const
float toFloat ( const QString & s, bool * ok = 0 ) const
int toInt ( const QString & s, bool * ok = 0, int base = 0 ) const
qlonglong toLongLong ( const QString & s, bool * ok = 0, int base = 0 ) const
short toShort ( const QString & s, bool * ok = 0, int base = 0 ) const
QString toString ( qlonglong i ) const
QString toString ( const QDate & date, const QString & format ) const
QString toString ( const QDate & date, FormatType format = LongFormat ) const
QString toString ( const QTime & time, const QString & format ) const
QString toString ( const QTime & time, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, const QString & format ) const
QString toString ( qulonglong i ) const
QString toString ( double i, char f = 'g', int prec = 6 ) const
QString toString ( short i ) const
QString toString ( ushort i ) const
QString toString ( int i ) const
QString toString ( uint i ) const
QString toString ( float i, char f = 'g', int prec = 6 ) const
QTime toTime ( const QString & string, FormatType format = LongFormat ) const
QTime toTime ( const QString & string, const QString & format ) const
uint toUInt ( const QString & s, bool * ok = 0, int base = 0 ) const
qlonglong toULongLong ( const QString & s, bool * ok = 0, int base = 0 ) const
ushort toUShort ( const QString & s, bool * ok = 0, int base = 0 ) const
QChar zeroDigit () const

QLocale c ()
//QList<Country> countriesForLanguage ( Language language )
QString countryToString ( Country country )
QString languageToString ( Language language )
void setDefault ( const QLocale & locale )
QLocale system ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




