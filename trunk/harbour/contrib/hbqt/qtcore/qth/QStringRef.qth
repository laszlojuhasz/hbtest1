/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherit  = 
Type     = 
New      = 
</CLASS>

<CODE>
#include <QtCore/QStringRef>


/*
 * QStringRef ()
 * QStringRef ( const QString * string )
 * QStringRef ( const QStringRef & other )
 * QStringRef ( const QString * string, int position, int length )
 * ~QStringRef ()
 */
HB_FUNC( QT_QSTRINGREF )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QStringRef( ( const QString *) hb_parcx( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISPOINTER( 1 ) )
   {
      __HB_RETPTRGC__( new QStringRef( * hbqt_par_QStringRef( 1 ) ) );
   }
   else if( hb_pcount() == 3  && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QStringRef( ( const QString *) hb_parcx( 1 ), hb_parni( 2 ), hb_parni( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QStringRef() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
//QStringRef appendTo ( QString * string ) const
const QChar at ( int position ) const
void clear ()
int compare ( const QString & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
int compare ( const QStringRef & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
//int compare ( QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
const QChar * constData () const
int count () const
const QChar * data () const
bool isEmpty () const
bool isNull () const
int length () const
int localeAwareCompare ( const QString & other ) const
int localeAwareCompare ( const QStringRef & other ) const
int position () const
int size () const
//const QString * string () const
//QString toString () const
const QChar * unicode () const

int compare ( const QStringRef & s1, const QString & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int compare ( const QStringRef & s1, const QStringRef & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
//int compare ( const QStringRef & s1, QLatin1String s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int localeAwareCompare ( const QStringRef & s1, const QString & s2 )
int localeAwareCompare ( const QStringRef & s1, const QStringRef & s2 )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



