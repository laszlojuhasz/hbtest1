/*
 * $Id$
 */

/*  $DOC$
 *  $NAME$
 *     QMessageBox()
 *  $FILES$
 *     Harbour source: contrib/hbqt/qtgui/TQMessageBox.prg
 *     C++ wrappers  : contrib/hbqt/qtgui/QMessageBox.cpp
 *     Library       : hbqtgui
 *  $TESTS$
 * 
 *  $STATUS$
 *     R
 *  $SYNTAX$
 *     QMessageBox():new( ... )
 *     QMessageBox():from( pPtr_OR_oObj_of_type_QMessageBox )
 *     QMessageBox():configure( pPtr_OR_oObj_of_type_QMessageBox )
 *  $METHODS$
 *     :addButton( pButton, nRole )                        -> NIL
 *     :addButton_1( cText, nRole )                        -> pQPushButton
 *     :addButton_2( nButton )                             -> pQPushButton
 *     :button( nWhich )                                   -> pQAbstractButton
 *     :buttonRole( pButton )                              -> nButtonRole
 *     :buttons()                                          -> pQList<QAbstractButton *>
 *     :clickedButton()                                    -> pQAbstractButton
 *     :defaultButton()                                    -> pQPushButton
 *     :detailedText()                                     -> cQString
 *     :escapeButton()                                     -> pQAbstractButton
 *     :icon()                                             -> nIcon
 *     :iconPixmap()                                       -> pQPixmap
 *     :informativeText()                                  -> cQString
 *     :open( pReceiver, pMember )                         -> NIL
 *     :removeButton( pButton )                            -> NIL
 *     :setDefaultButton( pButton )                        -> NIL
 *     :setDefaultButton_1( nButton )                      -> NIL
 *     :setDetailedText( cText )                           -> NIL
 *     :setEscapeButton( pButton )                         -> NIL
 *     :setEscapeButton_1( nButton )                       -> NIL
 *     :setIcon( nIcon )                                   -> NIL
 *     :setIconPixmap( pPixmap )                           -> NIL
 *     :setInformativeText( cText )                        -> NIL
 *     :setStandardButtons( nButtons )                     -> NIL
 *     :setText( cText )                                   -> NIL
 *     :setTextFormat( nFormat )                           -> NIL
 *     :setWindowModality( nWindowModality )               -> NIL
 *     :setWindowTitle( cTitle )                           -> NIL
 *     :standardButton( pButton )                          -> nStandardButton
 *     :standardButtons()                                  -> nStandardButtons
 *     :text()                                             -> cQString
 *     :textFormat()                                       -> nQt::TextFormat
 *     :about( pParent, cTitle, cText )                    -> NIL
 *     :aboutQt( pParent, cTitle )                         -> NIL
 *     :critical( pParent, cTitle, cText, nButtons, nDefaultButton )  -> nStandardButton
 *     :information( pParent, cTitle, cText, nButtons, nDefaultButton )  -> nStandardButton
 *     :question( pParent, cTitle, cText, nButtons, nDefaultButton )  -> nStandardButton
 *     :warning( pParent, cTitle, cText, nButtons, nDefaultButton )  -> nStandardButton
 *     :exec()                                             -> nInt
 * 
 *  $RETURNS$
 *     An instance of the object of type QMessageBox
 *  $SEEALSO$
 *     QDialog
 *  $VERSION$
 *     4.5 or upper
 *  $CATEGORY$
 *     Harbour Bindings for Qt
 *  $EXAMPLES$
 * 
 *  $INHERITS$
 *     QDialog
 *  $ONELINER$
 *     Creates a new QMessageBox object.
 *  $TEMPLATE$
 *     Class
 *  $ARGUMENTS$
 * 
 *  $PLATFORMS$
 *     Windows, Linux, Mac OS X, OS/2
 *  $COMPLIANCE$
 *     Not Clipper compatible
 *  $DESCRIPTION$
 * 
 *  $SUBCATEGORY$
 *     GUI
 *  $EXTERNALLINK$
 *     http://doc.trolltech.com/4.5/qmessagebox.html
 *  $END$
 */
