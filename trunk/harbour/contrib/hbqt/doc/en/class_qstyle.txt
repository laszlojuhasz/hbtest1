/*
 * $Id$
 */

/*  $DOC$
 *  $NAME$
 *     QStyle()
 *  $FILES$
 *     Harbour source: contrib/hbqt/qtgui/TQStyle.prg
 *     C++ wrappers  : contrib/hbqt/qtgui/QStyle.cpp
 *     Library       : hbqtgui
 *  $TESTS$
 * 
 *  $STATUS$
 *     R
 *  $SYNTAX$
 *     QStyle():new( ... )
 *     QStyle():from( pPtr_OR_oObj_of_type_QStyle )
 *     QStyle():configure( pPtr_OR_oObj_of_type_QStyle )
 *  $METHODS$
 *     :combinedLayoutSpacing( nControls1, nControls2, nOrientation, pOption, pWidget )  -> nInt
 *     :drawComplexControl( nControl, pOption, pPainter, pWidget )  -> NIL
 *     :drawControl( nElement, pOption, pPainter, pWidget )  -> NIL
 *     :drawItemPixmap( pPainter, pRectangle, nAlignment, pPixmap )  -> NIL
 *     :drawItemText( pPainter, pRectangle, nAlignment, pPalette, lEnabled, cText, nTextRole )  -> NIL
 *     :drawPrimitive( nElement, pOption, pPainter, pWidget )  -> NIL
 *     :generatedIconPixmap( nIconMode, pPixmap, pOption )  -> pQPixmap
 *     :hitTestComplexControl( nControl, pOption, pPosition, pWidget )  -> nSubControl
 *     :itemPixmapRect( pRectangle, nAlignment, pPixmap )  -> pQRect
 *     :itemTextRect( pMetrics, pRectangle, nAlignment, lEnabled, cText )  -> pQRect
 *     :layoutSpacing( nControl1, nControl2, nOrientation, pOption, pWidget )  -> nInt
 *     :pixelMetric( nMetric, pOption, pWidget )           -> nInt
 *     :polish( pWidget )                                  -> NIL
 *     :polish_1( pApplication )                           -> NIL
 *     :polish_2( pPalette )                               -> NIL
 *     :sizeFromContents( nType, pOption, pContentsSize, pWidget )  -> pQSize
 *     :standardIcon( nStandardIcon, pOption, pWidget )    -> pQIcon
 *     :standardPalette()                                  -> pQPalette
 *     :styleHint( nHint, pOption, pWidget, pReturnData )  -> nInt
 *     :subControlRect( nControl, pOption, nSubControl, pWidget )  -> pQRect
 *     :subElementRect( nElement, pOption, pWidget )       -> pQRect
 *     :unpolish( pWidget )                                -> NIL
 *     :unpolish_1( pApplication )                         -> NIL
 *     :alignedRect( nDirection, nAlignment, pSize, pRectangle )  -> pQRect
 *     :sliderPositionFromValue( nMin, nMax, nLogicalValue, nSpan, lUpsideDown )  -> nInt
 *     :sliderValueFromPosition( nMin, nMax, nPosition, nSpan, lUpsideDown )  -> nInt
 *     :visualAlignment( nDirection, nAlignment )          -> nQt::Alignment
 *     :visualPos( nDirection, pBoundingRectangle, pLogicalPosition )  -> pQPoint
 *     :visualRect( nDirection, pBoundingRectangle, pLogicalRectangle )  -> pQRect
 * 
 *  $RETURNS$
 *     An instance of the object of type QStyle
 *  $SEEALSO$
 *     QObject
 *  $VERSION$
 *     4.5 or upper
 *  $CATEGORY$
 *     Harbour Bindings for Qt
 *  $EXAMPLES$
 * 
 *  $INHERITS$
 *     QObject
 *  $ONELINER$
 *     Creates a new QStyle object.
 *  $TEMPLATE$
 *     Class
 *  $ARGUMENTS$
 * 
 *  $PLATFORMS$
 *     Windows, Linux, Mac OS X, OS/2
 *  $COMPLIANCE$
 *     Not Clipper compatible
 *  $DESCRIPTION$
 * 
 *  $SUBCATEGORY$
 *     GUI
 *  $EXTERNALLINK$
 *     http://doc.trolltech.com/4.5/qstyle.html
 *  $END$
 */
