/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QObject
New      = pParent
folder   = qtwebkit
</CLASS>

<CODE>
#include <QtWebKit/QWebPage>
#include <QtCore/QVariant>
#include "../hbqt_local.h"


/*
 * QWebPage ( QObject * parent = 0 )
 * ~QWebPage ()
 */
HB_FUNC( QT_QWEBPAGE )
{
   hb_retptr( new QWebPage( hbqt_par_QWidget( 2 ) ) );
}
</CODE>

<ENUMS>
enum Extension { ChooseMultipleFilesExtension }
enum FindFlag { FindBackward, FindCaseSensitively, FindWrapsAroundDocument }
enum LinkDelegationPolicy { DontDelegateLinks, DelegateExternalLinks, DelegateAllLinks }
enum NavigationType { NavigationTypeLinkClicked, NavigationTypeFormSubmitted, NavigationTypeBackOrForward, NavigationTypeReload, NavigationTypeFormResubmitted, NavigationTypeOther }
enum WebAction { NoWebAction, OpenLink, OpenLinkInNewWindow, OpenFrameInNewWindow, ..., SelectAll }
enum WebWindowType { WebBrowserWindow, WebModalDialog }
flags FindFlags
</ENUMS>

<PROTOS>
QAction * action ( WebAction action ) const
quint64 bytesReceived () const
QMenu * createStandardContextMenu ()
QWebFrame * currentFrame () const
// virtual bool extension ( Extension extension, const ExtensionOption * option = 0, ExtensionReturn * output = 0 )
bool findText ( const QString & subString, FindFlags options = 0 )
bool focusNextPrevChild ( bool next )
bool forwardUnsupportedContent () const
QWebHistory * history () const
QVariant inputMethodQuery ( Qt::InputMethodQuery property ) const
bool isContentEditable () const
bool isModified () const
LinkDelegationPolicy linkDelegationPolicy () const
QWebFrame * mainFrame () const
// QNetworkAccessManager * networkAccessManager () const
QPalette palette () const
QWebPluginFactory * pluginFactory () const
QString selectedText () const
void setContentEditable ( bool editable )
void setForwardUnsupportedContent ( bool forward )
void setLinkDelegationPolicy ( LinkDelegationPolicy policy )
// void setNetworkAccessManager ( QNetworkAccessManager * manager )
void setPalette ( const QPalette & palette )
void setPluginFactory ( QWebPluginFactory * factory )
void setView ( QWidget * view )
void setViewportSize ( const QSize & size ) const
QWebSettings * settings () const
virtual bool supportsExtension ( Extension extension ) const
bool swallowContextMenuEvent ( QContextMenuEvent * event )
quint64 totalBytes () const
virtual void triggerAction ( WebAction action, bool checked = false )
//QUndoStack * undoStack () const
void updatePositionDependentActions ( const QPoint & pos )
QWidget * view () const
QSize viewportSize () const
</PROTOS>

<SIGNALS>
void contentsChanged ()
void databaseQuotaExceeded ( QWebFrame * frame, QString databaseName )
void downloadRequested ( const QNetworkRequest & request )
void frameCreated ( QWebFrame * frame )
void geometryChangeRequested ( const QRect & geom )
void linkClicked ( const QUrl & url )
void linkHovered ( const QString & link, const QString & title, const QString & textContent )
void loadFinished ( bool ok )
void loadProgress ( int progress )
void loadStarted ()
void menuBarVisibilityChangeRequested ( bool visible )
void microFocusChanged ()
void printRequested ( QWebFrame * frame )
void repaintRequested ( const QRect & dirtyRect )
void restoreFrameStateRequested ( QWebFrame * frame )
void saveFrameStateRequested ( QWebFrame * frame, QWebHistoryItem * item )
void scrollRequested ( int dx, int dy, const QRect & rectToScroll )
void selectionChanged ()
void statusBarMessage ( const QString & text )
void statusBarVisibilityChangeRequested ( bool visible )
void toolBarVisibilityChangeRequested ( bool visible )
void unsupportedContent ( QNetworkReply * reply )
void windowCloseRequested ()
</SIGNALS>
