diff -urN sqlite3.orig/sqlite3.c sqlite3/sqlite3.c
--- sqlite3.orig/sqlite3.c	2011-02-04 00:43:05.702914036 +0100
+++ sqlite3/sqlite3.c	2011-02-04 00:43:05.772913453 +0100
@@ -23526,7 +23526,9 @@
   case ENODEV:
   case ENXIO:
   case ENOENT:
+#if defined( ESTALE )
   case ESTALE:
+#endif
   case ENOSYS:
     /* these should force the client to close the file and reconnect */
     
@@ -24681,7 +24683,7 @@
   */
   if( pFile->eFileLock > NO_LOCK ){
     pFile->eFileLock = eFileLock;
-#if !OS_VXWORKS
+#if !OS_VXWORKS && !__minix
     /* Always update the timestamp on the old file */
     utimes(zLockFile, NULL);
 #endif
@@ -26150,7 +26152,11 @@
       ** is the same technique used by glibc to implement posix_fallocate()
       ** on systems that do not have a real fallocate() system call.
       */
+#if __minix
+      int nBlk = 4096;            /* MFS default; good enough for now */
+#else
       int nBlk = buf.st_blksize;  /* File-system block size */
+#endif
       i64 iWrite;                 /* Next offset to write to */
       int nWrite;                 /* Return value from seekAndWrite() */
 
diff -urN sqlite3.orig/sqlite3.c sqlite3/sqlite3.c
--- sqlite3.orig/sqlite3.c	2011-02-04 00:43:05.702914036 +0100
+++ sqlite3/sqlite3.c	2011-02-04 00:43:05.772913453 +0100
@@ -23526,7 +23526,9 @@
   case ENODEV:
   case ENXIO:
   case ENOENT:
+#if defined( ESTALE )
   case ESTALE:
+#endif
   case ENOSYS:
     /* these should force the client to close the file and reconnect */
     
@@ -24681,7 +24683,7 @@
   */
   if( pFile->eFileLock > NO_LOCK ){
     pFile->eFileLock = eFileLock;
-#if !OS_VXWORKS
+#if !OS_VXWORKS && !__minix
     /* Always update the timestamp on the old file */
     utimes(zLockFile, NULL);
 #endif
@@ -26150,7 +26152,11 @@
       ** is the same technique used by glibc to implement posix_fallocate()
       ** on systems that do not have a real fallocate() system call.
       */
+#if __minix
+      int nBlk = 4096;            /* MFS default; good enough for now */
+#else
       int nBlk = buf.st_blksize;  /* File-system block size */
+#endif
       i64 iWrite;                 /* Next offset to write to */
       int nWrite;                 /* Return value from seekAndWrite() */
 
