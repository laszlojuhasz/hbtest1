/*
 * $Id$
 */

/* -------------------------------------------------------------------- */
/* WARNING: Automatically generated source file. DO NOT EDIT!           */
/*          Instead, edit corresponding .qth file,                      */
/*          or the generator tool itself, and run regenarate.           */
/* -------------------------------------------------------------------- */
 

FUNCTION hbide_harbourProtos()
   LOCAL aProto := {}

   aadd( aProto, "gdImageCreate( <nPixelWidth>, <nPixelHeight> ) --> <pImage>" )
   aadd( aProto, "gdImageCreateTrueColor( <nPixelWidth>, <nPixelHeight> ) --> <pImage>" )
   aadd( aProto, "gdImageDestroy( <pImage> ) --> NIL" )
   aadd( aProto, "gdImageFromJpeg( <cFile> | <nHandle> | <pPointer> [, <nSize> ] ) --> <pImage>" )
   aadd( aProto, "gdImageFromGif( <cFile> | <nHandle> | <pPointer> [, <nSize> ] ) --> <pImage>" )
   aadd( aProto, "gdImageFromPng( <cFile> | <nHandle> | <pPointer> [, <nSize> ] ) --> <pImage>" )
   aadd( aProto, "gdImageFromGD( <cFile> | <nHandle> | <pPointer> [, <nSize> ] ) --> <pImage>" )
   aadd( aProto, "gdImageFromWBmp( <cFile> | <nHandle> | <pPointer> [, <nSize> ] ) --> <pImage>" )
   aadd( aProto, "gdImageJpeg( <pImage>, <cFile> | <nHandle> [, <nCompressionLevel> ] ) --> NIL" )
   aadd( aProto, "gdImageGif( <pImage>, <cFile> | <nHandle> ) --> NIL" )
   aadd( aProto, "gdImagePng( <pImage>, <cFile> | <nHandle> [, <nCompressionLevel> ] ) --> NIL" )
   aadd( aProto, "gdImageGd( <pImage>, <cFile> | <nHandle> ) --> NIL" )
   aadd( aProto, "gdImageWBmp( <pImage>, <cFile> | <nHandle> [, <nFGcolor> ] ) --> NIL" )
   aadd( aProto, "gdImageSetPixel( <pImage>, <x>, <y>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageLine( <pImage>, <x1>, <y1>, <x2>, <y2>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageDashedLine( <pImage>, <x1>, <y1>, <x2>, <y2>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImagePolygon( <pImage>, <aVerticies>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageOpenPolygon( <pImage>, <aVerticies>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageRectangle( <pImage>, <x1>, <y1>, <x2>, <y2>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageFilledPolygon( <pImage>, <aVerticies>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageFilledRectangle( <pImage>, <x1>, <y1>, <x2>, <y2>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageArc( <pImage>, <cx>, <cy>, <w>, <h>, <s>, <e>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageArc( <pImage>, <cx>, <cy>, <w>, <h>, <s>, <e>, <nColor>, <nStyle> ) --> NIL" )
   aadd( aProto, "gdImageFilledEllipse( <pImage>, <cx>, <cy>, <w>, <h>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageFillToBorder( <pImage>, <x>, <y>, <nBorder>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageFill( <pImage>, <x>, <y>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageSetAntiAliased( <pImage>, <nColor> ) --> NIL" )
   aadd( aProto, "gdSetAntiAliasedDontBlend( <pImage>, <nColor> ) --> NIL" )
   aadd( aProto, "gdImageSetBrush( <pImage>, <pBrush> ) --> NIL" )
   aadd( aProto, "gdImageSetTile( <pImage>, <pTile> ) --> NIL" )
   aadd( aProto, "gdImageSetStyle( <pImage>, <aStyle> ) --> NIL" )
   aadd( aProto, "gdImageSetThickness( <pImage>, <nThickness> ) --> NIL" )
   aadd( aProto, "GT_Ascpos(<cStr>, <nPos>) --> nAscVal" )
   aadd( aProto, "GT_AsciiSum(<cStr>) --> nSum" )
   aadd( aProto, "GT_AtDiff(<cStr1>, <cStr2>) --> nPos" )
   aadd( aProto, "GT_CharEven(<cStr>) --> cRet" )
   aadd( aProto, "GT_CharMix(<cStr1>, <cStr2>) --> cRet" )
   aadd( aProto, "GT_CharOdd(<cStr>) --> cRet" )
   aadd( aProto, "GT_ChrCount(<cChr>, <cStr>) --> nFreq" )
   aadd( aProto, "GT_ChrFirst(<cChars>, <cStr>) --> nAsc" )
   aadd( aProto, "GT_ChrTotal(<cChrs>, <cStr>) --> nTotOcc" )
   aadd( aProto, "GT_StrCount(<cChrs>, <cStr>) --> nFreq" )
   aadd( aProto, "GT_strcspn(<cString>, <cSet>) --> nLength" )
   aadd( aProto, "GT_StrDiff(<cStr1>, <cStr2>) --> cRet" )
   aadd( aProto, "GT_StrExpand(<cStr>, [<nNum>], [<cChar>]) --> cRet" )
   aadd( aProto, "GT_StrLeft(<cStr>, <cChars>) --> nLen" )
   aadd( aProto, "GT_StrpBrk(<cStr>, <cSet>) --> cString" )
   aadd( aProto, "GT_StrRight(<cStr>, <cChars>) --> nLen" )
   aadd( aProto, "GT_NewFlag(<nFlagCount>) --> cFlagString" )
   aadd( aProto, "GT_SetFlag(<cFlagString>,[<nStart>],[<nEnd>]) --> cFlagString" )
   aadd( aProto, "GT_ClrFlag(<cFlagString>,[<nStart>],[<nEnd>]) --> cFlagString" )
   aadd( aProto, "GT_IsFlag(<cFlagString>,[<nFlag>]) --> lSetting" )
   aadd( aProto, "AMONTHS()  --> aMonths" )
   aadd( aProto, "ADAYS()  --> aDays" )
   aadd( aProto, "ISLEAPYEAR( <dDate> )  --> lTrueOrFalse" )
   aadd( aProto, "DAYSINMONTH( <dDate> )  --> nDays" )
   aadd( aProto, "EOM( <dDate> )  --> dEOM" )
   aadd( aProto, "BOM( <dDate> )  --> dBOM" )
   aadd( aProto, "DOY( <dDate> )  --> nDay" )
   aadd( aProto, "WOY( <dDate>, <lIso> )  --> nWeek" )
   aadd( aProto, "EOY( <dDate> )  --> dEOY" )
   aadd( aProto, "BOY( <dDate> )  --> dBOY" )
   aadd( aProto, "oFile := TFileRead():New( <cFileName> [, <nReadSize> ] )" )
   aadd( aProto, "ISBIN(<cN>) -><cNr>" )
   aadd( aProto, "ISOCTAL(<cN>) -><cNr>" )
   aadd( aProto, "ISDEC(<cN>) -><cNr>" )
   aadd( aProto, "ISHEXA(<cN>) -><cNr>" )
   aadd( aProto, "DECTOBIN(<cN>) -><cNr>" )
   aadd( aProto, "DECTOOCTAL(<cN>) -><cNr>" )
   aadd( aProto, "DECTOHEXA(<cN>) -><cNr>" )
   aadd( aProto, "BIntODEC(<cN>) -><cNr>" )
   aadd( aProto, "OCTALTODEC(<cN>) -><cNr>" )
   aadd( aProto, "HEXATODEC(<cN>) -><cNr>" )
   aadd( aProto, "FIELDTYPE(<nFieldNum>) --> cFieldType" )
   aadd( aProto, "FIELDSIZE(<nFieldNum>) --> nFieldSize" )
   aadd( aProto, "FIELDDECI(<nFieldNum>) --> nFieldDeci" )
   aadd( aProto, "oHtml:=THtml():New(<cFile>) --> oHtm" )
   aadd( aProto, "oNg:=TOs2():New(<cFile>) --> oOs2" )
   aadd( aProto, "oNg:=TNortonGuide():New(<cFile>) --> oNg" )
   aadd( aProto, "oNg:=TRtf():New(<cFile>) --> oRtf" )
   aadd( aProto, "oTroff:=TTrof():New(<cFile>) --> oTrf" )
   aadd( aProto, "CD(<cDir>) --> lSuccess" )
   aadd( aProto, "MD(<cDir>) -> <lSucess>" )
   aadd( aProto, "RD(<cDir>) --> <lSucess>" )
   aadd( aProto, "StrFormat(<cMask>[, <cPar1>[, <cParn>[, ...]]) --> cString" )
   aadd( aProto, "HBDbfModel():new( ... )" )
   aadd( aProto, "HBEvents():new( ... )" )
   aadd( aProto, "HBQPlainTextEdit():new( ... )" )
   aadd( aProto, "HBQsciScintilla():new( ... )" )
   aadd( aProto, "HBQSyntaxHighlighter():new( ... )" )
   aadd( aProto, "HBQTextBlockUserData():new( ... )" )
   aadd( aProto, "HBSlots():new( ... )" )
   aadd( aProto, "QAbstractButton():new( ... )" )
   aadd( aProto, "QAbstractItemDelegate():new( ... )" )
   aadd( aProto, "QAbstractItemModel():new( ... )" )
   aadd( aProto, "QAbstractItemView():new( ... )" )
   aadd( aProto, "QAbstractListModel():new( ... )" )
   aadd( aProto, "QAbstractPrintDialog():new( ... )" )
   aadd( aProto, "QAbstractProxyModel():new( ... )" )
   aadd( aProto, "QAbstractScrollArea():new( ... )" )
   aadd( aProto, "QAbstractSlider():new( ... )" )
   aadd( aProto, "QAbstractSpinBox():new( ... )" )
   aadd( aProto, "QAbstractTableModel():new( ... )" )
   aadd( aProto, "QAbstractTextDocumentLayout():new( ... )" )
   aadd( aProto, "QAction():new( ... )" )
   aadd( aProto, "QActionGroup():new( ... )" )
   aadd( aProto, "QApplication():new( ... )" )
   aadd( aProto, "QBitArray():new( ... )" )
   aadd( aProto, "QBitmap():new( ... )" )
   aadd( aProto, "QBoxLayout():new( ... )" )
   aadd( aProto, "QBrush():new( ... )" )
   aadd( aProto, "QBuffer():new( ... )" )
   aadd( aProto, "QButtonGroup():new( ... )" )
   aadd( aProto, "QByteArray():new( ... )" )
   aadd( aProto, "QCalendarWidget():new( ... )" )
   aadd( aProto, "QChar():new( ... )" )
   aadd( aProto, "QCheckBox():new( ... )" )
   aadd( aProto, "QClipboard():new( ... )" )
   aadd( aProto, "QColor():new( ... )" )
   aadd( aProto, "QColorDialog():new( ... )" )
   aadd( aProto, "QComboBox():new( ... )" )
   aadd( aProto, "QCommandLinkButton():new( ... )" )
   aadd( aProto, "QCompleter():new( ... )" )
   aadd( aProto, "QConicalGradient():new( ... )" )
   aadd( aProto, "QContextMenuEvent():new( ... )" )
   aadd( aProto, "QCoreApplication():new( ... )" )
   aadd( aProto, "QCursor():new( ... )" )
   aadd( aProto, "QDataStream():new( ... )" )
   aadd( aProto, "QDate():new( ... )" )
   aadd( aProto, "QDateTime():new( ... )" )
   aadd( aProto, "QDateTimeEdit():new( ... )" )
   aadd( aProto, "QDesignerActionEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowCursorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowManagerInterface():new( ... )" )
   aadd( aProto, "QDesignerObjectInspectorInterface():new( ... )" )
   aadd( aProto, "QDesignerPropertyEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerWidgetBoxInterface():new( ... )" )
   aadd( aProto, "QDesktopWidget():new( ... )" )
   aadd( aProto, "QDial():new( ... )" )
   aadd( aProto, "QDialog():new( ... )" )
   aadd( aProto, "QDir():new( ... )" )
   aadd( aProto, "QDirModel():new( ... )" )
   aadd( aProto, "QDockWidget():new( ... )" )
   aadd( aProto, "QDoubleSpinBox():new( ... )" )
   aadd( aProto, "QDragMoveEvent():new( ... )" )
   aadd( aProto, "QDropEvent():new( ... )" )
   aadd( aProto, "QErrorMessage():new( ... )" )
   aadd( aProto, "QEvent():new( ... )" )
   aadd( aProto, "QEventLoop():new( ... )" )
   aadd( aProto, "QFile():new( ... )" )
   aadd( aProto, "QFileDialog():new( ... )" )
   aadd( aProto, "QFileIconProvider():new( ... )" )
   aadd( aProto, "QFileInfo():new( ... )" )
   aadd( aProto, "QFileSystemModel():new( ... )" )
   aadd( aProto, "QFocusEvent():new( ... )" )
   aadd( aProto, "QFocusFrame():new( ... )" )
   aadd( aProto, "QFont():new( ... )" )
   aadd( aProto, "QFontComboBox():new( ... )" )
   aadd( aProto, "QFontDatabase():new( ... )" )
   aadd( aProto, "QFontDialog():new( ... )" )
   aadd( aProto, "QFontInfo():new( ... )" )
   aadd( aProto, "QFontMetrics():new( ... )" )
   aadd( aProto, "QFontMetricsF():new( ... )" )
   aadd( aProto, "QFormLayout():new( ... )" )
   aadd( aProto, "QFrame():new( ... )" )
   aadd( aProto, "QFtp():new( ... )" )
   aadd( aProto, "QGradient():new( ... )" )
   aadd( aProto, "QGridLayout():new( ... )" )
   aadd( aProto, "QGroupBox():new( ... )" )
   aadd( aProto, "QHeaderView():new( ... )" )
   aadd( aProto, "QHelpEvent():new( ... )" )
   aadd( aProto, "QHttp():new( ... )" )
   aadd( aProto, "QHttpHeader():new( ... )" )
   aadd( aProto, "QHttpRequestHeader():new( ... )" )
   aadd( aProto, "QHttpResponseHeader():new( ... )" )
   aadd( aProto, "QIcon():new( ... )" )
   aadd( aProto, "QImage():new( ... )" )
   aadd( aProto, "QImageReader():new( ... )" )
   aadd( aProto, "QImageWriter():new( ... )" )
   aadd( aProto, "QInputContext():new( ... )" )
   aadd( aProto, "QInputDialog():new( ... )" )
   aadd( aProto, "QInputEvent():new( ... )" )
   aadd( aProto, "QInputMethodEvent():new( ... )" )
   aadd( aProto, "QIODevice():new( ... )" )
   aadd( aProto, "QItemDelegate():new( ... )" )
   aadd( aProto, "QItemEditorCreator():new( ... )" )
   aadd( aProto, "QItemEditorCreatorBase():new( ... )" )
   aadd( aProto, "QItemEditorFactory():new( ... )" )
   aadd( aProto, "QItemSelection():new( ... )" )
   aadd( aProto, "QItemSelectionModel():new( ... )" )
   aadd( aProto, "QKeyEvent():new( ... )" )
   aadd( aProto, "QKeySequence():new( ... )" )
   aadd( aProto, "QLabel():new( ... )" )
   aadd( aProto, "QLatin1Char():new( ... )" )
   aadd( aProto, "QLatin1String():new( ... )" )
   aadd( aProto, "QLayout():new( ... )" )
   aadd( aProto, "QLayoutItem():new( ... )" )
   aadd( aProto, "QLCDNumber():new( ... )" )
   aadd( aProto, "QLine():new( ... )" )
   aadd( aProto, "QLinearGradient():new( ... )" )
   aadd( aProto, "QLineEdit():new( ... )" )
   aadd( aProto, "QLineF():new( ... )" )
   aadd( aProto, "QList():new( ... )" )
   aadd( aProto, "QListView():new( ... )" )
   aadd( aProto, "QListWidget():new( ... )" )
   aadd( aProto, "QListWidgetItem():new( ... )" )
   aadd( aProto, "QLocale():new( ... )" )
   aadd( aProto, "QMainWindow():new( ... )" )
   aadd( aProto, "QMatrix():new( ... )" )
   aadd( aProto, "QMdiArea():new( ... )" )
   aadd( aProto, "QMdiSubWindow():new( ... )" )
   aadd( aProto, "QMenu():new( ... )" )
   aadd( aProto, "QMenuBar():new( ... )" )
   aadd( aProto, "QMessageBox():new( ... )" )
   aadd( aProto, "QMimeData():new( ... )" )
   aadd( aProto, "QModelIndex():new( ... )" )
   aadd( aProto, "QMouseEvent():new( ... )" )
   aadd( aProto, "QMoveEvent():new( ... )" )
   aadd( aProto, "QMovie():new( ... )" )
   aadd( aProto, "QNetworkRequest():new( ... )" )
   aadd( aProto, "QObject():new( ... )" )
   aadd( aProto, "QPageSetupDialog():new( ... )" )
   aadd( aProto, "QPaintDevice():new( ... )" )
   aadd( aProto, "QPaintEngine():new( ... )" )
   aadd( aProto, "QPainter():new( ... )" )
   aadd( aProto, "QPainterPath():new( ... )" )
   aadd( aProto, "QPaintEvent():new( ... )" )
   aadd( aProto, "QPalette():new( ... )" )
   aadd( aProto, "QPen():new( ... )" )
   aadd( aProto, "QPicture():new( ... )" )
   aadd( aProto, "QPixmap():new( ... )" )
   aadd( aProto, "QPlainTextDocumentLayout():new( ... )" )
   aadd( aProto, "QPlainTextEdit():new( ... )" )
   aadd( aProto, "QPoint():new( ... )" )
   aadd( aProto, "QPointF():new( ... )" )
   aadd( aProto, "QPolygon():new( ... )" )
   aadd( aProto, "QPolygonF():new( ... )" )
   aadd( aProto, "QPrintDialog():new( ... )" )
   aadd( aProto, "QPrintEngine():new( ... )" )
   aadd( aProto, "QPrinter():new( ... )" )
   aadd( aProto, "QPrintPreviewDialog():new( ... )" )
   aadd( aProto, "QProcess():new( ... )" )
   aadd( aProto, "QProgressBar():new( ... )" )
   aadd( aProto, "QProgressDialog():new( ... )" )
   aadd( aProto, "QPushButton():new( ... )" )
   aadd( aProto, "QRadialGradient():new( ... )" )
   aadd( aProto, "QRect():new( ... )" )
   aadd( aProto, "QRectF():new( ... )" )
   aadd( aProto, "QRegExp():new( ... )" )
   aadd( aProto, "QRegion():new( ... )" )
   aadd( aProto, "QResizeEvent():new( ... )" )
   aadd( aProto, "QResource():new( ... )" )
   aadd( aProto, "QsciAbstractAPIs():new( ... )" )
   aadd( aProto, "QsciAPIs():new( ... )" )
   aadd( aProto, "QsciCommand():new( ... )" )
   aadd( aProto, "QsciCommandSet():new( ... )" )
   aadd( aProto, "QsciLexer():new( ... )" )
   aadd( aProto, "QsciLexerCPP():new( ... )" )
   aadd( aProto, "QsciLexerFlagship():new( ... )" )
   aadd( aProto, "QsciScintilla():new( ... )" )
   aadd( aProto, "QsciStyle():new( ... )" )
   aadd( aProto, "QsciStyledText():new( ... )" )
   aadd( aProto, "QScrollArea():new( ... )" )
   aadd( aProto, "QSessionManager():new( ... )" )
   aadd( aProto, "QSettings():new( ... )" )
   aadd( aProto, "QSignalMapper():new( ... )" )
   aadd( aProto, "QSize():new( ... )" )
   aadd( aProto, "QSizeF():new( ... )" )
   aadd( aProto, "QSizePolicy():new( ... )" )
   aadd( aProto, "QSlider():new( ... )" )
   aadd( aProto, "QSound():new( ... )" )
   aadd( aProto, "QSpacerItem():new( ... )" )
   aadd( aProto, "QSpinBox():new( ... )" )
   aadd( aProto, "QSplashScreen():new( ... )" )
   aadd( aProto, "QSplitter():new( ... )" )
   aadd( aProto, "QStackedWidget():new( ... )" )
   aadd( aProto, "QStandardItem():new( ... )" )
   aadd( aProto, "QStandardItemModel():new( ... )" )
   aadd( aProto, "QStatusBar():new( ... )" )
   aadd( aProto, "QStringList():new( ... )" )
   aadd( aProto, "QStringListModel():new( ... )" )
   aadd( aProto, "QStyle():new( ... )" )
   aadd( aProto, "QStyledItemDelegate():new( ... )" )
   aadd( aProto, "QStyleFactory():new( ... )" )
   aadd( aProto, "QStyleOption():new( ... )" )
   aadd( aProto, "QStyleOptionButton():new( ... )" )
   aadd( aProto, "QStyleOptionComboBox():new( ... )" )
   aadd( aProto, "QStyleOptionComplex():new( ... )" )
   aadd( aProto, "QStyleOptionDockWidget():new( ... )" )
   aadd( aProto, "QStyleOptionFocusRect():new( ... )" )
   aadd( aProto, "QStyleOptionFrame():new( ... )" )
   aadd( aProto, "QStyleOptionGroupBox():new( ... )" )
   aadd( aProto, "QStyleOptionHeader():new( ... )" )
   aadd( aProto, "QStyleOptionMenuItem():new( ... )" )
   aadd( aProto, "QStyleOptionProgressBar():new( ... )" )
   aadd( aProto, "QStyleOptionSizeGrip():new( ... )" )
   aadd( aProto, "QStyleOptionSlider():new( ... )" )
   aadd( aProto, "QStyleOptionSpinBox():new( ... )" )
   aadd( aProto, "QStyleOptionTab():new( ... )" )
   aadd( aProto, "QStyleOptionTabBarBase():new( ... )" )
   aadd( aProto, "QStyleOptionTabWidgetFrame():new( ... )" )
   aadd( aProto, "QStyleOptionTitleBar():new( ... )" )
   aadd( aProto, "QStyleOptionToolBar():new( ... )" )
   aadd( aProto, "QStyleOptionToolBox():new( ... )" )
   aadd( aProto, "QStyleOptionToolButton():new( ... )" )
   aadd( aProto, "QStyleOptionViewItem():new( ... )" )
   aadd( aProto, "QStylePainter():new( ... )" )
   aadd( aProto, "QSyntaxHighlighter():new( ... )" )
   aadd( aProto, "QSystemTrayIcon():new( ... )" )
   aadd( aProto, "QTabBar():new( ... )" )
   aadd( aProto, "QTableView():new( ... )" )
   aadd( aProto, "QTableWidget():new( ... )" )
   aadd( aProto, "QTableWidgetItem():new( ... )" )
   aadd( aProto, "QTableWidgetSelectionRange():new( ... )" )
   aadd( aProto, "QTabWidget():new( ... )" )
   aadd( aProto, "QTextBlock():new( ... )" )
   aadd( aProto, "QTextBlockFormat():new( ... )" )
   aadd( aProto, "QTextBoundaryFinder():new( ... )" )
   aadd( aProto, "QTextBrowser():new( ... )" )
   aadd( aProto, "QTextCharFormat():new( ... )" )
   aadd( aProto, "QTextCodec():new( ... )" )
   aadd( aProto, "QTextCursor():new( ... )" )
   aadd( aProto, "QTextDecoder():new( ... )" )
   aadd( aProto, "QTextDocument():new( ... )" )
   aadd( aProto, "QTextDocumentFragment():new( ... )" )
   aadd( aProto, "QTextDocumentWriter():new( ... )" )
   aadd( aProto, "QTextEdit():new( ... )" )
   aadd( aProto, "QTextEncoder():new( ... )" )
   aadd( aProto, "QTextFormat():new( ... )" )
   aadd( aProto, "QTextFragment():new( ... )" )
   aadd( aProto, "QTextFrame():new( ... )" )
   aadd( aProto, "QTextFrameFormat():new( ... )" )
   aadd( aProto, "QTextImageFormat():new( ... )" )
   aadd( aProto, "QTextInlineObject():new( ... )" )
   aadd( aProto, "QTextItem():new( ... )" )
   aadd( aProto, "QTextLayout():new( ... )" )
   aadd( aProto, "QTextLength():new( ... )" )
   aadd( aProto, "QTextLine():new( ... )" )
   aadd( aProto, "QTextList():new( ... )" )
   aadd( aProto, "QTextListFormat():new( ... )" )
   aadd( aProto, "QTextObject():new( ... )" )
   aadd( aProto, "QTextOption():new( ... )" )
   aadd( aProto, "QTextStream():new( ... )" )
   aadd( aProto, "QTextTableFormat():new( ... )" )
   aadd( aProto, "QThread():new( ... )" )
   aadd( aProto, "QTime():new( ... )" )
   aadd( aProto, "QTimer():new( ... )" )
   aadd( aProto, "QToolBar():new( ... )" )
   aadd( aProto, "QToolBox():new( ... )" )
   aadd( aProto, "QToolButton():new( ... )" )
   aadd( aProto, "QTransform():new( ... )" )
   aadd( aProto, "QTranslator():new( ... )" )
   aadd( aProto, "QTreeView():new( ... )" )
   aadd( aProto, "QTreeWidget():new( ... )" )
   aadd( aProto, "QTreeWidgetItem():new( ... )" )
   aadd( aProto, "QUiLoader():new( ... )" )
   aadd( aProto, "QUrl():new( ... )" )
   aadd( aProto, "QValidator():new( ... )" )
   aadd( aProto, "QVariant():new( ... )" )
   aadd( aProto, "QWebFrame():new( ... )" )
   aadd( aProto, "QWebHistory():new( ... )" )
   aadd( aProto, "QWebHistoryInterface():new( ... )" )
   aadd( aProto, "QWebHistoryItem():new( ... )" )
   aadd( aProto, "QWebHitTestResult():new( ... )" )
   aadd( aProto, "QWebPage():new( ... )" )
   aadd( aProto, "QWebPluginFactory():new( ... )" )
   aadd( aProto, "QWebSecurityOrigin():new( ... )" )
   aadd( aProto, "QWebSettings():new( ... )" )
   aadd( aProto, "QWebView():new( ... )" )
   aadd( aProto, "QWheelEvent():new( ... )" )
   aadd( aProto, "QWidget():new( ... )" )
   aadd( aProto, "QWidgetAction():new( ... )" )
   aadd( aProto, "QWidgetItem():new( ... )" )
   aadd( aProto, "QWindowStateChangeEvent():new( ... )" )
   aadd( aProto, "QWizard():new( ... )" )
   aadd( aProto, "QWizardPage():new( ... )" )
   aadd( aProto, "QsciAbstractAPIs():new( ... )" )
   aadd( aProto, "QsciAPIs():new( ... )" )
   aadd( aProto, "QsciCommand():new( ... )" )
   aadd( aProto, "QsciCommandSet():new( ... )" )
   aadd( aProto, "QsciLexer():new( ... )" )
   aadd( aProto, "QsciLexerCPP():new( ... )" )
   aadd( aProto, "QsciLexerFlagship():new( ... )" )
   aadd( aProto, "QsciScintilla():new( ... )" )
   aadd( aProto, "QsciStyle():new( ... )" )
   aadd( aProto, "QsciStyledText():new( ... )" )
   aadd( aProto, "QDesignerActionEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowCursorInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowInterface():new( ... )" )
   aadd( aProto, "QDesignerFormWindowManagerInterface():new( ... )" )
   aadd( aProto, "QDesignerObjectInspectorInterface():new( ... )" )
   aadd( aProto, "QDesignerPropertyEditorInterface():new( ... )" )
   aadd( aProto, "QDesignerWidgetBoxInterface():new( ... )" )
   aadd( aProto, "QWebFrame():new( ... )" )
   aadd( aProto, "QWebHistory():new( ... )" )
   aadd( aProto, "QWebHistoryInterface():new( ... )" )
   aadd( aProto, "QWebHistoryItem():new( ... )" )
   aadd( aProto, "QWebHitTestResult():new( ... )" )
   aadd( aProto, "QWebPage():new( ... )" )
   aadd( aProto, "QWebPluginFactory():new( ... )" )
   aadd( aProto, "QWebSecurityOrigin():new( ... )" )
   aadd( aProto, "QWebSettings():new( ... )" )
   aadd( aProto, "QWebView():new( ... )" )
   aadd( aProto, "b_SetZipComment( <cComment> ) --> NIL" )
   aadd( aProto, "b_GetZipComment( <szFile> ) --> <szComment>" )
   aadd( aProto, "b_ZipTestPK( <cFile> ) --> <nReturnCode>" )
   aadd( aProto, "b_SetDiskZip( <bBlock> ) --> .T." )
   aadd( aProto, "b_SetBuffer( [<nWriteBuffer>], [<nExtractBuffer>], [<nReadBuffer>] ) --> NIL" )
   aadd( aProto, "b_ZipFileByTDSpan( <cFile> ,<cFileToCompress> | <aFiles>, <nLevel>," )
   aadd( aProto, "b_ZipFileByPKSpan( <cFile>, <cFileToCompress> | <aFiles>, <nLevel>," )
   aadd( aProto, "b_ZipFile( <cFile>, <cFileToCompress> | <aFiles>, <nLevel>," )
   aadd( aProto, "b_UnzipFILE( <cFile>, <bBlock>, <lWithPath>, <cPassWord>, <cPath>," )
   aadd( aProto, "b_ZipDeleteFiles( <cFile>, <cFiletoDelete> | <aFiles> | <nFilePos> ) --> <lDeleted>" )
   aadd( aProto, "ADSBlob2File(cFileName, cFieldName) --> lSuccess" )
   aadd( aProto, "ADSFile2Blob(cFileName, cFieldName, <nBinaryType>) --> lSuccess" )
   aadd( aProto, "ADSClearAOF()" )
   aadd( aProto, "ADSCustomizeAOF( [<nRecno | aRecNos>] [, <nType>] ) --> nSuccess" )
   aadd( aProto, "ADSEvalAOF(<cFilter>) --> nOptimizationLevel" )
   aadd( aProto, "ADSGetAOFoptLevel() --> nOptimizationLevel" )
   aadd( aProto, "ADSGetAOF() --> cFilter" )
   aadd( aProto, "ADSGetAOFnoOpt() --> cFilterFragment" )
   aadd( aProto, "ADSRefreshAOF()" )
   aadd( aProto, "ADSSetAOF( <cFilter> [, <nResolveOption>] ) --> lSuccess" )
   aadd( aProto, "ADSIsRecordInAOF( [<nRecNo>] ) --> lSatisfiesFilter" )
   aadd( aProto, "ADSGetRelKeyPos() --> nKeyPos" )
   aadd( aProto, "ADSSetSelKeyPos( <nPercent> ) --> nError" )
   aadd( aProto, "ADSKeyCount([<xTag>], <cIgnoredIndexFile>, [<nFilterOption>]) --> nKeyCount" )
   aadd( aProto, "ADSKeyNo([<xTag>], <cIgnoredIndexFile>, [<nFilterOption>]) --> nKeyNo" )
   aadd( aProto, "ADSLocking( <lMode> ) --> lPriorSetting" )
   aadd( aProto, "ADSRightsCheck( <lMode> ) --> lPriorSetting" )
   aadd( aProto, "AdsRegCallBack( bEval )  --> nil" )
   aadd( aProto, "AdsClrCallBack() --> nil" )
   aadd( aProto, "ADSSetDefault( [<cPath>] ) --> cPriorSetting" )
   aadd( aProto, "ADSSetDeleted( [<lOnOff>] ) --> lPriorSetting" )
   aadd( aProto, "AdsSetSearchPath( [<cPath>] ) --> cPriorSetting" )
   aadd( aProto, "AdsSetExact( [<lOnOff>] ) --> lPriorSetting" )
   aadd( aProto, "ADSSetCharType( <nCharType>, [lOEM] ) --> nPriorSetting" )
   aadd( aProto, "AdsIsIndexed() --> lActiveIndex" )
   aadd( aProto, "AdsTestRecLocks( <lOnOff> ) --> lPriorSetting" )
   aadd( aProto, "AdsGetLastError() --> nErrorCode" )
   aadd( aProto, "AdsIsExprValid( <cExp> ) --> lSuccess" )
   aadd( aProto, "AdsGetConnectionType( [<hConnection>] ) --> nConnectionType" )
   aadd( aProto, "AdsGetTableConType() --> nConnectionType" )
   aadd( aProto, "ADSDDADDTABLE( <cTableName>, <cFileName>, <cIndexFileName> ) --> lSuccess" )
   aadd( aProto, "None" )
   aadd( aProto, "ADSCONNECT60(<cFilePath>, <nServertype>, [<cUserName>], [<cUserPass>], [<nOptions>]) -> lSuccess" )
   aadd( aProto, "ADSCACHEOPENTABLES(<nOpen>) -> nRetVal" )
   aadd( aProto, "ADSCACHEOPENCURSORS(<nOpen>) -> nRetVal" )
   aadd( aProto, "ADSCLOSECACHEDTABLES([<hConnection>]) -> nRetVal" )
   aadd( aProto, "xxx( <lMode> ) --> lPriorSetting" )
   aadd( aProto, "VouDbfCache( cDbfFile, cPath, cCompany )" )
   aadd( aProto, "" )
   aadd( aProto, "IsLeapYr( [<dDate>] ) --> <lIsLeap>" )
   aadd( aProto, "long hb_dateEncStr( char * szDate )" )
   aadd( aProto, "ARRAY( <nElements> [, <nElements>...] ) --> aArray" )
   aadd( aProto, "AADD(<aArray>[, <xValue>]) --> Value" )
   aadd( aProto, "ASIZE(<aArray>, <nLen>) --> aTarget" )
   aadd( aProto, "ATAIL( <aArray> ) --> Element" )
   aadd( aProto, "AINS( <aArray>, <nPos> ) --> aTarget" )
   aadd( aProto, "ADEL(<aArray>, <nPos>) --> aTarget" )
   aadd( aProto, "AFILL( <aArray>, <xValue>, [<nStart>], [<nCount>] ) --> aTarget" )
   aadd( aProto, "ASCAN( <aTarget>, <xSearch>, [<nStart>], [<nCount>] ) --> nStoppedAt" )
   aadd( aProto, "AEVAL(<aArray>, <bBlock>, [<nStart>], [<nCount>]) --> aArray" )
   aadd( aProto, "ACOPY( <aSource>, <aTarget>, [<nStart>], [<nCount>], [<nTargetPos>] ) --> aTarget" )
   aadd( aProto, "ACLONE(<aSource>) --> aDuplicate" )
   aadd( aProto, "ASORT( <aArray>, [<nStart>], [<nCount>], [<bSort>] ) --> aArray" )
   aadd( aProto, "BIN2W( <cBuffer> ) --> nNumber" )
   aadd( aProto, "BIN2I( <cBuffer> ) --> nNumber" )
   aadd( aProto, "BIN2L( <cBuffer> ) --> nNumber" )
   aadd( aProto, "BIN2U( <cBuffer> ) --> nNumber" )
   aadd( aProto, "I2BIN( <nNumber> ) --> cBuffer" )
   aadd( aProto, "W2BIN( <nNumber> ) --> cBuffer" )
   aadd( aProto, "L2BIN( <nNumber> ) --> cBuffer" )
   aadd( aProto, "U2BIN( <nNumber> ) --> cBuffer" )
   aadd( aProto, "WORD( <nDouble> ) --> <nInteger>" )
   aadd( aProto, "DBEDIT( [<nTop>], [<nLeft>], [<nBottom>], [<nRight>], [<acColumns>], [<xUserFunc>], [<xColumnSayPictures>], [<xColumnHeaders>], [<xHeadingSeparators>], [<xColumnSeparators>], [<xFootingSeparators>], [<xColumnFootings>] ) --> lOk" )
   aadd( aProto, "BROWSE( [<nTop>, <nLeft>, <nBottom>, <nRight>] ) --> lOk" )
   aadd( aProto, "TBrowseDB( [<nTop>], [<nLeft>], [<nBottom>], [<nRight>] ) --> oBrowse" )
   aadd( aProto, "dbSkipper( <nRecs> ) --> nSkipped" )
   aadd( aProto, "[CREATE] CLASS <ClassName> [ <FROM, INHERIT> <SuperClass1> [,<SuperClassN>] ]  [STATIC]" )
   aadd( aProto, "DATA <DataName1> [,<DataNameN>] [ AS <type> ] [ INIT <uValue> ]" )
   aadd( aProto, "CLASSDATA <DataName1> [,<DataNameN>] [ AS <type> ] [ INIT <uValue> ]" )
   aadd( aProto, "METHOD <MethodName>( [<params,...>] ) [CONSTRUCTOR]" )
   aadd( aProto, "MESSAGE <MessageName>   METHOD <MethodName>( [<params,...>] )" )
   aadd( aProto, "ERROR HANDLER <MethodName>( [<params,...>] )" )
   aadd( aProto, "ON ERROR <MethodName>( [<params,...>] )" )
   aadd( aProto, "ENDCLASS" )
   aadd( aProto, "CDOW(<dDate>)  --> cDay" )
   aadd( aProto, "CMONTH(<dDate>)  --> cMonth" )
   aadd( aProto, "DATE() --> dCurDate" )
   aadd( aProto, "CTOD(<cDateString>)  --> dDate" )
   aadd( aProto, "DAY(<cDate>) --> nMonth" )
   aadd( aProto, "DAYS(<nSecs> ) --> nDay" )
   aadd( aProto, "DOW(<dDate>) --> nDay" )
   aadd( aProto, "DTOC(<dDateString>)  --> cDate" )
   aadd( aProto, "DTOS(<dDateString>)  --> cDate" )
   aadd( aProto, "ELAPTIME(<cStartTime>,<cEndTime>) --> cDiference" )
   aadd( aProto, "MONTH(<dDate>) --> nMonth" )
   aadd( aProto, "SECONDS() --> nSeconds" )
   aadd( aProto, "SECS( <cTime> ) --> nSeconds" )
   aadd( aProto, "TIME() --> cTime" )
   aadd( aProto, "YEAR(<cDate>) --> nYear" )
   aadd( aProto, "__dbDelim( <lExport>, <xcFile>, [<xcDelim>], [<aFields>]," )
   aadd( aProto, "__dbSDF( <lExport>, <xcFile>, [<aFields>]," )
   aadd( aProto, "__dbCopyStruct( <cFileName>, [<aFieldList>] )" )
   aadd( aProto, "COPY STRUCTURE TO <xcFileName> [FIELDS <field,...>]" )
   aadd( aProto, "__dbCopyXStruct( <cFileName> ) --> lSuccess" )
   aadd( aProto, "COPY STRUCTURE EXTENDED TO <xcFileName>" )
   aadd( aProto, "__dbCreate( <cFileName>, [<cFileFrom>], [<cRDDName>], [<lNew>], [<cAlias>] ) --> lUsed" )
   aadd( aProto, "CREATE <xcFileName> [VIA <xcRDDName>] [ALIAS <xcAlias>]" )
   aadd( aProto, "CREATE <xcFileName> FROM <xcFileFrom> [VIA <xcRDDName>] [NEW] [ALIAS <xcAlias>]" )
   aadd( aProto, "__FLEDIT( <aStruct>, [<aFieldList>] ) --> aStructFiltered" )
   aadd( aProto, "__dbStructFilter( <aStruct>, [<aFieldList>] ) --> aStructFiltered" )
   aadd( aProto, "__Dir( [<cFileMask>] ) --> NIL" )
   aadd( aProto, "DIR [<cFileMask>]" )
   aadd( aProto, "ADIR( [<cFileMask>], [<aName>], [<aSize>], [<aDate>]," )
   aadd( aProto, "DISKSPACE( [<nDrive>] ) --> nDiskbytes" )
   aadd( aProto, "HB_DISKSPACE( [<cDrive>] [, <nType>] ) --> nDiskbytes" )
   aadd( aProto, "ERRORSYS() --> NIL" )
   aadd( aProto, "EVAL( <bBlock> [, <xVal> [,...]])  --> xExpression" )
   aadd( aProto, "FOPEN( <cFile>, [<nMode>] ) --> nHandle" )
   aadd( aProto, "FCREATE( <cFile>, [<nAttribute>] ) --> nHandle" )
   aadd( aProto, "FREAD( <nHandle>, @<cBuffer>, <nBytes> ) --> nBytes" )
   aadd( aProto, "WRITE( <nHandle>, <cBuffer>, [<nBytes>] ) --> nBytesWritten" )
   aadd( aProto, "FERROR() --> <nErrorCode>" )
   aadd( aProto, "CLOSE( <nHandle> ) --> <lSuccess>" )
   aadd( aProto, "FERASE( <cFile> ) --> nSuccess" )
   aadd( aProto, "FRENAME( <cOldFile>, <cNewFile> ) --> nSuccess" )
   aadd( aProto, "FSEEK( <nHandle>, <nOffset>, [<nOrigin>] ) --> nPosition" )
   aadd( aProto, "FILE( <cFileSpec> ) --> lExists" )
   aadd( aProto, "FREADSTR(<nHandle>, <nBytes>) --> cString" )
   aadd( aProto, "ENAME <cOldFile> TO <cNewFile>" )
   aadd( aProto, "ERASE <xcFile>" )
   aadd( aProto, "DELETE FILE <xcFile>" )
   aadd( aProto, "__TYPEFILE( <cFile>, [<lPrint>] ) --> NIL" )
   aadd( aProto, "TYPE <xcFile> [TO PRINTER] [TO FILE <xcDestFile>]" )
   aadd( aProto, "CURDIR( [<cDrive>] )  --> cPath" )
   aadd( aProto, "COPY FILE <cfile> TO <cfile1>" )
   aadd( aProto, "HB_FEOF( <nHandle> ) --> lIsEof" )
   aadd( aProto, "DIRREMOVE( <cDirectory> ) --> nError" )
   aadd( aProto, "DIRCHANGE( <cDirectory> ) --> nError" )
   aadd( aProto, "MAKEDIR( <cDirectory> ) --> nError" )
   aadd( aProto, "ISDISK( <cDrive> ) --> lSuccess" )
   aadd( aProto, "#include <hbapi.h>" )
   aadd( aProto, "void hb_gcFree( void *pMemoryPtr );" )
   aadd( aProto, "void hb_gcCollectAll( void );" )
   aadd( aProto, "void hb_gcItemRef( PHB_ITEM pItem );" )
   aadd( aProto, "HB_GCALL()" )
   aadd( aProto, "HB_HASH( [ <Key1>, <Value1> ], [ <KeyN>, <ValueN> ], ... ) -> hsTable" )
   aadd( aProto, "HB_HHASKEY( <hsTable>, <Key> ) -> lExists" )
   aadd( aProto, "HB_HPOS( <hsTable>, <Key> ) -> nPosition" )
   aadd( aProto, "HB_HGET( <hsTable>, <Key> ) -> <Value>" )
   aadd( aProto, "HB_HGETDEF( <hsTable>, <Key>, [<DefaultValue>] ) -> <Value>" )
   aadd( aProto, "HB_HSET( <hsTable>, <Key>, <Value> ) -> <hsTable>" )
   aadd( aProto, "HB_HDEL( <hsTable>, <Key> ) -> <hsTable>" )
   aadd( aProto, "HB_HKEYAT( <hsTable>, <nPosition> ) -> <Key>" )
   aadd( aProto, "HB_HVALUEAT( <hsTable>, <nPosition>, [<NewValue>] ) -> <Value>" )
   aadd( aProto, "HB_HPAIRAT( <hsTable>, <nPosition> ) -> <aKeyValue>" )
   aadd( aProto, "HB_HDELAT( <hsTable>, <nPosition> ) -> <hsTable>" )
   aadd( aProto, "HB_HKEYS( <hsTable> ) -> <aKeys>" )
   aadd( aProto, "HB_HVALUES( <hsTable> ) -> <aValues>" )
   aadd( aProto, "HB_HFILL( <hsTable>, <Value> ) -> <hsTable>" )
   aadd( aProto, "HB_HCLONE( <hsTable> ) -> <hsDestination>" )
   aadd( aProto, "HB_HCOPY( <hsDestination>, <hsSource>, [<nStart>], [<nCount>] ) -> <hsDestination>" )
   aadd( aProto, "HB_HMERGE( <hsDestination>, <hsSource>, <bBlock>|<nPosition> ) -> <hsDestination>" )
   aadd( aProto, "HB_HEVAL( <hsTable>, <bBlock>, [<nStart>], [<nCount>] ) -> <hsTable>" )
   aadd( aProto, "HB_HSCAN( <hsTable>, <Value>, [<nStart>], [<nCount>, [<lExact>] ) -> nPosition" )
   aadd( aProto, "HB_HSORT( <hsTable> ) -> <hsSortedTable>" )
   aadd( aProto, "HB_HCASEMATCH( <hsTable>, [<lFlag>] ) -> <lPreviousFlag>" )
   aadd( aProto, "HB_HBINARY( <hsTable>, [<lFlag>] ) -> <lPreviousFlag>" )
   aadd( aProto, "HB_HAUTOADD( <hsTable>, [<lFlag>] ) -> <lPreviousFlag>" )
   aadd( aProto, "HB_HALLOCATE( <hsTable>, <nItems> )" )
   aadd( aProto, "HB_HDEFAULT( <hsTable>, <DefaultValue> ) -> <OldDefaultValye>" )
   aadd( aProto, "HB_HSETAUTOADD( <hsTable>, [<lFlag>] ) -> <hsTable>" )
   aadd( aProto, "HB_HSETCASEMATCH( <hsTable>, [<lFlag>] ) -> <hsTable>" )
   aadd( aProto, "HB_HSETBINARY( <hsTable>, [<lFlag>] ) -> <hsTable>" )
   aadd( aProto, "HB_INETINIT() -> lResult" )
   aadd( aProto, "HB_INETCLEANUP()" )
   aadd( aProto, "HB_INETCREATE( [ <nTimeout> ] ) -> SOCKET" )
   aadd( aProto, "HB_INETCLOSE( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETFD( <socket> [, <lNoSocket> ] ) -> nResult" )
   aadd( aProto, "HB_INETSTATUS( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETSTATUS( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETERRORCODE( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETERRORDESC( <socket> ) -> cResult" )
   aadd( aProto, "HB_INETCLEARERROR( <socket> )" )
   aadd( aProto, "HB_INETCOUNT( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETADDRESS( <socket> ) -> cResult" )
   aadd( aProto, "HB_INETPORT( <socket> ) -> cResult" )
   aadd( aProto, "HB_INETTIMEOUT( <socket> [, <nTimeout> ] ) -> nPreviousTimeout" )
   aadd( aProto, "HB_INETCLEARTIMEOUT( <socket> )" )
   aadd( aProto, "HB_INETTIMELIMIT( <socket> [, <nTimeLimit> ) -> NIL" )
   aadd( aProto, "HB_INETCLEARTIMELIMIT( <socket> )" )
   aadd( aProto, "HB_INETPERIODCALLBACK( <socket> [, <xCallback> ] ) -> xPreviousCallback" )
   aadd( aProto, "HB_INETCLEARPERIODCALLBACK( <socket> )" )
   aadd( aProto, "HB_INETGETSNDBUFSIZE( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETGETRCVBUFSIZE( <socket> ) -> nResult" )
   aadd( aProto, "HB_INETSETSNDBUFSIZE( <socket>, <nSize> ) -> nSize" )
   aadd( aProto, "HB_INETSETRCVBUFSIZE( <socket>, nSize ) -> nSize" )
   aadd( aProto, "HB_INETRECV( <socket>, @<cResult>, [ <nAmount> ] ) -> nResult" )
   aadd( aProto, "HB_INETRECVALL( <socket>, @<cResult>, [ <nAmount> ] ) -> nResult" )
   aadd( aProto, "HB_INETRECVLINE( <socket> [, @<nBytesRead>, [, <nMaxLength> [, <nBufSize> ]]] ) -> cResult" )
   aadd( aProto, "HB_INETRECVENDBLOCK( <socket> [, <cBlock >[, @<nBytesRead> [, <nMaxLength> [, <nBufSize> ]]]] ) -> cResult" )
   aadd( aProto, "HB_INETDATAREADY( <socket>, [ <nMillisec> ] ) -> nResult" )
   aadd( aProto, "HB_INETSEND( <socket>, <cBuffer> [, <nLength> ] ) -> nResult" )
   aadd( aProto, "HB_INETSENDALL( <socket>, <cBuffer> [, <nLength> ] ) -> nResult" )
   aadd( aProto, "HB_INETGETHOSTS( <cName> ) -> aHosts" )
   aadd( aProto, "HB_INETGETALIAS( <cName> ) -> aHosts" )
   aadd( aProto, "HB_INETSERVER( <port> [, <cBindAddr> [, <nListenLimit> ]]  ) -> SOCKET" )
   aadd( aProto, "HB_INETACCEPT( <socket> ) -> SOCKET" )
   aadd( aProto, "HB_INETCONNECT( <cAddress>, <nPort> ) -> SOCKET" )
   aadd( aProto, "HB_INETCONNECTIP( <cAddress>, <nPort> ) -> SOCKET" )
   aadd( aProto, "HB_INETDGRAM( [<lBroadcast>] ) -> SOCKET" )
   aadd( aProto, "HB_INETDGRAMBIND( <nPort>, [<cAddress> [, <lBroadcast>] ] ) -> SOCKET" )
   aadd( aProto, "HB_INETDGRAMSEND( <socket>, <cAddress>, <nPort>, <cBuffer> [, <nSize> ] ) -> nBytesSent" )
   aadd( aProto, "HB_INETDGRAMRECV( <socket>, @<cBuffer> [, <nSize> ] ) -> nBytesRead" )
   aadd( aProto, "HB_INETCRLF() -> cResult" )
   aadd( aProto, "HB_INETISSOCKET( <socket> ) -> lResult" )
   aadd( aProto, "hb_parc( int iParam, ... ) --> ( char * )pszResult" )
   aadd( aProto, "hb_parclen( int iParam, ... ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_parcsiz( int iParam, ... ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_pards( int iParam, ... ) --> ( char * )pszResult" )
   aadd( aProto, "hb_pardsbuff( char * szDate, int iParam, ... ) --> ( char * )pszResult" )
   aadd( aProto, "hb_parinfa( int iParamNum, ULONG uiArrayIndex ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_parinfo( int iParam ) --> ( int )iResult" )
   aadd( aProto, "hb_parl( int iParam, ... ) --> ( int )iResult" )
   aadd( aProto, "hb_parnd( int iParam, ... ) --> ( double )dResult" )
   aadd( aProto, "hb_parni( int iParam, ... ) --> ( int )iResult" )
   aadd( aProto, "hb_parnl( int iParam, ... ) --> ( long )lResult" )
   aadd( aProto, "hb_param( int iParam, int iMask ) --> ( PHB_ITEM ) pResult" )
   aadd( aProto, "hb_pcount( void ) --> ( int )iResult" )
   aadd( aProto, "hb_ret( void ) --> void" )
   aadd( aProto, "hb_retc( char * szText )" )
   aadd( aProto, "hb_retclen( char * szText, ULONG ulLen )" )
   aadd( aProto, "hb_retds( char * szDate )" )
   aadd( aProto, "hb_retd( long lYear, long lMonth, long lDay )" )
   aadd( aProto, "hb_retdl( long lJulian )" )
   aadd( aProto, "hb_retl( int iTrueFalse )" )
   aadd( aProto, "hb_retnd( double dNumber )" )
   aadd( aProto, "hb_retni( int iNumber )" )
   aadd( aProto, "hb_retnl( long lNumber )" )
   aadd( aProto, "hb_retnlen( double dNumber, int iWidth, int iDec )" )
   aadd( aProto, "hb_retndlen( double dNumber, int iWidth, int iDec )" )
   aadd( aProto, "hb_retnilen( int iNumber, int iWidth )" )
   aadd( aProto, "hb_retnllen( long lNumber, int iWidth )" )
   aadd( aProto, "hb_reta( ULONG ulLen )" )
   aadd( aProto, "hb_storc( char * szText, int iParam, ... )" )
   aadd( aProto, "hb_storclen( char * szText, ULONG ulLength, int iParam, ... )" )
   aadd( aProto, "hb_stords( char * szDate, int iParam, ... )" )
   aadd( aProto, "hb_storl( int iLogical, int iParam, ... )" )
   aadd( aProto, "hb_storni( int iValue, int iParam, ... )" )
   aadd( aProto, "hb_stornl( long lValue, int iParam, ... )" )
   aadd( aProto, "hb_stornd( double dValue, int iParam, ... )" )
   aadd( aProto, "hb_xinit( void )" )
   aadd( aProto, "hb_xexit( void )" )
   aadd( aProto, "hb_xalloc( ULONG ulSize ) --> ( void * )pResult" )
   aadd( aProto, "hb_xgrab( ULONG ulSize ) --> ( void * )pResult" )
   aadd( aProto, "hb_xfree( void * pMem )" )
   aadd( aProto, "hb_xrealloc( void * pMem, ULONG ulSize ) --> ( void * )pResult" )
   aadd( aProto, "hb_xsize( void * pMem ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_xquery( USHORT uiMode ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_xmemcpy( void * pDestArg, void * pSourceArg, ULONG ulLen ) --> ( void * )pResult" )
   aadd( aProto, "hb_xmemset( void * pDestArg, int iFill, ULONG ulLen ) --> ( void * )pResult" )
   aadd( aProto, "hb_arrayNew( PHB_ITEM pItem, ULONG ulLen ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayLen( PHB_ITEM pArray ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_arrayIsObject( PHB_ITEM pArray ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayAdd( PHB_ITEM pArray, PHB_ITEM pItemValue ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayIns( PHB_ITEM pArray, ULONG ulIndex ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayDel( PHB_ITEM pArray, ULONG ulIndex ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arraySize( PHB_ITEM pArray, ULONG ulLen ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayLast( PHB_ITEM pArray, PHB_ITEM pResult ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayRelease( PHB_ITEM pArray ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arraySet( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayGet( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayGetItemPtr( PHB_ITEM pArray, ULONG ulIndex ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_arrayCopyC( PHB_ITEM pArray, ULONG ulIndex, char * szBuffer, ULONG ulLen ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_arrayGetC( PHB_ITEM pArray, ULONG ulIndex ) --> ( char * )pszResult" )
   aadd( aProto, "hb_arrayGetCPtr( PHB_ITEM pArray, ULONG ulIndex ) --> ( char * )pszResult" )
   aadd( aProto, "hb_arrayGetCLen( PHB_ITEM pArray, ULONG ulIndex ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_arrayGetL( PHB_ITEM pArray, ULONG ulIndex ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayGetNI( PHB_ITEM pArray, ULONG ulIndex ) --> ( int )iResult" )
   aadd( aProto, "hb_arrayGetNL( PHB_ITEM pArray, ULONG ulIndex ) --> ( long )lResult" )
   aadd( aProto, "hb_arrayGetND( PHB_ITEM pArray, ULONG ulIndex ) --> ( double )dResult" )
   aadd( aProto, "hb_arrayGetDS( PHB_ITEM pArray, ULONG ulIndex, char * szDate ) --> ( char * )pszResult" )
   aadd( aProto, "hb_arrayGetDL( PHB_ITEM pArray, ULONG ulIndex ) --> ( long )lResult" )
   aadd( aProto, "hb_arrayGetType( PHB_ITEM pArray, ULONG ulIndex ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_arrayFill( PHB_ITEM pArray, PHB_ITEM pValue, ULONG * pulStart, ULONG * pulCount ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayScan( PHB_ITEM pArray, PHB_ITEM pValue, ULONG * pulStart, ULONG * pulCount ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_arrayEval( PHB_ITEM pArray, PHB_ITEM bBlock, ULONG * pulStart, ULONG * pulCount ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayCopy( PHB_ITEM pSrcArray, PHB_ITEM pDstArray, ULONG * pulStart, ULONG * pulCount, ULONG * pulTarget ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_arrayClone( PHB_ITEM pArray ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_arraySort( PHB_ITEM pArray, ULONG * pulStart, ULONG * pulCount, PHB_ITEM pBlock ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_stricmp( const char * s1, const char * s2 ) --> ( int )iResult" )
   aadd( aProto, "hb_strnicmp( const char * s1, const char * s2, ULONG ulLen ) --> ( int )iResult" )
   aadd( aProto, "hb_strupr( char * pszText ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strdup( const char * pszText ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strMatchRegExp( const char * szString, const char * szMask ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_strEmpty( const char * szText, ULONG ulLen ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_strDescend( char * szStringTo, const char * szStringFrom, ULONG ulLen )" )
   aadd( aProto, "hb_strAt( const char * szSub, ULONG ulSubLen, const char * szText, ULONG ulLen ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_strUpper( char * szText, ULONG ulLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strLower( char * szText, ULONG ulLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strncpyUpper( char * pDest, const char * pSource, ULONG ulLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strVal( const char * szText, ULONG ulLen ) --> ( double )dResult" )
   aadd( aProto, "hb_strLTrim( const char * szText, ULONG * ulLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_strRTrimLen( const char * szText, ULONG ulLen, HB_BOOL bAnySpace ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_numRound( double dResult, int iDec ) --> ( double )dResult" )
   aadd( aProto, "hb_clsReleaseAll( void )" )
   aadd( aProto, "hb_objGetClsName( PHB_ITEM pObject ) --> ( char * )pszResult" )
   aadd( aProto, "hb_objGetMethod( PHB_ITEM pObject, PHB_SYMB pSymMsg ) --> ( PHB_FUNC )hResult" )
   aadd( aProto, "hb_objHasMsg( PHB_ITEM pObject, char * szString ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_dynsymGet( char * szName ) --> ( PHB_DYNS )hResult" )
   aadd( aProto, "hb_dynsymNew( PHB_SYMB pSymbol ) --> ( PHB_DYNS )hResult" )
   aadd( aProto, "hb_dynsymFind( char * szName ) --> ( PHB_DYNS )hResult" )
   aadd( aProto, "hb_dynsymFindName( char * szName ) --> ( PHB_DYNS )hResult" )
   aadd( aProto, "hb_dynsymLog( void )" )
   aadd( aProto, "hb_dynsymRelease( void )" )
   aadd( aProto, "hb_dynsymEval( PHB_DYNS_FUNC pFunction, void * Cargo )" )
   aadd( aProto, "hb_cmdargInit( int argc, char * argv[] )" )
   aadd( aProto, "hb_cmdargARGC( void ) --> ( int )iResult" )
   aadd( aProto, "hb_cmdargARGV( void ) --> ( char ** )ppszResult" )
   aadd( aProto, "hb_cmdargIsInternal( const char * szArg ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_cmdargCheck( const char * pszName ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_cmdargString( const char * pszName ) --> ( char * )pszResult" )
   aadd( aProto, "hb_cmdargNum( const char * pszName ) --> ( int )iResult" )
   aadd( aProto, "hb_cmdargProcessVM( void )" )
   aadd( aProto, "hb_symbolNew( char * szName ) --> ( PHB_SYMB )hResult" )
   aadd( aProto, "hb_codeblockNew( BYTE * pBuffer, USHORT uiLocals, USHORT * pLocalPosTable, PHB_SYMB pSymbols ) --> ( HB_CODEBLOCK_PTR )hResult" )
   aadd( aProto, "hb_codeblockMacroNew( BYTE * pBuffer, USHORT usLen ) --> ( HB_CODEBLOCK_PTR )hResult" )
   aadd( aProto, "hb_codeblockDelete( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_codeblockGetVar( PHB_ITEM pItem, LONG iItemPos ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_codeblockGetRef( PHB_ITEM pItem, PHB_ITEM pRefer ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_codeblockEvaluate( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_codeblockCopy( PHB_ITEM pDest, PHB_ITEM pSource )" )
   aadd( aProto, "hb_memvarValueNew( HB_ITEM_PTR pSource, HB_BOOL bTrueMemvar ) --> ( HB_HANDLE )hResult" )
   aadd( aProto, "hb_memvarValueBaseAddress( void ) --> ( HB_VALUE_PTR * )phResult" )
   aadd( aProto, "hb_memvarsInit( void )" )
   aadd( aProto, "hb_memvarsRelease( void )" )
   aadd( aProto, "hb_memvarsFree( void )" )
   aadd( aProto, "hb_memvarValueIncRef( HB_HANDLE hValue )" )
   aadd( aProto, "hb_memvarValueDecRef( HB_HANDLE hValue )" )
   aadd( aProto, "hb_memvarSetValue( PHB_SYMB pMemvarSymb, HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_memvarGet( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_memvarGetValue( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb )" )
   aadd( aProto, "hb_memvarGetRefer( HB_ITEM_PTR pItem, PHB_SYMB pMemvarSymb )" )
   aadd( aProto, "hb_memvarGetPrivatesBase( void ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_memvarSetPrivatesBase( ULONG ulBase )" )
   aadd( aProto, "hb_memvarNewParameter( PHB_SYMB pSymbol, PHB_ITEM pValue )" )
   aadd( aProto, "hb_memvarGetStrValuePtr( char * szVarName, ULONG *pulLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_memvarCreateFromItem( PHB_ITEM pMemvar, BYTE bScope, PHB_ITEM pValue )" )
   aadd( aProto, "hb_memvarScope( char * szVarName, ULONG ulLength ) --> ( int )iResult" )
   aadd( aProto, "hb_conInit( void )" )
   aadd( aProto, "hb_conRelease( void )" )
   aadd( aProto, "hb_conNewLine( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_conOutStd( char * pStr, ULONG ulLen )" )
   aadd( aProto, "hb_conOutErr( char * pStr, ULONG ulLen )" )
   aadd( aProto, "hb_conSetCursor( HB_BOOL bSetCursor, USHORT usNewCursor ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_conSetColor( char * szColor ) --> ( char * )pszResult" )
   aadd( aProto, "hb_conXSaveRestRelease( void )" )
   aadd( aProto, "hb_compReservedName( char * szName ) --> ( char * )pszResult" )
   aadd( aProto, "hb_procname( int iLevel, char * szName ) --> ( char * )pszResult" )
   aadd( aProto, "hb_macroGetValue( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_macroSetValue( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_macroTextValue( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_macroPushSymbol( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_macroRun( HB_MACRO_PTR pMacro )" )
   aadd( aProto, "hb_macroCompile( char * szString ) --> ( HB_MACRO_PTR )hResult" )
   aadd( aProto, "hb_macroDelete( HB_MACRO_PTR pMacro )" )
   aadd( aProto, "hb_macroTextSubst( char * szString, ULONG *pulStringLen ) --> ( char * )pszResult" )
   aadd( aProto, "hb_macroIsIdent( char * szString ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_macroPopAliasedValue( HB_ITEM_PTR pAlias, HB_ITEM_PTR pVar )" )
   aadd( aProto, "hb_macroPushAliasedValue( HB_ITEM_PTR pAlias, HB_ITEM_PTR pVar )" )
   aadd( aProto, "hb_macroGetType( HB_ITEM_PTR pItem ) --> ( char * )pszResult" )
   aadd( aProto, "hb_gcAlloc( ULONG ulSize, HB_GARBAGE_FUNC_PTR pFunc ) --> ( void * )pResult" )
   aadd( aProto, "hb_gcFree( void *pAlloc )" )
   aadd( aProto, "hb_gcLock( void *pAlloc ) --> ( void * )pResult" )
   aadd( aProto, "hb_gcUnlock( void *pAlloc ) --> ( void * )pResult" )
   aadd( aProto, "hb_gcLockItem( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_gcUnlockItem( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_gcCollect( void )" )
   aadd( aProto, "hb_gcCollectAll( void )" )
   aadd( aProto, "hb_gcItemRef( HB_ITEM_PTR pItem )" )
   aadd( aProto, "hb_vmIsLocalRef( void )" )
   aadd( aProto, "hb_vmIsStaticRef( void )" )
   aadd( aProto, "hb_memvarsIsMemvarRef( void )" )
   aadd( aProto, "hb_clsIsClassRef( void )" )
   aadd( aProto, "hb_codeblockDeleteGarbage( void * Cargo )" )
   aadd( aProto, "hb_arrayReleaseGarbage( void * Cargo )" )
   aadd( aProto, "hb_idleState( void )" )
   aadd( aProto, "hb_idleReset( void )" )
   aadd( aProto, "hb_idleShutDown( void )" )
   aadd( aProto, "hb_verPlatform( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_verCompiler( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_verHarbour( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_verBuildInfo( void )" )
   aadd( aProto, "HB_IS_OF_TYPE( p, t ) --> <see ( ( ( p )->type & ~HB_IT_BYREF ) == t )>" )
   aadd( aProto, "HB_IS_BYREF( p ) --> <see ( ( p )->type & HB_IT_BYREF )>" )
   aadd( aProto, "HB_IS_ARRAY( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_ARRAY )>" )
   aadd( aProto, "HB_IS_NIL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_NIL )>" )
   aadd( aProto, "HB_IS_BLOCK( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_BLOCK )>" )
   aadd( aProto, "HB_IS_DATE( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_DATE )>" )
   aadd( aProto, "HB_IS_DOUBLE( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_DOUBLE )>" )
   aadd( aProto, "HB_IS_INTEGER( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_INTEGER )>" )
   aadd( aProto, "HB_IS_LOGICAL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_LOGICAL )>" )
   aadd( aProto, "HB_IS_LONG( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_LONG )>" )
   aadd( aProto, "HB_IS_NUMERIC( p ) --> <see ( ( p )->type & HB_IT_NUMERIC )>" )
   aadd( aProto, "HB_IS_OBJECT( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_OBJECT )>" )
   aadd( aProto, "HB_IS_STRING( p ) --> <see ( ( ( p )->type & ~( HB_IT_BYREF | HB_IT_MEMOFLAG ) ) == HB_IT_STRING )>" )
   aadd( aProto, "HB_IS_MEMO( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_MEMO )>" )
   aadd( aProto, "HB_IS_SYMBOL( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_SYMBOL )>" )
   aadd( aProto, "HB_IS_MEMVAR( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_MEMVAR )>" )
   aadd( aProto, "HB_IS_POINTER( p ) --> <see HB_IS_OF_TYPE( p, HB_IT_POINTER )>" )
   aadd( aProto, "ISNIL( n ) --> <see ( hb_param( n, HB_IT_ANY ) == NULL || HB_IS_NIL( hb_param( n, HB_IT_ANY ) ) )>" )
   aadd( aProto, "ISCHAR( n ) --> <see ( hb_param( n, HB_IT_STRING ) != NULL )>" )
   aadd( aProto, "ISNUM( n ) --> <see ( hb_param( n, HB_IT_NUMERIC ) != NULL )>" )
   aadd( aProto, "ISLOG( n ) --> <see ( hb_param( n, HB_IT_LOGICAL ) != NULL )>" )
   aadd( aProto, "ISDATE( n ) --> <see ( hb_param( n, HB_IT_DATE ) != NULL )>" )
   aadd( aProto, "ISMEMO( n ) --> <see ( hb_param( n, HB_IT_MEMO ) != NULL )>" )
   aadd( aProto, "ISBYREF( n ) --> <see ( hb_parinfo( n ) & HB_IT_BYREF )>" )
   aadd( aProto, "ISARRAY( n ) --> <see ( hb_param( n, HB_IT_ARRAY ) != NULL )>" )
   aadd( aProto, "ISOBJECT( n ) --> <see ( ISARRAY( n ) && hb_param( n, HB_IT_ARRAY )->asArray.value->uiClass != 0 )>" )
   aadd( aProto, "ISBLOCK( n ) --> <see ( hb_param( n, HB_IT_BLOCK ) != NULL )>" )
   aadd( aProto, "ISPOINTER( n ) --> <see ( hb_param( n, HB_IT_POINTER ) != NULL )>" )
   aadd( aProto, "HB_ISSPACE( c ) --> <see ( ( c ) == ' ' || ( c ) == HB_CHAR_HT || ( c ) == HB_CHAR_LF || ( c ) == HB_CHAR_CR )>" )
   aadd( aProto, "hb_errGetDescription( PHB_ITEM pError ) --> ( char * )pszResult" )
   aadd( aProto, "hb_errGetFileName( PHB_ITEM pError ) --> ( char * )pszResult" )
   aadd( aProto, "hb_errGetFlags( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errGetGenCode( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errGetOperation( PHB_ITEM pError ) --> ( char * )pszResult" )
   aadd( aProto, "hb_errGetOsCode( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errGetSeverity( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errGetSubCode( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errGetSubSystem( PHB_ITEM pError ) --> ( char * )pszResult" )
   aadd( aProto, "hb_errGetTries( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errLaunch( PHB_ITEM pError ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errNew( void ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutArgs( PHB_ITEM pError, USHORT uiArgCount, ... ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutDescription( PHB_ITEM pError, char * szDescription ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutFileName( PHB_ITEM pError, char * szFileName ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutFlags( PHB_ITEM pError, USHORT uiFlags ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutGenCode( PHB_ITEM pError, USHORT uiGenCode ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutOperation( PHB_ITEM pError, char * szOperation ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutOsCode( PHB_ITEM pError, USHORT uiOsCode ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutSeverity( PHB_ITEM pError, USHORT uiSeverity ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutSubCode( PHB_ITEM pError, USHORT uiSubCode ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutSubSystem( PHB_ITEM pError, char * szSubSystem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errPutTries( PHB_ITEM pError, USHORT uiTries ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errRelease( PHB_ITEM pError )" )
   aadd( aProto, "hb_errInit( void )" )
   aadd( aProto, "hb_errExit( void )" )
   aadd( aProto, "hb_errLaunchSubst( PHB_ITEM pError ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errRT_New( USHORT uiSeverity, char * szSubSystem, ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation, USHORT uiOsCode, USHORT uiFlags ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errRT_New_Subst( USHORT uiSeverity, char * szSubSystem, ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation, USHORT uiOsCode, USHORT uiFlags ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errRT_BASE( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errRT_BASE_Ext1( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation, USHORT uiOsCode, USHORT uiFlags ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errRT_BASE_Subst( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_errRT_BASE_SubstR( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation )" )
   aadd( aProto, "hb_errRT_TERM( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation, USHORT uiOSCode, USHORT uiFlags ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errRT_DBCMD( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errRT_TOOLS( ULONG ulGenCode, ULONG ulSubCode, char * szDescription, char * szOperation ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_errInternal( ULONG ulIntCode, char * szText, char * szPar1, char * szPar2 )" )
   aadd( aProto, "hb_errorHandler( HB_ERROR_INFO_PTR pNewHandler ) --> ( HB_ERROR_INFO_PTR )hParam" )
   aadd( aProto, "hb_fsChDir( BYTE * pszDirName ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsChDrv( BYTE nDrive ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsClose( HB_FHANDLE hFileHandle )" )
   aadd( aProto, "hb_fsCommit( HB_FHANDLE hFileHandle )" )
   aadd( aProto, "hb_fsCreate( BYTE * pszFileName, USHORT uiAttribute ) --> ( HB_FHANDLE )hResult" )
   aadd( aProto, "hb_fsCreateTemp( const BYTE * pszDir, const BYTE * pszPrefix, USHORT uiAttribute ) --> ( HB_FHANDLE )hResult" )
   aadd( aProto, "hb_fsCurDir( USHORT uiDrive ) --> ( BYTE * )pszResult" )
   aadd( aProto, "hb_fsCurDirBuff( USHORT uiDrive, BYTE * pbyBuffer, HB_SIZE ulLen ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsCurDrv( void ) --> ( BYTE )cResult" )
   aadd( aProto, "hb_fsDelete( BYTE * pszFileName ) --> ( int )iResult" )
   aadd( aProto, "hb_fsEof( HB_FHANDLE hFileHandle ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsError( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsFile( BYTE * pszFileName ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsFSize( BYTE * pszFileName, HB_BOOL bUseDirEntry ) --> ( HB_FOFFSET )ulResult" )
   aadd( aProto, "hb_fsExtOpen( BYTE * pszFileName, BYTE * pDefExt, USHORT uiFlags, BYTE * pPaths, PHB_ITEM pError ) --> ( HB_FHANDLE )hResult" )
   aadd( aProto, "hb_fsIsDrv( BYTE nDrive ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsIsDevice( HB_FHANDLE hFileHandle ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsLock( HB_FHANDLE hFileHandle, HB_SIZE ulStart, HB_SIZE ulLength, USHORT uiMode ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsMkDir( BYTE * pszDirName ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsOpen( BYTE * pszFileName, USHORT uiFlags ) --> ( HB_FHANDLE )hResult" )
   aadd( aProto, "hb_fsRead( HB_FHANDLE hFileHandle, BYTE * pBuff, USHORT ulCount ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsReadLarge( HB_FHANDLE hFileHandle, BYTE * pBuff, HB_SIZE ulCount ) --> ( HB_SIZE )ulResult" )
   aadd( aProto, "hb_fsRmDir( BYTE * pszDirName ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_fsRename( BYTE * pszOldName, BYTE * pszNewName ) --> ( int )iResult" )
   aadd( aProto, "hb_fsSeekLarge( HB_FHANDLE hFileHandle, HB_FOFFSET lOffset, USHORT uiMode ) --> ( HB_FOFFSET )ulResult" )
   aadd( aProto, "hb_fsTell( HB_FHANDLE hFileHandle ) --> ( HB_FOFFSET )ulResult" )
   aadd( aProto, "hb_fsTempName( BYTE * pszBuffer, const BYTE * pszDir, const BYTE * pszPrefix )" )
   aadd( aProto, "hb_fsSetDevMode( HB_FHANDLE hFileHandle, int iDevMode ) --> int" )
   aadd( aProto, "hb_fsSetDevRaw( HB_FHANDLE hFileHandle )" )
   aadd( aProto, "hb_fsSetDevText( HB_FHANDLE hFileHandle )" )
   aadd( aProto, "hb_fsSetError( USHORT uiError )" )
   aadd( aProto, "hb_fsWrite( HB_FHANDLE hFileHandle, BYTE * pBuff, USHORT ulCount ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_fsWriteLarge( HB_FHANDLE hFileHandle, BYTE * pBuff, HB_SIZE ulCount ) --> ( HB_SIZE )ulResult" )
   aadd( aProto, "hb_fsFNameSplit( char * pszFileName ) --> ( PHB_FNAME )hResult" )
   aadd( aProto, "hb_fsFNameMerge( char * pszFileName, PHB_FNAME pFileName ) --> ( char * )pszResult" )
   aadd( aProto, "hb_fsFLock( h, s, l ) --> <see hb_fsLock( h, s, l, FL_LOCK )>" )
   aadd( aProto, "hb_fsFUnlock( h, s, l ) --> <see hb_fsLock( h, s, l, FL_UNLOCK )>" )
   aadd( aProto, "hb_gtInit( int iFilenoStdin, int iFilenoStdout, int iFilenoStderr )" )
   aadd( aProto, "hb_gtExit( void )" )
   aadd( aProto, "hb_gtAdjustPos( int iHandle, char * pStr, ULONG ulLen )" )
   aadd( aProto, "hb_gtBox( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtBoxD( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtBoxS( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtColorSelect( USHORT uiColorIndex ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtColorToN( char * szColorString ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtDispBegin( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtDispCount( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtDispEnd( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtDrawShadow( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtGetBlink( HB_BOOL * pbBlink ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtGetColorStr( char * pszColorString ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtGetCursor( USHORT * puiCursorShape ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtGetPos( SHORT * piRow, SHORT * piCol ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtIsColor( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gtMaxCol( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtMaxRow( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtPostExt( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtPreExt( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSuspend( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtResume( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtReadKey( HB_inkey_enum eventmask ) --> ( int )iResult" )
   aadd( aProto, "hb_gtRectSize( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, USHORT * puiBuffSize ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtRepChar( USHORT uiRow, USHORT uiCol, BYTE byChar, USHORT uiCount ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtRest( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, void * pScrBuff ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSave( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, void * pScrBuff ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtScrDim( USHORT * puiHeight, USHORT * puiWidth ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtScroll( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, SHORT iRows, SHORT iCols ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetBlink( HB_BOOL bBlink ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetColorStr( char * pszColorString ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetCursor( USHORT uiCursorShape ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetMode( USHORT uiRows, USHORT uiCols ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetPos( SHORT iRow, SHORT iCol ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetPosContext( SHORT iRow, SHORT iCol, SHORT iMode ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetSnowFlag( HB_BOOL bNoSnow ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtTone( double dFrequency, double dDuration )" )
   aadd( aProto, "hb_gtWrite( BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtWriteAt( USHORT uiRow, USHORT uiCol, BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtWriteCon( BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtVersion( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_gtWCreate( HB_GT_RECT * rect, HB_GT_WND ** wnd )" )
   aadd( aProto, "hb_gtWDestroy( HB_GT_WND * wnd )" )
   aadd( aProto, "hb_gtWFlash( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gtWApp( HB_GT_WND ** wnd )" )
   aadd( aProto, "hb_gtWCurrent( HB_GT_WND * wnd )" )
   aadd( aProto, "hb_gtWPos( HB_GT_WND * wnd, HB_GT_RECT * rect )" )
   aadd( aProto, "hb_gtWVis( HB_GT_WND * wnd, USHORT uiStatus ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gtSLR( HB_GT_SLR * pSLR ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtModalRead( void * ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtBeginWrite( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtEndWrite( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtFlushCursor( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetColor( HB_GT_RGB * color ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtGetColor( HB_GT_RGB * color ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gtSetBorder( HB_GT_RGB * color ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_Init( int iFilenoStdin, int iFilenoStdout, int iFilenoStderr )" )
   aadd( aProto, "hb_gt_Exit( void )" )
   aadd( aProto, "hb_gt_AdjustPos( BYTE * pStr, ULONG ulLen ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_Box( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_BoxD( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_BoxS( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_Col( void ) --> ( SHORT )sResult" )
   aadd( aProto, "hb_gt_DispBegin( void )" )
   aadd( aProto, "hb_gt_DispCount( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_DispEnd( void )" )
   aadd( aProto, "hb_gt_GetBlink( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_GetCursorStyle( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_GetScreenHeight( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_GetScreenWidth( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_GetText( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyDst )" )
   aadd( aProto, "hb_gt_HorizLine( USHORT uiRow, USHORT uiLeft, USHORT uiRight, BYTE byChar, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_gt_IsColor( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_PreExt( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_PostExt( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_Suspend( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_Resume( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_Puts( USHORT uiRow, USHORT uiCol, BYTE byAttr, BYTE * pbyStr, ULONG ulLen )" )
   aadd( aProto, "hb_gt_PutText( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbySrc )" )
   aadd( aProto, "hb_gt_ReadKey( HB_inkey_enum eventmask ) --> ( int )iResult" )
   aadd( aProto, "hb_gt_RectSize( USHORT rows, USHORT cols ) --> ( int )iResult" )
   aadd( aProto, "hb_gt_Replicate( USHORT uiTop, USHORT uiLeft, BYTE byAttr, BYTE byChar, ULONG ulLen )" )
   aadd( aProto, "hb_gt_Row( void ) --> ( SHORT )sResult" )
   aadd( aProto, "hb_gt_Scroll( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr, SHORT iRows, SHORT iCols )" )
   aadd( aProto, "hb_gt_SetAttribute( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr )" )
   aadd( aProto, "hb_gt_SetBlink( HB_BOOL bBlink )" )
   aadd( aProto, "hb_gt_SetCursorStyle( USHORT uiCursorShape )" )
   aadd( aProto, "hb_gt_SetMode( USHORT uiRows, USHORT uiCols ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_gt_SetPos( SHORT iRow, SHORT iCol, SHORT iMethod )" )
   aadd( aProto, "hb_gt_Tone( double dFrequency, double dDuration )" )
   aadd( aProto, "hb_gt_Version( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_gt_VertLine( USHORT uiCol, USHORT uiTop, USHORT uiBottom, BYTE byChar, BYTE byAttr ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_inkey( HB_BOOL bWait, double dSeconds, HB_inkey_enum event_mask ) --> ( int )iResult" )
   aadd( aProto, "hb_inkeyGet( void ) --> ( int )iResult" )
   aadd( aProto, "hb_inkeyPut( int ch )" )
   aadd( aProto, "hb_inkeyLast( void ) --> ( int )iResult" )
   aadd( aProto, "hb_inkeyNext( void ) --> ( int )iResult" )
   aadd( aProto, "hb_inkeyPoll( void )" )
   aadd( aProto, "hb_inkeyReset( HB_BOOL allocate )" )
   aadd( aProto, "hb_mouseIsPresent( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_mouseGetCursor( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_mouseSetCursor( HB_BOOL bVisible )" )
   aadd( aProto, "hb_mouseCol( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouseRow( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouseSetPos( int iRow, int iCol )" )
   aadd( aProto, "hb_mouseIsButtonPressed( int iButton ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_mouseCountButton( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouseSetBounds( int iTop, int iLeft, int iBottom, int iRight )" )
   aadd( aProto, "hb_mouseGetBounds( int * piTop, int * piLeft, int * piBottom, int * piRight )" )
   aadd( aProto, "hb_mouse_Init( void )" )
   aadd( aProto, "hb_mouse_Exit( void )" )
   aadd( aProto, "hb_mouse_IsPresent( void ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_mouse_Show( void )" )
   aadd( aProto, "hb_mouse_Hide( void )" )
   aadd( aProto, "hb_mouse_Col( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouse_Row( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouse_SetPos( int iRow, int iCol )" )
   aadd( aProto, "hb_mouse_IsButtonPressed( int iButton ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_mouse_CountButton( void ) --> ( int )iResult" )
   aadd( aProto, "hb_mouse_SetBounds( int iTop, int iLeft, int iBottom, int iRight )" )
   aadd( aProto, "hb_mouse_GetBounds( int * piTop, int * piLeft, int * piBottom, int * piRight )" )
   aadd( aProto, "hb_setkeyInit( void )" )
   aadd( aProto, "hb_setkeyExit( void )" )
   aadd( aProto, "hb_evalLaunch( PHB_EVALINFO pEvalInfo ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_evalNew( PHB_EVALINFO pEvalInfo, PHB_ITEM pItem ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_evalPutParam( PHB_EVALINFO pEvalInfo, PHB_ITEM pItem ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_evalRelease( PHB_EVALINFO pEvalInfo ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_itemDo( PHB_ITEM pItem, USHORT uiPCount, PHB_ITEM pItemArg1, ... ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemDoC( char * szFunc, USHORT uiPCount, PHB_ITEM pItemArg1, ... ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemArrayGet( PHB_ITEM pArray, ULONG ulIndex ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemArrayNew( ULONG ulLen ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemArrayPut( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemCopyC( PHB_ITEM pItem, char * szBuffer, ULONG ulLen ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_itemFreeC( char * szText ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_itemGetC( PHB_ITEM pItem ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemGetCPtr( PHB_ITEM pItem ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemGetCLen( PHB_ITEM pItem ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_itemGetDS( PHB_ITEM pItem, char * szDate ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemGetDL( PHB_ITEM pItem ) --> ( long )lResult" )
   aadd( aProto, "hb_itemGetL( PHB_ITEM pItem ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_itemGetND( PHB_ITEM pItem ) --> ( double )dResult" )
   aadd( aProto, "hb_itemGetNI( PHB_ITEM pItem ) --> ( int )iResult" )
   aadd( aProto, "hb_itemGetNL( PHB_ITEM pItem ) --> ( long )lResult" )
   aadd( aProto, "hb_itemGetNLen( PHB_ITEM pItem, int * piWidth, int * piDec )" )
   aadd( aProto, "hb_itemGetPtr( PHB_ITEM pItem ) --> ( void * )pResult" )
   aadd( aProto, "hb_itemNew( PHB_ITEM pNull ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemInit( PHB_ITEM pItem )" )
   aadd( aProto, "hb_itemPCount( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_itemParam( USHORT uiParam ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutC( PHB_ITEM pItem, char * szText ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutCPtr( PHB_ITEM pItem, char * szText ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutCLPtr( PHB_ITEM pItem, char * szText, ULONG ulLen ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutCL( PHB_ITEM pItem, char * szText, ULONG ulLen ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemSetCMemo( PHB_ITEM pItem )" )
   aadd( aProto, "hb_itemPutD( PHB_ITEM pItem, long lYear, long lMonth, long lDay ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutDS( PHB_ITEM pItem, char * szDate ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutDL( PHB_ITEM pItem, long lJulian ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutL( PHB_ITEM pItem, HB_BOOL bValue ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutND( PHB_ITEM pItem, double dNumber ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNI( PHB_ITEM pItem, int iNumber ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNL( PHB_ITEM pItem, long lNumber ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNLen( PHB_ITEM pItem, double dNumber, int iWidth, int iDec ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNDLen( PHB_ITEM pItem, double dNumber, int iWidth, int iDec ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNILen( PHB_ITEM pItem, int iNumber, int iWidth ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutNLLen( PHB_ITEM pItem, long lNumber, int iWidth ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPutPtr( PHB_ITEM pItem, void * pValue ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemRelease( PHB_ITEM pItem ) --> ( HB_BOOL ) bResult" )
   aadd( aProto, "hb_itemReturn( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemSize( PHB_ITEM pItem ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_itemType( PHB_ITEM pItem ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_itemTypeStr( PHB_ITEM pItem ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemParamPtr( USHORT uiParam, int iMask ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemReturnPtr( void ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemStrCmp( PHB_ITEM pFirst, PHB_ITEM pSecond, HB_BOOL bForceExact ) --> ( int )iResult" )
   aadd( aProto, "hb_itemCopy( PHB_ITEM pDest, PHB_ITEM pSource )" )
   aadd( aProto, "hb_itemClear( PHB_ITEM pItem )" )
   aadd( aProto, "hb_itemUnRef( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemStr( PHB_ITEM pNumber, PHB_ITEM pWidth, PHB_ITEM pDec ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemString( PHB_ITEM pItem, ULONG * ulLen, HB_BOOL * bFreeReq ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemValToStr( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_itemPadConv( PHB_ITEM pItem, char * buffer, ULONG * pulSize ) --> ( char * )pszResult" )
   aadd( aProto, "hb_itemSwap( PHB_ITEM pItem1, PHB_ITEM pItem2 )" )
   aadd( aProto, "hb_langRegister( PHB_LANG lang ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_langDeRegister( char * pszID ) --> ( HB_BOOL )bResult" )
   aadd( aProto, "hb_langFind( char * pszID ) --> ( PHB_LANG )pResult" )
   aadd( aProto, "hb_langSelect( PHB_LANG lang ) --> ( PHB_LANG )pResult" )
   aadd( aProto, "hb_langSelectID( char * pszID ) --> ( char * )pszResult" )
   aadd( aProto, "hb_langDGetItem( int iIndex ) --> ( void * )pResult" )
   aadd( aProto, "hb_langID( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_langName( void ) --> ( char * )pszResult" )
   aadd( aProto, "hb_langDGetErrorDesc( ULONG ulIndex ) --> ( char * )pszResult" )
   aadd( aProto, "HB_LANG_REQUEST( id ) --> <see HB_LANG_REQUEST_( id )>" )
   aadd( aProto, "hb_rddInsertAreaNode( char *szDriver ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_rddGetCurrentWorkAreaNumber( void ) --> ( int )iResult" )
   aadd( aProto, "hb_rddGetCurrentWorkAreaPointer( void ) --> ( void * )pResult" )
   aadd( aProto, "hb_rddSelectWorkAreaAlias( char * szAlias ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddSelectWorkAreaNumber( int iArea ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddSelectWorkAreaSymbol( PHB_SYMB pSymAlias ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddGetFieldValue( HB_ITEM_PTR pItem, PHB_SYMB pFieldSymbol ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddPutFieldValue( HB_ITEM_PTR pItem, PHB_SYMB pFieldSymbol ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddFieldGet( HB_ITEM_PTR pItem, PHB_SYMB pFieldSymbol ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddFieldPut( HB_ITEM_PTR pItem, PHB_SYMB pFieldSymbol ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddShutDown( void )" )
   aadd( aProto, "hb_rddInherit( PRDDFUNCS pTable, PRDDFUNCS pSubTable, PRDDFUNCS pSuperTable, BYTE * szDrvName ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddDisinherit( BYTE * drvName ) --> ( HB_ERRCODE )hResult" )
   aadd( aProto, "hb_rddExtendType( USHORT fieldType ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_rddFieldType( USHORT extendType ) --> ( USHORT )usResult" )
   aadd( aProto, "SELF_BOF( w, sp ) --> <see ( ( *( w )->lprfsHost->bof )( w, sp ) )>" )
   aadd( aProto, "SELF_EOF( w, sp ) --> <see ( ( *( w )->lprfsHost->eof )( w, sp ) )>" )
   aadd( aProto, "SELF_FOUND( w, sp ) --> <see ( ( *( w )->lprfsHost->found )( w, sp ) )>" )
   aadd( aProto, "SELF_GOTO( w, l ) --> <see ( ( *( w )->lprfsHost->go )( w, l ) )>" )
   aadd( aProto, "SELF_GOTOID( w, sp ) --> <see ( ( *( w )->lprfsHost->goToId )( w, sp ) )>" )
   aadd( aProto, "SELF_GOBOTTOM( w ) --> <see ( ( *( w )->lprfsHost->goBottom )( w ) )>" )
   aadd( aProto, "SELF_GOTOP( w ) --> <see ( ( *( w )->lprfsHost->goTop )( w ) )>" )
   aadd( aProto, "SELF_SEEK( w, i1, v, i2 ) --> <see ( ( *( w )->lprfsHost->seek )( w, i1, v, i2 ) )>" )
   aadd( aProto, "SELF_SKIP( w, l ) --> <see ( ( *( w )->lprfsHost->skip )( w, l ) )>" )
   aadd( aProto, "SELF_SKIPFILTER( w, l ) --> <see ( ( *( w )->lprfsHost->skipFilter )( w, l ) )>" )
   aadd( aProto, "SELF_SKIPRAW( w, l ) --> <see ( ( *( w )->lprfsHost->skipRaw )( w, l ) )>" )
   aadd( aProto, "SELF_ADDFIELD( w, ip ) --> <see ( ( *( w )->lprfsHost->addField )( w, ip ) )>" )
   aadd( aProto, "SELF_APPEND( w, l ) --> <see ( ( *( w )->lprfsHost->append )( w, l ) )>" )
   aadd( aProto, "SELF_CREATEFIELDS( w, v ) --> <see ( ( *( w )->lprfsHost->createFields )( w, v ) )>" )
   aadd( aProto, "SELF_DELETE( w ) --> <see ( ( *( w )->lprfsHost->deleterec )( w ) )>" )
   aadd( aProto, "SELF_DELETED( w, sp ) --> <see ( ( *( w )->lprfsHost->deleted )( w, sp ) )>" )
   aadd( aProto, "SELF_FIELDCOUNT( w, sp ) --> <see ( ( *( w )->lprfsHost->fieldCount )( w, sp ) )>" )
   aadd( aProto, "SELF_FIELDDISPLAY( w, sp ) --> <see ( ( *( w )->lprfsHost->fieldDisplay )( w, sp ) )>" )
   aadd( aProto, "SELF_FIELDINFO( w, s1, s2, v ) --> <see ( ( *( w )->lprfsHost->fieldInfo )( w, s1, s2, v ) )>" )
   aadd( aProto, "SELF_FIELDNAME( w, i, bp ) --> <see ( ( *( w )->lprfsHost->fieldName )( w, i, bp ) )>" )
   aadd( aProto, "SELF_FLUSH( w ) --> <see ( ( *( w )->lprfsHost->flush )( w ) )>" )
   aadd( aProto, "SELF_GETREC( w, bpp ) --> <see ( ( *( w )->lprfsHost->getRec )( w, bpp ) )>" )
   aadd( aProto, "SELF_GETVALUE( w, i, v ) --> <see ( ( *( w )->lprfsHost->getValue )( w, i, v ) )>" )
   aadd( aProto, "SELF_GETVARLEN( w, i, lp ) --> <see ( ( *( w )->lprfsHost->getVarLen )( w, i, lp ) )>" )
   aadd( aProto, "SELF_GOCOLD( w ) --> <see ( ( *( w )->lprfsHost->goCold )( w ) )>" )
   aadd( aProto, "SELF_GOHOT( w ) --> <see ( ( *( w )->lprfsHost->goHot )( w ) )>" )
   aadd( aProto, "SELF_PUTVALUE( w, i, v ) --> <see ( ( *( w )->lprfsHost->putValue )( w, i, v ) )>" )
   aadd( aProto, "SELF_PUTREC( w, bp ) --> <see ( ( *( w )->lprfsHost->putRec )( w, bp ) )>" )
   aadd( aProto, "SELF_RECALL( w ) --> <see ( ( *( w )->lprfsHost->recall )( w ) )>" )
   aadd( aProto, "SELF_RECCOUNT( w, sp ) --> <see ( ( *( w )->lprfsHost->reccount )( w, sp ) )>" )
   aadd( aProto, "SELF_RECINFO( w, v1, i, v2 ) --> <see ( ( *( w )->lprfsHost->recInfo )( w, v1, i, v2 ) )>" )
   aadd( aProto, "SELF_RECNO( w, i ) --> <see ( ( *( w )->lprfsHost->recno )( w, i ) )>" )
   aadd( aProto, "SELF_SETFIELDEXTENT( w, s ) --> <see ( ( *( w )->lprfsHost->setFieldExtent )( w, s ) )>" )
   aadd( aProto, "SELF_ALIAS( w, bp ) --> <see ( ( *( w )->lprfsHost->alias )( w, bp ) )>" )
   aadd( aProto, "SELF_CLOSE( w ) --> <see ( ( *( w )->lprfsHost->close )( w ) )>" )
   aadd( aProto, "SELF_CREATE( w, ip ) --> <see ( ( *( w )->lprfsHost->create )( w, ip ) )>" )
   aadd( aProto, "SELF_INFO( w, i, g ) --> <see ( ( *( w )->lprfsHost->info )( w, i, g ) )>" )
   aadd( aProto, "SELF_NEW( w ) --> <see ( ( *( w )->lprfsHost->newarea )( w ) )>" )
   aadd( aProto, "SELF_OPEN( w, ip ) --> <see ( ( *( w )->lprfsHost->open )( w, ip ) )>" )
   aadd( aProto, "SELF_RELEASE( w ) --> <see ( ( *( w )->lprfsHost->release )( w ) )>" )
   aadd( aProto, "SELF_STRUCTSIZE( w, sp ) --> <see ( ( *( w )->lprfsHost->structSize )( w, sp ) )>" )
   aadd( aProto, "SELF_SYSNAME( w, bp ) --> <see ( ( *( w )->lprfsHost->sysName )( w, bp ) )>" )
   aadd( aProto, "SELF_DBEVAL( w, ip ) --> <see ( ( *( w )->lprfsHost->dbEval )( w, ip ) )>" )
   aadd( aProto, "SELF_PACK( w ) --> <see ( ( *( w )->lprfsHost->pack )( w ) )>" )
   aadd( aProto, "SELF_PACKREC( w, l, sp ) --> <see ( ( *( w )->lprfsHost->packRec )( w, l, sp ) )>" )
   aadd( aProto, "SELF_SORT( w, ip ) --> <see ( ( *( w )->lprfsHost->sort )( w, ip ) )>" )
   aadd( aProto, "SELF_TRANS( w, ip ) --> <see ( ( *( w )->lprfsHost->trans )( w, ip ) )>" )
   aadd( aProto, "SELF_TRANSREC( w, ip ) --> <see ( ( *( w )->lprfsHost->transRec )( w, ip ) )>" )
   aadd( aProto, "SELF_ZAP( w ) --> <see ( ( *( w )->lprfsHost->zap )( w ) )>" )
   aadd( aProto, "SELF_CHILDEND( w, ip ) --> <see ( ( *( w )->lprfsHost->childEnd )( w, ip ) )>" )
   aadd( aProto, "SELF_CHILDSTART( w, ip ) --> <see ( ( *( w )->lprfsHost->childStart )( w, ip ) )>" )
   aadd( aProto, "SELF_CHILDSYNC( w, ip ) --> <see ( ( *( w )->lprfsHost->childSync )( w, ip ) )>" )
   aadd( aProto, "SELF_SYNCCHILDREN( w ) --> <see ( ( *( w )->lprfsHost->syncChildren )( w ) )>" )
   aadd( aProto, "SELF_CLEARREL( w ) --> <see ( ( *( w )->lprfsHost->clearRel )( w ) )>" )
   aadd( aProto, "SELF_FORCEREL( w ) --> <see ( ( *( w )->lprfsHost->forceRel )( w ) )>" )
   aadd( aProto, "SELF_RELAREA( w, s, sp ) --> <see ( ( *( w )->lprfsHost->relArea )( w, s, sp ) )>" )
   aadd( aProto, "SELF_RELEVAL( w, ip ) --> <see ( ( *( w )->lprfsHost->relEval )( w, ip ) )>" )
   aadd( aProto, "SELF_RELTEXT( w, s, bp ) --> <see ( ( *( w )->lprfsHost->relText )( w, s, bp ) )>" )
   aadd( aProto, "SELF_SETREL( w, ip ) --> <see ( ( *( w )->lprfsHost->setRel )( w, ip ) )>" )
   aadd( aProto, "SELF_ORDLSTADD( w, lp ) --> <see ( ( *( w )->lprfsHost->orderListAdd )( w, lp ) )>" )
   aadd( aProto, "SELF_ORDLSTDELETE( w, lp ) --> <see ( ( *( w )->lprfsHost->orderListDelete )( w, lp ) )>" )
   aadd( aProto, "SELF_ORDLSTFOCUS( w, lp ) --> <see ( ( *( w )->lprfsHost->orderListFocus )( w, lp ) )>" )
   aadd( aProto, "SELF_ORDLSTREBUILD( w ) --> <see ( ( *( w )->lprfsHost->orderListRebuild )( w ) )>" )
   aadd( aProto, "SELF_ORDLSTCLEAR( w ) --> <see ( ( *( w )->lprfsHost->orderListClear )( w ) )>" )
   aadd( aProto, "SELF_ORDSETCOND( w, ip ) --> <see ( ( *( w )->lprfsHost->orderCondition )( w, ip ) )>" )
   aadd( aProto, "SELF_ORDCREATE( w, ip ) --> <see ( ( *( w )->lprfsHost->orderCreate )( w, ip ) )>" )
   aadd( aProto, "SELF_ORDDESTROY( w, p ) --> <see ( ( *( w )->lprfsHost->orderDestroy )( w, p ) )>" )
   aadd( aProto, "SELF_ORDINFO( w, i, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, i, p ) )>" )
   aadd( aProto, "SELF_ORDEXPR( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_EXPRESSION, p ) )>" )
   aadd( aProto, "SELF_ORDCOND( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_CONDITION,  p ) )>" )
   aadd( aProto, "SELF_ORDRECNO( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_RECNO,      p ) )>" )
   aadd( aProto, "SELF_ORDPOS( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_POSITION,   p ) )>" )
   aadd( aProto, "SELF_ORDNUMBER( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_NUMBER,     p ) )>" )
   aadd( aProto, "SELF_ORDNAME( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_NAME,       p ) )>" )
   aadd( aProto, "SELF_ORDBAGNAME( w, p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_BAGNAME,    p ) )>" )
   aadd( aProto, "SELF_ORDBAGEXT( w,  p ) --> <see ( ( *( w )->lprfsHost->orderInfo )( w, DBOI_BAGEXT,     p ) )>" )
   aadd( aProto, "SELF_CLEARFILTER( w ) --> <see ( ( *( w )->lprfsHost->clearFilter )( w ) )>" )
   aadd( aProto, "SELF_CLEARLOCATE( w ) --> <see ( ( *( w )->lprfsHost->clearLocate )( w ) )>" )
   aadd( aProto, "SELF_CLEARSCOPE( w ) --> <see ( ( *( w )->lprfsHost->clearScope )( w ) )>" )
   aadd( aProto, "SELF_COUNTSCOPE( w, ip, lp ) --> <see ( ( *( w )->lprfsHost->countScope )( w, ip, lp ) )>" )
   aadd( aProto, "SELF_FILTERTEXT( w, bp ) --> <see ( ( *( w )->lprfsHost->filterText )( w, bp ) )>" )
   aadd( aProto, "SELF_SCOPEINFO( w, i, v ) --> <see ( ( *( w )->lprfsHost->scopeInfo )( w, i, v ) )>" )
   aadd( aProto, "SELF_SETFILTER( w, ip ) --> <see ( ( *( w )->lprfsHost->setFilter )( w, ip ) )>" )
   aadd( aProto, "SELF_SETLOCATE( w, ip ) --> <see ( ( *( w )->lprfsHost->setLocate )( w, ip ) )>" )
   aadd( aProto, "SELF_SETSCOPE( w, ip ) --> <see ( ( *( w )->lprfsHost->setScope )( w, ip ) )>" )
   aadd( aProto, "SELF_SKIPSCOPE( w, bp, l ) --> <see ( ( *( w )->lprfsHost->skipScope )( w, bp, l ) )>" )
   aadd( aProto, "SELF_COMPILE( w, bp ) --> <see ( ( *( w )->lprfsHost->compile )( w, bp ) )>" )
   aadd( aProto, "SELF_ERROR( w, ip ) --> <see ( ( *( w )->lprfsHost->error )( w, ip ) )>" )
   aadd( aProto, "SELF_EVALBLOCK( w, v ) --> <see ( ( *( w )->lprfsHost->evalBlock )( w, v ) )>" )
   aadd( aProto, "SELF_GETLOCKS( w, g ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_GETLOCKARRAY, g ) )>" )
   aadd( aProto, "SELF_RAWLOCK( w, i, l ) --> <see ( ( *( w )->lprfsHost->rawlock )( w, i, l ) )>" )
   aadd( aProto, "SELF_LOCK( w, sp ) --> <see ( ( *( w )->lprfsHost->lock )( w, sp ) )>" )
   aadd( aProto, "SELF_UNLOCK( w, l ) --> <see ( ( *( w )->lprfsHost->unlock )( w, l ) )>" )
   aadd( aProto, "SELF_CLOSEMEMFILE( w ) --> <see ( ( *( w )->lprfsHost->closeMemFile )( w ) )>" )
   aadd( aProto, "SELF_CREATEMEMFILE( w, bp ) --> <see ( ( *( w )->lprfsHost->createMemFile )( w, bp ) )>" )
   aadd( aProto, "SELF_GETVALUEFILE( w, i, bp ) --> <see ( ( *( w )->lprfsHost->getValueFile )( w, i, bp ) )>" )
   aadd( aProto, "SELF_OPENMEMFILE( w, bp ) --> <see ( ( *( w )->lprfsHost->openMemFile )( w, bp ) )>" )
   aadd( aProto, "SELF_PUTVALUEFILE( w, i, bp ) --> <see ( ( *( w )->lprfsHost->putValueFile )( w, i, bp ) )>" )
   aadd( aProto, "SELF_READDBHEADER( w ) --> <see ( ( *( w )->lprfsHost->readDBHeader )( w ) )>" )
   aadd( aProto, "SELF_WRITEDBHEADER( w ) --> <see ( ( *( w )->lprfsHost->writeDBHeader )( w ) )>" )
   aadd( aProto, "SELF_RECSIZE( w, lp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_GETRECSIZE, lp ) )>" )
   aadd( aProto, "SELF_HEADERSIZE( w, fp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_GETHEADERSIZE, fp ) )>" )
   aadd( aProto, "SELF_LUPDATE( w, fp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_LASTUPDATE, fp ) )>" )
   aadd( aProto, "SELF_SETDELIM( w, fp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_SETDELIMITER, fp ) )>" )
   aadd( aProto, "SELF_GETDELIM( w, fp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_GETDELIMITER, fp ) )>" )
   aadd( aProto, "SELF_TABLEEXT( w, fp ) --> <see ( ( *( w )->lprfsHost->info )( w, DBI_TABLEEXT, fp ) )>" )
   aadd( aProto, "SUPER_BOF( w, sp ) --> <see ( ( *( SUPERTABLE )->bof )( w, sp ) )>" )
   aadd( aProto, "SUPER_EOF( w, sp ) --> <see ( ( *( SUPERTABLE )->eof )( w, sp ) )>" )
   aadd( aProto, "SUPER_FOUND( w, sp ) --> <see ( ( *( SUPERTABLE )->found )( w, sp ) )>" )
   aadd( aProto, "SUPER_GOTO( w, l ) --> <see ( ( *( SUPERTABLE )->go )( w, l ) )>" )
   aadd( aProto, "SUPER_GOTOID( w, sp ) --> <see ( ( *( SUPERTABLE )->goToId )( w, sp ) )>" )
   aadd( aProto, "SUPER_GOBOTTOM( w ) --> <see ( ( *( SUPERTABLE )->goBottom )( w ) )>" )
   aadd( aProto, "SUPER_GOTOP( w ) --> <see ( ( *( SUPERTABLE )->goTop )( w ) )>" )
   aadd( aProto, "SUPER_SEEK( w, i1, v, i2 ) --> <see ( ( *( SUPERTABLE )->seek )( w, i1, v, i2 ) )>" )
   aadd( aProto, "SUPER_SKIP( w, l ) --> <see ( ( *( SUPERTABLE )->skip )( w, l ) )>" )
   aadd( aProto, "SUPER_SKIPFILTER( w, l ) --> <see ( ( *( SUPERTABLE )->skipFilter )( w, l ) )>" )
   aadd( aProto, "SUPER_SKIPRAW( w, l ) --> <see ( ( *( SUPERTABLE )->skipRaw )( w, l ) )>" )
   aadd( aProto, "SUPER_ADDFIELD( w, ip ) --> <see ( ( *( SUPERTABLE )->addField )( w, ip ) )>" )
   aadd( aProto, "SUPER_APPEND( w, l ) --> <see ( ( *( SUPERTABLE )->append )( w, l ) )>" )
   aadd( aProto, "SUPER_CREATEFIELDS( w, v ) --> <see ( ( *( SUPERTABLE )->createFields )( w, v ) )>" )
   aadd( aProto, "SUPER_DELETE( w ) --> <see ( ( *( SUPERTABLE )->deleterec )( w ) )>" )
   aadd( aProto, "SUPER_DELETED( w, sp ) --> <see ( ( *( SUPERTABLE )->deleted )( w, sp ) )>" )
   aadd( aProto, "SUPER_FIELDCOUNT( w, sp ) --> <see ( ( *( SUPERTABLE )->fieldCount )( w, sp ) )>" )
   aadd( aProto, "SUPER_FIELDDISPLAY( w, sp ) --> <see ( ( *( SUPERTABLE )->fieldDisplay )( w, sp ) )>" )
   aadd( aProto, "SUPER_FIELDINFO( w, s1, s2, v ) --> <see ( ( *( SUPERTABLE )->fieldInfo )( w, s1, s2, v ) )>" )
   aadd( aProto, "SUPER_FIELDNAME( w, i, bp ) --> <see ( ( *( SUPERTABLE )->fieldName )( w, i, bp ) )>" )
   aadd( aProto, "SUPER_FLUSH( w ) --> <see ( ( *( SUPERTABLE )->flush )( w ) )>" )
   aadd( aProto, "SUPER_GETREC( w, bpp ) --> <see ( ( *( SUPERTABLE )->getRec )( w, bpp ) )>" )
   aadd( aProto, "SUPER_GETVALUE( w, i, v ) --> <see ( ( *( SUPERTABLE )->getValue )( w, i, v ) )>" )
   aadd( aProto, "SUPER_GETVARLEN( w, i, lp ) --> <see ( ( *( SUPERTABLE )->getVarLen )( w, i, lp ) )>" )
   aadd( aProto, "SUPER_GOCOLD( w ) --> <see ( ( *( SUPERTABLE )->goCold )( w ) )>" )
   aadd( aProto, "SUPER_GOHOT( w ) --> <see ( ( *( SUPERTABLE )->goHot )( w ) )>" )
   aadd( aProto, "SUPER_PUTVALUE( w, i, v ) --> <see ( ( *( SUPERTABLE )->putValue )( w, i, v ) )>" )
   aadd( aProto, "SUPER_PUTREC( w, bp ) --> <see ( ( *( SUPERTABLE )->putRec )( w, bp ) )>" )
   aadd( aProto, "SUPER_RECALL( w ) --> <see ( ( *( SUPERTABLE )->recall )( w ) )>" )
   aadd( aProto, "SUPER_RECCOUNT( w, sp ) --> <see ( ( *( SUPERTABLE )->reccount )( w, sp ) )>" )
   aadd( aProto, "SUPER_RECINFO( w, v1, i, v2 ) --> <see ( ( *( SUPERTABLE )->recInfo )( w, v1, i, v2 ) )>" )
   aadd( aProto, "SUPER_RECNO( w, sp ) --> <see ( ( *( SUPERTABLE )->recno )( w, sp ) )>" )
   aadd( aProto, "SUPER_SETFIELDEXTENT( w, s ) --> <see ( ( *( SUPERTABLE )->setFieldExtent )( w, s ) )>" )
   aadd( aProto, "SUPER_ALIAS( w, bp ) --> <see ( ( *( SUPERTABLE )->alias )( w, bp ) )>" )
   aadd( aProto, "SUPER_CLOSE( w ) --> <see ( ( *( SUPERTABLE )->close )( w ) )>" )
   aadd( aProto, "SUPER_CREATE( w, ip ) --> <see ( ( *( SUPERTABLE )->create )( w, ip ) )>" )
   aadd( aProto, "SUPER_INFO( w, i, g ) --> <see ( ( *( SUPERTABLE )->info )( w, i, g ) )>" )
   aadd( aProto, "SUPER_NEW( w ) --> <see ( ( *( SUPERTABLE )->newarea )( w ) )>" )
   aadd( aProto, "SUPER_OPEN( w, ip ) --> <see ( ( *( SUPERTABLE )->open )( w, ip ) )>" )
   aadd( aProto, "SUPER_RELEASE( w ) --> <see ( ( *( SUPERTABLE )->release )( w ) )>" )
   aadd( aProto, "SUPER_STRUCTSIZE( w, sp ) --> <see ( ( *( SUPERTABLE )->structSize )( w, sp ) )>" )
   aadd( aProto, "SUPER_SYSNAME( w, bp ) --> <see ( ( *( SUPERTABLE )->sysName )( w, bp ) )>" )
   aadd( aProto, "SUPER_DBEVAL( w, ip ) --> <see ( ( *( SUPERTABLE )->dbEval )( w, ip ) )>" )
   aadd( aProto, "SUPER_PACK( w ) --> <see ( ( *( SUPERTABLE )->pack )( w ) )>" )
   aadd( aProto, "SUPER_PACKREC( w, l, sp ) --> <see ( ( *( SUPERTABLE )->packRec )( w, l, sp ) )>" )
   aadd( aProto, "SUPER_SORT( w, ip ) --> <see ( ( *( SUPERTABLE )->sort )( w, ip ) )>" )
   aadd( aProto, "SUPER_TRANS( w, ip ) --> <see ( ( *( SUPERTABLE )->trans )( w, ip ) )>" )
   aadd( aProto, "SUPER_TRANSREC( w, ip ) --> <see ( ( *( SUPERTABLE )->transRec )( w, ip ) )>" )
   aadd( aProto, "SUPER_ZAP( w ) --> <see ( ( *( SUPERTABLE )->zap )( w ) )>" )
   aadd( aProto, "SUPER_CHILDEND( w, ip ) --> <see ( ( *( SUPERTABLE )->childEnd )( w, ip ) )>" )
   aadd( aProto, "SUPER_CHILDSTART( w, ip ) --> <see ( ( *( SUPERTABLE )->childStart )( w, ip ) )>" )
   aadd( aProto, "SUPER_CHILDSYNC( w, ip ) --> <see ( ( *( SUPERTABLE )->childSync )( w, ip ) )>" )
   aadd( aProto, "SUPER_SYNCCHILDREN( w ) --> <see ( ( *( SUPERTABLE )->syncChildren )( w ) )>" )
   aadd( aProto, "SUPER_CLEARREL( w ) --> <see ( ( *( SUPERTABLE )->clearRel )( w ) )>" )
   aadd( aProto, "SUPER_FORCEREL( w ) --> <see ( ( *( SUPERTABLE )->forceRel )( w ) )>" )
   aadd( aProto, "SUPER_RELAREA( w, s, sp ) --> <see ( ( *( SUPERTABLE )->relArea )( w, s, sp ) )>" )
   aadd( aProto, "SUPER_RELEVAL( w, ip ) --> <see ( ( *( SUPERTABLE )->relEval )( w, ip ) )>" )
   aadd( aProto, "SUPER_RELTEXT( w, s, bp ) --> <see ( ( *( SUPERTABLE )->relText )( w, s, bp ) )>" )
   aadd( aProto, "SUPER_SETREL( w, ip ) --> <see ( ( *( SUPERTABLE )->setRel )( w, ip ) )>" )
   aadd( aProto, "SUPER_ORDLSTADD( w, lp ) --> <see ( ( *( SUPERTABLE )->orderListAdd )( w, lp ) )>" )
   aadd( aProto, "SUPER_ORDLSTDELETE( w, lp ) --> <see ( ( *( SUPERTABLE )->orderListDelete )( w, lp ) )>" )
   aadd( aProto, "SUPER_ORDLSTFOCUS( w, lp ) --> <see ( ( *( SUPERTABLE )->orderListFocus )( w, lp ) )>" )
   aadd( aProto, "SUPER_ORDLSTREBUILD( w ) --> <see ( ( *( SUPERTABLE )->orderListRebuild )( w ) )>" )
   aadd( aProto, "SUPER_ORDLSTCLEAR( w ) --> <see ( ( *( SUPERTABLE )->orderListClear )( w ) )>" )
   aadd( aProto, "SUPER_ORDSETCOND( w, ip ) --> <see ( ( *( SUPERTABLE )->orderCondition )( w, ip ) )>" )
   aadd( aProto, "SUPER_ORDCREATE( w, ip ) --> <see ( ( *( SUPERTABLE )->orderCreate )( w, ip ) )>" )
   aadd( aProto, "SUPER_ORDDELETE( w, ip ) --> <see ( ( *( SUPERTABLE )->orderDelete )( w, ip ) )>" )
   aadd( aProto, "SUPER_ORDINFO( w, i, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, i, p ) )>" )
   aadd( aProto, "SUPER_ORDEXPR( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_EXPRESSION, p ) )>" )
   aadd( aProto, "SUPER_ORDCOND( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_CONDITION,  p ) )>" )
   aadd( aProto, "SUPER_ORDRECNO( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_RECNO,      p ) )>" )
   aadd( aProto, "SUPER_ORDPOS( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_POSITION,   p ) )>" )
   aadd( aProto, "SUPER_ORDNUMBER( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_NUMBER,     p ) )>" )
   aadd( aProto, "SUPER_ORDNAME( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_NAME,       p ) )>" )
   aadd( aProto, "SUPER_ORDBAGNAME( w, p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_BAGNAME,    p ) )>" )
   aadd( aProto, "SUPER_ORDBAGEXT( w,  p ) --> <see ( ( *( SUPERTABLE )->orderInfo )( w, DBOI_BAGEXT,     p ) )>" )
   aadd( aProto, "SUPER_CLEARFILTER( w ) --> <see ( ( *( SUPERTABLE )->clearFilter )( w ) )>" )
   aadd( aProto, "SUPER_CLEARLOCATE( w ) --> <see ( ( *( SUPERTABLE )->clearLocate )( w ) )>" )
   aadd( aProto, "SUPER_CLEARSCOPE( w ) --> <see ( ( *( SUPERTABLE )->clearScope )( w ) )>" )
   aadd( aProto, "SUPER_COUNTSCOPE( w, ip, lp ) --> <see ( ( *( SUPERTABLE )->countScope )( w, ip, lp ) )>" )
   aadd( aProto, "SUPER_FILTERTEXT( w, bp ) --> <see ( ( *( SUPERTABLE )->filterText )( w, bp ) )>" )
   aadd( aProto, "SUPER_SCOPEINFO( w, i, v ) --> <see ( ( *( SUPERTABLE )->scopeInfo )( w, i, v ) )>" )
   aadd( aProto, "SUPER_SETFILTER( w, ip ) --> <see ( ( *( SUPERTABLE )->setFilter )( w, ip ) )>" )
   aadd( aProto, "SUPER_SETLOCATE( w, ip ) --> <see ( ( *( SUPERTABLE )->setLocate )( w, ip ) )>" )
   aadd( aProto, "SUPER_SETSCOPE( w, ip ) --> <see ( ( *( SUPERTABLE )->setScope )( w, ip ) )>" )
   aadd( aProto, "SUPER_SKIPSCOPE( w, bp, l ) --> <see ( ( *( SUPERTABLE )->skipScope )( w, bp, l ) )>" )
   aadd( aProto, "SUPER_COMPILE( w, bp ) --> <see ( ( *( SUPERTABLE )->compile )( w, bp ) )>" )
   aadd( aProto, "SUPER_ERROR( w, ip ) --> <see ( ( *( SUPERTABLE )->error )( w, ip ) )>" )
   aadd( aProto, "SUPER_EVALBLOCK( w, v ) --> <see ( ( *( SUPERTABLE )->evalBlock )( w, v ) )>" )
   aadd( aProto, "SUPER_GETLOCKS( w, g ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_GETLOCKARRAY, g ) )>" )
   aadd( aProto, "SUPER_RAWLOCK( w, i, l ) --> <see ( ( *( SUPERTABLE )->rawlock )( w, i, l ) )>" )
   aadd( aProto, "SUPER_LOCK( w, sp ) --> <see ( ( *( SUPERTABLE )->lock )( w, sp ) )>" )
   aadd( aProto, "SUPER_UNLOCK( w ) --> <see ( ( *( SUPERTABLE )->unlock )( w ) )>" )
   aadd( aProto, "SUPER_CLOSEMEMFILE( w ) --> <see ( ( *( SUPERTABLE )->closeMemFile )( w ) )>" )
   aadd( aProto, "SUPER_CREATEMEMFILE( w, bp ) --> <see ( ( *( SUPERTABLE )->createMemFile )( w, bp ) )>" )
   aadd( aProto, "SUPER_GETVALUEFILE( w, i, bp ) --> <see ( ( *( SUPERTABLE )->getValueFile )( w, i, bp ) )>" )
   aadd( aProto, "SUPER_OPENMEMFILE( w, bp ) --> <see ( ( *( SUPERTABLE )->openMemFile )( w, bp ) )>" )
   aadd( aProto, "SUPER_PUTVALUEFILE( w, i, bp ) --> <see ( ( *( SUPERTABLE )->putValueFile )( w, i, bp ) )>" )
   aadd( aProto, "SUPER_READDBHEADER( w ) --> <see ( ( *( SUPERTABLE )->readDBHeader )( w ) )>" )
   aadd( aProto, "SUPER_WRITEDBHEADER( w ) --> <see ( ( *( SUPERTABLE )->writeDBHeader )( w ) )>" )
   aadd( aProto, "SUPER_RECSIZE( w, lp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_GETRECSIZE, lp ) )>" )
   aadd( aProto, "SUPER_HEADERSIZE( w, fp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_GETHEADERSIZE, fp ) )>" )
   aadd( aProto, "SUPER_LUPDATE( w, fp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_LASTUPDATE, fp ) )>" )
   aadd( aProto, "SUPER_SETDELIM( w, fp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_SETDELIMITER, fp ) )>" )
   aadd( aProto, "SUPER_GETDELIM( w, fp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_GETDELIMITER, fp ) )>" )
   aadd( aProto, "SUPER_TABLEEXT( w, fp ) --> <see ( ( *( SUPERTABLE )->info )( w, DBI_TABLEEXT, fp ) )>" )
   aadd( aProto, "_evalLaunch --> <see hb_evalLaunch>" )
   aadd( aProto, "_evalNew --> <see hb_evalNew>" )
   aadd( aProto, "_evalPutParam --> <see hb_evalPutParam>" )
   aadd( aProto, "_evalRelease --> <see hb_evalRelease>" )
   aadd( aProto, "_itemArrayGet --> <see hb_itemArrayGet>" )
   aadd( aProto, "_itemArrayNew --> <see hb_itemArrayNew>" )
   aadd( aProto, "_itemArrayPut --> <see hb_itemArrayPut>" )
   aadd( aProto, "_itemNew --> <see hb_itemNew>" )
   aadd( aProto, "_itemParam --> <see hb_itemParam>" )
   aadd( aProto, "_itemRelease --> <see hb_itemRelease>" )
   aadd( aProto, "_itemReturn --> <see hb_itemReturn>" )
   aadd( aProto, "_itemSize --> <see hb_itemSize>" )
   aadd( aProto, "_itemType --> <see hb_itemType>" )
   aadd( aProto, "_reta --> <see hb_reta>" )
   aadd( aProto, "_pcount --> <see hb_pcount>" )
   aadd( aProto, "_tchdir --> <see hb_fsChDir>" )
   aadd( aProto, "_tchdrv --> <see hb_fsChDrv>" )
   aadd( aProto, "_tclose --> <see hb_fsClose>" )
   aadd( aProto, "_tcommit --> <see hb_fsCommit>" )
   aadd( aProto, "_tcreat --> <see hb_fsCreate>" )
   aadd( aProto, "_tcurdir --> <see hb_fsCurDir>" )
   aadd( aProto, "_tcurdrv --> <see hb_fsCurDrv>" )
   aadd( aProto, "_tdevraw --> <see hb_fsSetDevRaw>" )
   aadd( aProto, "_terror --> <see hb_fsError>" )
   aadd( aProto, "_tisdevice --> <see hb_fsIsDevice>" )
   aadd( aProto, "_tisdrv --> <see hb_fsIsDrv>" )
   aadd( aProto, "_tlock --> <see hb_fsLock>" )
   aadd( aProto, "_tlseek --> <see hb_fsSeek>" )
   aadd( aProto, "_tmkdir --> <see hb_fsMkDir>" )
   aadd( aProto, "_topen --> <see hb_fsOpen>" )
   aadd( aProto, "_tread --> <see hb_fsRead>" )
   aadd( aProto, "_trename --> <see hb_fsRename>" )
   aadd( aProto, "_trmdir --> <see hb_fsRmDir>" )
   aadd( aProto, "_tunlink --> <see hb_fsDelete>" )
   aadd( aProto, "_twrite --> <see hb_fsWrite>" )
   aadd( aProto, "_bset --> <see memset>" )
   aadd( aProto, "_bmove --> <see memmove>" )
   aadd( aProto, "_bcopy --> <see memcpy>" )
   aadd( aProto, "_bcmp --> <see memcmp>" )
   aadd( aProto, "_gtBox --> <see hb_gtBox>" )
   aadd( aProto, "_gtColorSelect --> <see hb_gtColorSelect>" )
   aadd( aProto, "_gtDispBegin --> <see hb_gtDispBegin>" )
   aadd( aProto, "_gtDispCount --> <see hb_gtDispCount>" )
   aadd( aProto, "_gtDispEnd --> <see hb_gtDispEnd>" )
   aadd( aProto, "_gtGetColorStr --> <see hb_gtGetColorStr>" )
   aadd( aProto, "_gtGetCursor --> <see hb_gtGetCursor>" )
   aadd( aProto, "_gtGetPos --> <see hb_gtGetPos>" )
   aadd( aProto, "_gtIsColor --> <see hb_gtIsColor>" )
   aadd( aProto, "_gtMaxCol --> <see hb_gtMaxCol>" )
   aadd( aProto, "_gtMaxRow --> <see hb_gtMaxRow>" )
   aadd( aProto, "_gtPostExt --> <see hb_gtPostExt>" )
   aadd( aProto, "_gtPreExt --> <see hb_gtPreExt>" )
   aadd( aProto, "_gtRectSize --> <see hb_gtRectSize>" )
   aadd( aProto, "_gtRepChar --> <see hb_gtRepChar>" )
   aadd( aProto, "_gtRest --> <see hb_gtRest>" )
   aadd( aProto, "_gtSave --> <see hb_gtSave>" )
   aadd( aProto, "_gtScrDim --> <see hb_gtScrDim>" )
   aadd( aProto, "_gtScroll --> <see hb_gtScroll>" )
   aadd( aProto, "_gtSetBlink --> <see hb_gtSetBlink>" )
   aadd( aProto, "_gtSetColorStr --> <see hb_gtSetColorStr>" )
   aadd( aProto, "_gtSetCursor --> <see hb_gtSetCursor>" )
   aadd( aProto, "_gtSetMode --> <see hb_gtSetMode>" )
   aadd( aProto, "_gtSetPos --> <see hb_gtSetPos>" )
   aadd( aProto, "_gtSetSnowFlag --> <see hb_gtSetSnowFlag>" )
   aadd( aProto, "_gtWrite --> <see hb_gtWrite>" )
   aadd( aProto, "_gtWriteAt --> <see hb_gtWriteAt>" )
   aadd( aProto, "_gtWriteCon --> <see hb_gtWriteCon>" )
   aadd( aProto, "_gtInit --> <see hb_gtInit>" )
   aadd( aProto, "_gtExit --> <see hb_gtExit>" )
   aadd( aProto, "_gtWCreate --> <see hb_gtWCreate>" )
   aadd( aProto, "_gtWDestroy --> <see hb_gtWDestroy>" )
   aadd( aProto, "_gtWFlash --> <see hb_gtWFlash>" )
   aadd( aProto, "_gtWApp --> <see hb_gtWApp>" )
   aadd( aProto, "_gtWCurrent --> <see hb_gtWCurrent>" )
   aadd( aProto, "_gtWPos --> <see hb_gtWPos>" )
   aadd( aProto, "_gtWVis --> <see hb_gtWVis>" )
   aadd( aProto, "_gtModalRead --> <see hb_gtModalRead>" )
   aadd( aProto, "_gtBeginWrite --> <see hb_gtBeginWrite>" )
   aadd( aProto, "_gtEndWrite --> <see hb_gtEndWrite>" )
   aadd( aProto, "_gtFlushCursor --> <see hb_gtFlushCursor>" )
   aadd( aProto, "_gtSetColor --> <see hb_gtSetColor>" )
   aadd( aProto, "_gtGetColor --> <see hb_gtGetColor>" )
   aadd( aProto, "_gtSetBorder --> <see hb_gtSetBorder>" )
   aadd( aProto, "_xalloc --> <see hb_xalloc>" )
   aadd( aProto, "_xgrab --> <see hb_xgrab>" )
   aadd( aProto, "_xfree --> <see hb_xfree>" )
   aadd( aProto, "_exmgrab --> <see hb_xgrab>" )
   aadd( aProto, "_fsChDir --> <see hb_fsChDir>" )
   aadd( aProto, "_fsChDrv --> <see hb_fsChDrv>" )
   aadd( aProto, "_fsClose --> <see hb_fsClose>" )
   aadd( aProto, "_fsCommit --> <see hb_fsCommit>" )
   aadd( aProto, "_fsCreate --> <see hb_fsCreate>" )
   aadd( aProto, "_fsCurDir --> <see hb_fsCurDir>" )
   aadd( aProto, "_fsCurDrv --> <see hb_fsCurDrv>" )
   aadd( aProto, "_fsDelete --> <see hb_fsDelete>" )
   aadd( aProto, "_fsError --> <see hb_fsError>" )
   aadd( aProto, "_fsExtOpen --> <see hb_fsExtOpen>" )
   aadd( aProto, "_fsIsDrv --> <see hb_fsIsDrv>" )
   aadd( aProto, "_fsLock --> <see hb_fsLock>" )
   aadd( aProto, "_fsMkDir --> <see hb_fsMkDir>" )
   aadd( aProto, "_fsOpen --> <see hb_fsOpen>" )
   aadd( aProto, "_fsRead --> <see hb_fsRead>" )
   aadd( aProto, "_fsRmDir --> <see hb_fsRmDir>" )
   aadd( aProto, "_fsRename --> <see hb_fsRename>" )
   aadd( aProto, "_fsSeek --> <see hb_fsSeek>" )
   aadd( aProto, "_fsWrite --> <see hb_fsWrite>" )
   aadd( aProto, "ALENGTH( n ) --> <see hb_parinfa( n, 0 )>" )
   aadd( aProto, "_parc --> <see hb_parc>" )
   aadd( aProto, "_parclen --> <see hb_parclen>" )
   aadd( aProto, "_parcsiz --> <see hb_parcsiz>" )
   aadd( aProto, "_pards --> <see hb_pards>" )
   aadd( aProto, "_parinfa --> <see hb_parinfa>" )
   aadd( aProto, "_parinfo --> <see hb_parinfo>" )
   aadd( aProto, "_parl --> <see hb_parl>" )
   aadd( aProto, "_parnd --> <see hb_parnd>" )
   aadd( aProto, "_parni --> <see hb_parni>" )
   aadd( aProto, "_parnl --> <see hb_parnl>" )
   aadd( aProto, "_ret --> <see hb_ret>" )
   aadd( aProto, "_retc --> <see hb_retc>" )
   aadd( aProto, "_retclen --> <see hb_retclen>" )
   aadd( aProto, "_retds --> <see hb_retds>" )
   aadd( aProto, "_retl --> <see hb_retl>" )
   aadd( aProto, "_retnd --> <see hb_retnd>" )
   aadd( aProto, "_retni --> <see hb_retni>" )
   aadd( aProto, "_retnl --> <see hb_retnl>" )
   aadd( aProto, "_storc --> <see hb_storc>" )
   aadd( aProto, "_storclen --> <see hb_storclen>" )
   aadd( aProto, "_stords --> <see hb_stords>" )
   aadd( aProto, "_storl --> <see hb_storl>" )
   aadd( aProto, "_stornd --> <see hb_stornd>" )
   aadd( aProto, "_storni --> <see hb_storni>" )
   aadd( aProto, "_stornl --> <see hb_stornl>" )
   aadd( aProto, "_errGetDescription --> <see hb_errGetDescription>" )
   aadd( aProto, "_errGetFileName --> <see hb_errGetFileName>" )
   aadd( aProto, "_errGetFlags --> <see hb_errGetFlags>" )
   aadd( aProto, "_errGetGenCode --> <see hb_errGetGenCode>" )
   aadd( aProto, "_errGetOperation --> <see hb_errGetOperation>" )
   aadd( aProto, "_errGetOsCode --> <see hb_errGetOsCode>" )
   aadd( aProto, "_errGetSeverity --> <see hb_errGetSeverity>" )
   aadd( aProto, "_errGetSubCode --> <see hb_errGetSubCode>" )
   aadd( aProto, "_errGetSubSystem --> <see hb_errGetSubSystem>" )
   aadd( aProto, "_errGetTries --> <see hb_errGetTries>" )
   aadd( aProto, "_errLaunch --> <see hb_errLaunch>" )
   aadd( aProto, "_errNew --> <see hb_errNew>" )
   aadd( aProto, "_errPutDescription --> <see hb_errPutDescription>" )
   aadd( aProto, "_errPutFileName --> <see hb_errPutFileName>" )
   aadd( aProto, "_errPutFlags --> <see hb_errPutFlags>" )
   aadd( aProto, "_errPutGenCode --> <see hb_errPutGenCode>" )
   aadd( aProto, "_errPutOperation --> <see hb_errPutOperation>" )
   aadd( aProto, "_errPutOsCode --> <see hb_errPutOsCode>" )
   aadd( aProto, "_errPutSeverity --> <see hb_errPutSeverity>" )
   aadd( aProto, "_errPutSubCode --> <see hb_errPutSubCode>" )
   aadd( aProto, "_errPutSubSystem --> <see hb_errPutSubSystem>" )
   aadd( aProto, "_errPutTries --> <see hb_errPutTries>" )
   aadd( aProto, "_errRelease --> <see hb_errRelease>" )
   aadd( aProto, "hb_dateSeconds( void ) --> ( double )dResult" )
   aadd( aProto, "hb_dateToday( long * plYear, long * plMonth, long * plDay )" )
   aadd( aProto, "hb_dateTimeStr( char * pszTime )" )
   aadd( aProto, "hb_dateCMonth( int iMonth ) --> ( char * )pszResult" )
   aadd( aProto, "hb_dateCDOW( int iDay ) --> ( char * )pszResult" )
   aadd( aProto, "hb_dateDOW( long lYear, long lMonth, long lDay ) --> ( long )lResult" )
   aadd( aProto, "hb_dateFormat( const char * szDate, char * szFormattedDate, const char * szDateFormat ) --> ( char * )pszResult" )
   aadd( aProto, "hb_dateEncode( long lYear, long lMonth, long lDay ) --> ( long )lResult" )
   aadd( aProto, "hb_dateDecode( long julian, long * plYear, long * plMonth, long * plDay )" )
   aadd( aProto, "hb_dateStrPut( char * szDate, long lYear, long lMonth, long lDay )" )
   aadd( aProto, "hb_dateStrGet( const char * szDate, long * plYear, long * plMonth, long * plDay )" )
   aadd( aProto, "hb_dateDecStr( char * szDate, long lJulian ) --> ( char * )pszResult" )
   aadd( aProto, "hb_dateEncStr( char * szDate ) --> ( long )lResult" )
   aadd( aProto, "hb_macroError( int iError, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_macroYYParse( HB_MACRO_PTR pMacro ) --> ( int )iResult" )
   aadd( aProto, "hb_compGenPCode1( BYTE byte, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPCode2( BYTE byte1, BYTE byte2, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPCode3( BYTE byte1, BYTE byte2, BYTE byte3, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPCode4( BYTE byte1, BYTE byte2, BYTE byte3, BYTE byte4, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPCodeN( BYTE * pBuffer, ULONG ulSize, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compLocalVarGetPos( char * szVarName, HB_BISON_PTR pMacro ) --> ( int )iResult" )
   aadd( aProto, "hb_compGenJump( LONG lOffset, HB_BISON_PTR pMacro ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_compGenJumpFalse( LONG lOffset, HB_BISON_PTR pMacro ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_compGenJumpThere( ULONG ulFrom, ULONG ulTo, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenJumpHere( ULONG ulOffset, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenJumpTrue( LONG lOffset, HB_BISON_PTR pMacro ) --> ( ULONG )ulResult" )
   aadd( aProto, "hb_compMemvarGenPCode( BYTE bPCode, char * szVarName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushSymbol( char * szSymbolName, int isFunction, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushLong( long lNumber, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenMessage( char * szMsgName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenMessageData( char * szMsg, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPopVar( char * szVarName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPopAliasedVar( char * szVarName, HB_BOOL bPushAliasValue, char * szAlias, long lWorkarea, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushVar( char * szVarName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushVarRef( char * szVarName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushAliasedVar( char * szVarName, HB_BOOL bPushAliasValue, char * szAlias, long lWorkarea, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushLogical( int iTrueFalse, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushDouble( double dNumber, BYTE bWidth, BYTE bDec, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushFunCall( char * szFunName, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compGenPushString( char * szText, ULONG ulStrLen, HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compCodeBlockStart( HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_compCodeBlockEnd( HB_BISON_PTR pMacro )" )
   aadd( aProto, "hb_setInitialize( void )" )
   aadd( aProto, "hb_setRelease( void )" )
   aadd( aProto, "hb_setListenerAdd( PHB_SET_LISTENER_CALLBACK callback ) --> int" )
   aadd( aProto, "when ) --> int" )
   aadd( aProto, "hb_setListenerRemove( int handle ) --> int" )
   aadd( aProto, "hb_vmInit( HB_BOOL bStartMainProc )" )
   aadd( aProto, "hb_vmQuit( void ) --> int" )
   aadd( aProto, "hb_vmExecute( const BYTE * pCode, PHB_SYMB pSymbols )" )
   aadd( aProto, "hb_vmProcessSymbols( PHB_SYMB pSymbols, USHORT uiSymbols )" )
   aadd( aProto, "hb_vmSymbolInit_RT( void )" )
   aadd( aProto, "hb_vmRequestQuit( void )" )
   aadd( aProto, "hb_vmRequestEndProc( void )" )
   aadd( aProto, "hb_vmRequestCancel( void )" )
   aadd( aProto, "hb_vmRequestBreak( PHB_ITEM pItem )" )
   aadd( aProto, "hb_vmRequestQuery( void ) --> ( USHORT )usResult" )
   aadd( aProto, "hb_vmMessage( PHB_SYMB pSymMsg )" )
   aadd( aProto, "hb_vmDo( USHORT uiParams )" )
   aadd( aProto, "hb_vmFunction( USHORT uiParams )" )
   aadd( aProto, "hb_vmSend( USHORT uiParams )" )
   aadd( aProto, "hb_vmEvalBlock( PHB_ITEM pBlockItem ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_vmEvalBlockV( PHB_ITEM pBlockItem, USHORT uiArgCount, ... ) --> ( PHB_ITEM )pResult" )
   aadd( aProto, "hb_vmPush( PHB_ITEM pItem )" )
   aadd( aProto, "hb_vmPushNil( void )" )
   aadd( aProto, "hb_vmPushNumber( double dNumber, int iDec )" )
   aadd( aProto, "hb_vmPushInteger( int iNumber )" )
   aadd( aProto, "hb_vmPushLong( long lNumber )" )
   aadd( aProto, "hb_vmPushDouble( double lNumber, int iDec )" )
   aadd( aProto, "hb_vmPushLogical( HB_BOOL bValue )" )
   aadd( aProto, "hb_vmPushString( char * szText, ULONG length )" )
   aadd( aProto, "hb_vmPushDate( long lDate )" )
   aadd( aProto, "hb_vmPushSymbol( PHB_SYMB pSym )" )
   aadd( aProto, "hb_vmPushPointer( void * )" )
   aadd( aProto, "hb_stackDispCall( void )" )
   aadd( aProto, "hb_stackPop( void )" )
   aadd( aProto, "PROCNAME( <nLevel> ) --> <cProcName>" )
   aadd( aProto, "PROCLINE( <nLevel> ) --> <nLine>" )
   aadd( aProto, "PROCFILE( <xExp> ) --> <cEmptyString>" )
   aadd( aProto, "HB_PVALUE( <nArg> ) --> <xExp>" )
   aadd( aProto, "PCOUNT() --> <nArgs>" )
   aadd( aProto, "__QUIT()" )
   aadd( aProto, "CLIPINIT() --> NIL" )
   aadd( aProto, "__SetHelpK()" )
   aadd( aProto, "BREAK( <xExp> )" )
   aadd( aProto, "DO( <xFuncProc> [, <xArguments...>] ) --> <xRetVal>" )
   aadd( aProto, "HB_IDLEADD( <bAction> ) --> nHandle" )
   aadd( aProto, "HB_IDLEDEL( <nHandle> ) --> <bAction>" )
   aadd( aProto, "HB_IDLESTATE()" )
   aadd( aProto, "void hb_idleState( void );" )
   aadd( aProto, "INKEY( [<nTimeout>] [,<nEvents>] ) --> nKey" )
   aadd( aProto, "KEYBOARD <cString>" )
   aadd( aProto, "HB_KEYPUT( <nInkeyCode> )" )
   aadd( aProto, "NEXTKEY( [<nInputMask>] ) --> nKey" )
   aadd( aProto, "LASTKEY( [<nInputMask>] ) --> nKey" )
   aadd( aProto, "KEYBOARD <cString>" )
   aadd( aProto, "READKEY() --> nKeyCode" )
   aadd( aProto, "MRow() --> nMouseRow" )
   aadd( aProto, "MCol() --> nMouseColumn" )
   aadd( aProto, "HB_LANGERRMSG( <nErrorCode> ) --> cErrorMessage" )
   aadd( aProto, "HB_LANGMESSAGE( <nMsg> ) --> cMessage" )
   aadd( aProto, "HB_LANGNAME() --> cLangName" )
   aadd( aProto, "HB_LANGSELECT( [<cNewLang>] ) --> cOldLang" )
   aadd( aProto, "HB_SETCODEPAGE( [<cNewLang>] ) --> cOldLang" )
   aadd( aProto, "HB_TRANSLATE( <cSrcText>, [<cPageFrom>], [<cPageTo>] ) --> cDstText" )
   aadd( aProto, "HB_SETMACRO( <nOption>, [<lOnOff>] ) --> <lOldSetting>" )
   aadd( aProto, "ABS(<nNumber>) --> <nAbsNumber>" )
   aadd( aProto, "EXP( <nNumber> ) --> <nValue>" )
   aadd( aProto, "INT( <nNumber> ) --> <nIntNumber>" )
   aadd( aProto, "LOG( <nNumber> ) --> <nLog>" )
   aadd( aProto, "MAX(<xValue>,<xValue1>)  --> <xMax>" )
   aadd( aProto, "MIN(<xValue>,<xValue1>)  --> <xMin>" )
   aadd( aProto, "MOD( <nNumber>,<nNumber1>) -->  <nRemainder>" )
   aadd( aProto, "SQRT( <nNumber> ) --> <nSqrt>" )
   aadd( aProto, "ROUND( <nNumber>,<nPlace> ) --> <nResult>" )
   aadd( aProto, "--> int iMathErrorType" )
   aadd( aProto, "hb_mathResetError (void)" )
   aadd( aProto, "hb_mathIsMathErr (void) --> int iIsMathHandler" )
   aadd( aProto, "--> HB_MATH_HANDLERPROC previous_handerproc" )
   aadd( aProto, "hb_mathGetHandler (void) --> HB_MATH_HANDLERPROC handlerproc" )
   aadd( aProto, "hb_mathSetErrMode (int imode) --> int ioldmode" )
   aadd( aProto, "hb_mathGetErrMode (void) --> imode" )
   aadd( aProto, "HB_MATHERMODE ([<nNewMode>]) --> <nOldMode>" )
   aadd( aProto, "HB_MATHERBLOCK ([<bNewBlock>]) --> <bOldBlock>" )
   aadd( aProto, "MEMOTRAN( <cString>, <cHard>, <cSoft> ) --> <cConvertedString>" )
   aadd( aProto, "HARDCR( <cString> ) --> <cConvertedString>" )
   aadd( aProto, "MEMOREAD( <cFileName> ) --> cString" )
   aadd( aProto, "MEMOWRIT( <cFileName>, <cString>, [<lWriteEof>] ) --> lSuccess" )
   aadd( aProto, "FIELD <xField> [,<xFieldn...>  [in <cDatabase>]" )
   aadd( aProto, "LOCAL <xVar> [:= <xInit> ]" )
   aadd( aProto, "MEMVAR <xVar>" )
   aadd( aProto, "ACHOICE(<nTop>, <nLeft>, <nBottom>, <nRight>, <acMenuItems>, [<alSelableItems> | <lSelableItems>], [<cUserFunction> | <bUserBlock>], [<nInitialItem>], [<nWindowRow>]) --> nPosition" )
   aadd( aProto, "__AtPrompt( <nRow>, <nCol>, <cPrompt>, [<xMsg>] ) --> .F." )
   aadd( aProto, "@ <nRow>, <nCol> PROMPT <cPrompt> [MESSAGE <xMsg>]" )
   aadd( aProto, "__MenuTo( <bBlock>, <cVariable> ) --> nChoice" )
   aadd( aProto, "MENU TO <cVariable>" )
   aadd( aProto, "OS() --> <cOperatingSystem>" )
   aadd( aProto, "VERSION()  --> <cReturn>" )
   aadd( aProto, "GETENV(<cEnviroment> )  --> <cReturn>" )
   aadd( aProto, "GETE(<cEnviroment> )  --> <cReturn>" )
   aadd( aProto, "HB_GETENV(<cEnviroment>, [<cDefaultValue>], [<lApplyCodepage>] )  --> <cReturn>" )
   aadd( aProto, "__RUN( <cCommand> )" )
   aadd( aProto, "TONE( <nFrequency>, <nDuration> ) --> NIL" )
   aadd( aProto, "RUN <cCommand>" )
   aadd( aProto, "ISAFFIRM( <cChar> ) --> <lTrueOrFalse>" )
   aadd( aProto, "ISNEGATIVE( <cChar> ) --> <lTrueOrFalse>" )
   aadd( aProto, "Language and Nation MSG( <nMsg> ) --> <cMessage>" )
   aadd( aProto, "__objHasData( <oObject>, <cSymbol> ) --> lExist" )
   aadd( aProto, "__objHasMethod( <oObject>, <cSymbol> ) --> lExist" )
   aadd( aProto, "__objGetMsgList( <oObject>, [<lData>], [nClassType] ) --> aNames" )
   aadd( aProto, "__objGetMethodList( <oObject> ) --> aMethodNames" )
   aadd( aProto, "__objGetValueList( <oObject>, [<aExcept>] ) --> aData" )
   aadd( aProto, "__ObjSetValueList( <oObject>, <aData> ) --> oObject" )
   aadd( aProto, "__objAddMethod( <oObject>, <cMethodName>, <nFuncPtr> ) --> oObject" )
   aadd( aProto, "__objAddInline( <oObject>, <cInlineName>, <bInline> ) --> oObject" )
   aadd( aProto, "__objAddData( <oObject>, <cDataName> ) --> oObject" )
   aadd( aProto, "__objModMethod( <oObject>, <cMethodName>, <nFuncPtr> ) --> oObject" )
   aadd( aProto, "__objModInline( <oObject>, <cInlineName>, <bInline> ) --> oObject" )
   aadd( aProto, "__objDelMethod( <oObject>, <cSymbol> ) --> oObject" )
   aadd( aProto, "__objDelInline( <oObject>, <cSymbol> ) --> oObject" )
   aadd( aProto, "__objDelMethod( <oObject>, <cDataName> ) --> oObject" )
   aadd( aProto, "__objDerivedFrom( <oObject>, <xSuper> ) --> lIsParent" )
   aadd( aProto, "DBEVAL( <bBlock>," )
   aadd( aProto, "Dbf() --> <cWorkArea>" )
   aadd( aProto, "DbAppend( [<lLock>] ) --> NIL" )
   aadd( aProto, "DbClearFilTer() --> NIL" )
   aadd( aProto, "DbCloseAll() --> NIL" )
   aadd( aProto, "DbCloseArea()" )
   aadd( aProto, "BCOMMIT()" )
   aadd( aProto, "DBCOMMIT()" )
   aadd( aProto, "DBCREATE( <cDatabase>, <aStruct>, [<cDriver>], [<lOpen>]," )
   aadd( aProto, "DBDELETE()" )
   aadd( aProto, "DBFILTER() --> cFilter" )
   aadd( aProto, "DBGOBOTTOM()" )
   aadd( aProto, "DBGOTO(<xRecordNumber>)" )
   aadd( aProto, "DBGOTOP()" )
   aadd( aProto, "DBRECALL()" )
   aadd( aProto, "DBRLOCK([<xIdentity>]) --> lSuccess" )
   aadd( aProto, "DBRLOCKLIST() --> aRecordLocks" )
   aadd( aProto, "DBRUNLOCK([<xIdentity>])" )
   aadd( aProto, "DBSEEK(<expKey>, [<lSoftSeek>],[<lFindLast>]) --> lFound" )
   aadd( aProto, "DBSELECTAREA(<xArea>) -" )
   aadd( aProto, "DBSETDRIVER( [<cDriver>] ) --> cCurrentDriver" )
   aadd( aProto, "DBSKIP([<nRecords>])" )
   aadd( aProto, "DBSETFILTER(<bCondition>, [<cCondition>])" )
   aadd( aProto, "DBSTRUCT() --> aStruct" )
   aadd( aProto, "DBUNLOCK()" )
   aadd( aProto, "DBUNLOCKALL()" )
   aadd( aProto, "DBUSEAREA( [<lNewArea>], [<cDriver>], <cName>, [<xcAlias>]," )
   aadd( aProto, "AFields(<aNames>[,<aTypes>][,<aLen>][,<aDecs>]) --> <nFields>" )
   aadd( aProto, "Alias([<nWorkArea>]) --> <cWorkArea>" )
   aadd( aProto, "BOF() --> <lBegin>" )
   aadd( aProto, "ZAP" )
   aadd( aProto, "DELETED() --> lDeleted" )
   aadd( aProto, "EOF() --> <lEnd>" )
   aadd( aProto, "FCOUNT() --> nFields" )
   aadd( aProto, "FIELDGET(<nField>) --> ValueField" )
   aadd( aProto, "FIELDNAME/FIELD(<nPosition>) --> cFieldName" )
   aadd( aProto, "FIELDPOS(<cFieldName>) --> nFieldPos" )
   aadd( aProto, "FIELDPUT(<nField>, <expAssign>) --> ValueAssigned" )
   aadd( aProto, "FLOCK() --> lSuccess" )
   aadd( aProto, "FOUND() --> lSuccess" )
   aadd( aProto, "HEADER() --> nBytes" )
   aadd( aProto, "LASTREC() | RECCOUNT()* --> nRecords" )
   aadd( aProto, "LUPDATE() --> dModification" )
   aadd( aProto, "NETERR([<lNewError>]) --> lError" )
   aadd( aProto, "RECCOUNT()* | LASTREC() --> nRecords" )
   aadd( aProto, "RECNO() --> Identity" )
   aadd( aProto, "RECSIZE() --> nBytes" )
   aadd( aProto, "RLOCK() --> lSuccess" )
   aadd( aProto, "SELECT([<cAlias>]) --> nWorkArea" )
   aadd( aProto, "USED() --> lDbfOpen" )
   aadd( aProto, "PACK" )
   aadd( aProto, "ORDBAGEXT() --> cBagExt" )
   aadd( aProto, "ORDBAGNAME(<nOrder> | <cOrderName>) --> cOrderBagName" )
   aadd( aProto, "ORDCONSET([<cForCondition>]," )
   aadd( aProto, "ORDCREATE(<cOrderBagName>,[<cOrderName>], <cExpKey>," )
   aadd( aProto, "ORDDESTROY(<cOrderName> [, <cOrderBagName> ])" )
   aadd( aProto, "ORDFOR(<xOrder>[, <cOrderBagName>]) --> cForExp" )
   aadd( aProto, "ORDKEY(<cOrderName> | <nOrder> [, <cOrderBagName>]) --> cExpKey" )
   aadd( aProto, "INDEXEXT() --> <cExtension>" )
   aadd( aProto, "INDEXKEY(<nOrder>) --> <cIndexKey>" )
   aadd( aProto, "INDEXORD() --> <nPosition>" )
   aadd( aProto, "@ <nRow>,<nCol> [SAY <cSay> [PICTURE <cSayPict>] COLOR <cSayColor> ]" )
   aadd( aProto, "@ <nRow>,<nCol> SAY <xValue> [ PICTURE <cPict> ] [COLOR <cColor>]" )
   aadd( aProto, "__SETCENTURY([<lFlag> | <cOnOff> ] ) --> lPreviousValue" )
   aadd( aProto, "Set(<nSet> [, <xNewSetting> [, <xOption> ] ] ) --> xPreviousSetting" )
   aadd( aProto, "__SetFunction( <nFunctionKey>, [<cString>] ) --> NIL" )
   aadd( aProto, "SET FUNCTION <nFunctionKey> TO [<cString>]" )
   aadd( aProto, "SETKEY( <anKey> [, <bAction> [, <bCondition> ] ] )" )
   aadd( aProto, "HB_SETKEYGET( <nKey> [, <bConditionByRef> ] )" )
   aadd( aProto, "B_SETKEYSAVE( [ <OldKeys> ] )" )
   aadd( aProto, "HB_SetKeyCheck( <nKey> [, <p1> ][, <p2> ][, <p3> ] )" )
   aadd( aProto, "SET KEY   <anKey> to p<bAction>] [when  <bCondition> ]  )" )
   aadd( aProto, "SETTYPEAHEAD( <nSize> ) --> <nPreviousSize>" )
   aadd( aProto, "__XHELP() --> <xValue>" )
   aadd( aProto, "SET DEFAULT TO [<cPath>]" )
   aadd( aProto, "SET WRAP on | OFF | (<lWrap>" )
   aadd( aProto, "SET MESSAGE TO [<nRow> [CENTER]]" )
   aadd( aProto, "SET PATH TO [<cPath>]" )
   aadd( aProto, "SET INTENSITY  ON | off | (<lInte>)" )
   aadd( aProto, "SET ALTERNATE to <cFile> [ADDITIVE]" )
   aadd( aProto, "SET CENTURY on | OFF | (<lCent>)" )
   aadd( aProto, "SET DATE FORMAT [TO] <cFormat>" )
   aadd( aProto, "SET EPOCH TO <nEpoch>" )
   aadd( aProto, "SET FIXED on | OFF | (<lFixed>)" )
   aadd( aProto, "SET PRINTER on | OFF" )
   aadd( aProto, "SET CONSOLE ON | off | (<lConsole>)" )
   aadd( aProto, "SET DECIMALS TO [<nDecimal>]" )
   aadd( aProto, "SET DEVICE TO [printer | SCREEN ]" )
   aadd( aProto, "SET BELL on | OFF | (<lBell>)" )
   aadd( aProto, "SETMODE( <nRows>, <nCols> ) --> lSuccess" )
   aadd( aProto, "ISALPHA( <cString> ) --> lAlpha" )
   aadd( aProto, "ISDIGIT( <cString> ) --> lDigit" )
   aadd( aProto, "ISUPPER( <cString> ) --> lUpper" )
   aadd( aProto, "ISLOWER( <cString> ) --> lLower" )
   aadd( aProto, "LTRIM( <cString> ) --> cReturn" )
   aadd( aProto, "AT( <cSearch>, <cString>, [<nStart>], [<nEnd>] ) --> nPos" )
   aadd( aProto, "RAT( <cSearch>, <cString> ) --> nPos" )
   aadd( aProto, "LEFT( <cString>, <nLen> ) --> cReturn" )
   aadd( aProto, "RIGHT( <cString>, <nLen> ) --> cReturn" )
   aadd( aProto, "SUBSTR( <cString>, <nStart>, [<nLen>] ) --> cReturn" )
   aadd( aProto, "STR( <nNumber>, [<nLength>], [<nDecimals>] ) --> cNumber" )
   aadd( aProto, "STRZERO( <nNumber>, [<nLength>], [<nDecimals>] ) --> cNumber" )
   aadd( aProto, "HB_VALTOSTR( <xValue> ) --> cString" )
   aadd( aProto, "LEN( <cString> | <aArray> ) --> <nLength>" )
   aadd( aProto, "EMPTY( <xExp> ) --> lIsEmpty" )
   aadd( aProto, "DESCEND( <xExp> ) --> xExpInverted" )
   aadd( aProto, "HB_ANSITOOEM( <cString> ) --> cDosString" )
   aadd( aProto, "HB_OEMTOANSI( <cString> )  --> cDosString" )
   aadd( aProto, "LOWER( <cString> ) --> cLowerString" )
   aadd( aProto, "UPPER( <cString> ) --> cUpperString" )
   aadd( aProto, "CHR( <nAsciiNum> )  --> cReturn" )
   aadd( aProto, "ASC( <cCharacter> ) --> nAscNumber" )
   aadd( aProto, "PADC( <xVal>, <nWidth>, <cFill> )  --> cString" )
   aadd( aProto, "PADL( <xVal>, <nWidth>, <cFill> )  --> cString" )
   aadd( aProto, "PADR( <xVal>, <nWidth>, <cFill> ) --> cString" )
   aadd( aProto, "ALLTRIM( <cString> ) --> cExpression" )
   aadd( aProto, "RTRIM( <cExpression> ) --> cString" )
   aadd( aProto, "TRIM( <cExpression> )   --> cString" )
   aadd( aProto, "REPLICATE( <cString>, <nSize> )  --> cReplicateString" )
   aadd( aProto, "SPACE( <nSize> ) --> cString" )
   aadd( aProto, "VAL( <cNumber> ) --> nNumber" )
   aadd( aProto, "STRTRAN( <cString>, <cLocString>, [<cRepString>], [<nPos>]," )
   aadd( aProto, "TRANSFORM( <xExpression>, <cTemplate> )  --> cFormated" )
   aadd( aProto, "oClass := HBClass():New('TMyClass')" )
   aadd( aProto, "__XSaveScreen()" )
   aadd( aProto, "SAVE SCREEN" )
   aadd( aProto, "__XRestScreen()" )
   aadd( aProto, "RESTORE SCREEN" )
   aadd( aProto, "ALERT( <xMessage>, [<aOptions>], [<cColorNorm>], [<nDelay>] ) --> nChoice or NIL" )
   aadd( aProto, "__NONOALERT()" )
   aadd( aProto, "HB_OSNewLine() --> cString" )
   aadd( aProto, "hb_ColorIndex( <cColorSpec>, <nIndex> ) --> <cColor>" )
   aadd( aProto, "DEVOUTPICT( <xExp>, <cPicture>, [<cColorString>] )" )
   aadd( aProto, "__INPUT( <cMessage> ) --> <cString>" )
   aadd( aProto, "__TextSave( <cFile> )" )
   aadd( aProto, "__TextRestore()" )
   aadd( aProto, "__WAIT( <cMessage> ) --> <cKey>" )
   aadd( aProto, "OUTSTD( <xExp,...> )" )
   aadd( aProto, "OUTERR( <xExp,...> )" )
   aadd( aProto, "EJECT" )
   aadd( aProto, "COL()  --> nPosition" )
   aadd( aProto, "ROW()  --> nPosition" )
   aadd( aProto, "MAXCOL()  --> nPosition" )
   aadd( aProto, "MAXROW()  --> nPosition" )
   aadd( aProto, "READVAR( [<cVarName>] ) --> cOldVarName" )
   aadd( aProto, "LABEL FORM <cLabelName> [TO PRINTER] [TO FILE <cFile>] [<cScope>]" )
   aadd( aProto, "REPORT FORM <cReportName> [TO PRINTER] [TO FILE <cFile>] [<cScope>]" )
   aadd( aProto, "__MVPUBLIC( <variable_name> )" )
   aadd( aProto, "__MVPRIVATE( <variable_name> )" )
   aadd( aProto, "__MVXRELEASE( <variable_name> )" )
   aadd( aProto, "__MVRELEASE( <skeleton>, <include_exclude_flag> )" )
   aadd( aProto, "__MVSCOPE( <cVarName> )" )
   aadd( aProto, "__MVCLEAR()" )
   aadd( aProto, "__MVDBGINFO( <nScope> [, <nPosition> [, @<cVarName>] ] )" )
   aadd( aProto, "__MVEXIST( <cVarName> )  --> <lVariableExist>" )
   aadd( aProto, "__MVGET( <cVarName> )  --> <xVar>" )
   aadd( aProto, "__MVGET( <cVarName> [, <xValue>] )  --> <xValue>" )
   aadd( aProto, "MEMVARBLOCK( <cMemvarName> ) --> <bBlock>" )
   aadd( aProto, "FIELDBLOCK( <cFieldName> ) --> bFieldBlock" )
   aadd( aProto, "FIELDWBLOCK( <cFieldName>, <nWorkArea> ) --> bFieldBlock" )
   aadd( aProto, "TYPE( <cExp> ) --> <cRetType>" )
   aadd( aProto, "VALTYPE( <xExp> ) --> <cRetType>" )
   aadd( aProto, "HB_ISBYREF( @<Var> ) --> <lVarIsByRef>" )
   aadd( aProto, "TBTreeNew( CHAR <cFileName>, <nPageSize>, <nKeySize>, [ <nFlags> ], [ <nBuffers>=1 ] ) -> <tBTreeInstance>" )
   aadd( aProto, "TBTreeOpen( <cFileName>, [ <nFlags> ], [ <nBuffers>=1 ] ) -> <tBTreeInstance>" )
   aadd( aProto, "<tBTreeInstance>:Close() -> Nil" )
   aadd( aProto, "<tBTreeInstance>:Insert( <cKey>, <lData> | <xData> ) -> <lSuccess>" )
   aadd( aProto, "<tBTreeInstance>:Delete( <cKey>, <lData> ) -> <lSuccess>" )
   aadd( aProto, "<tBTreeInstance>:Key() -> <cKey>" )
   aadd( aProto, "<tBTreeInstance>:Data() -> <lData> | <xData>" )
   aadd( aProto, "#include 'hb_btree.api'" )
   aadd( aProto, "<tBTreeInstance>:GoTop() -> NIL" )
   aadd( aProto, "<tBTreeInstance>:GoBottom() -> NIL" )
   aadd( aProto, "<tBTreeInstance>:Skip( LONG <nRecords> ) -> <nRecordsSkipped>" )
   aadd( aProto, "<tBTreeInstance>:Seek( <cKey>, <lData>, <lSoftSeek> )" )
   aadd( aProto, "Harbour Prototype" )

   RETURN aProto

