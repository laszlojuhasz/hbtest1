/*
 * $Id$
 */

/* $DOC$
   $NAME$
      FTOC()
   $CATEGORY$
      CT3 number and bit manipulation functions
   $ONELINER$

   $SYNTAX$
      FTOC( <nFloatingPointNumber> ) --> cFloatingPointNumber

   $ARGUMENTS$
      <nFloatingPointNumber> Designate any Harbour number.

   $RETURNS$
      FTOC() return a string with the size of DOUBLE.
      ATTENTION: different implementations or platforms of Harbour, they
      could produce different format in the string returned by FTOC().

   $DESCRIPTION$
      Harbour internal numbers in Floating Point are stored in data type
      DOUBLE. FTOC() returns these bits as an string. In this way,
      numbers con be saved more compactly.

      TODO: add documentation
   $EXAMPLES$

   $TESTS$

   $STATUS$
      Started
   $COMPLIANCE$

   $PLATFORMS$
      All
   $FILES$
      Library is libct.
   $SEEALSO$
      CToF(), XToC()
   $END$
 */

/* $DOC$
   $NAME$
      CToF()
   $CATEGORY$
      CT3 number and bit manipulation functions
   $ONELINER$

   $SYNTAX$
      CToF( <cFloatingPointNumber> ) --> nFloatingPointNumber

   $ARGUMENTS$
      <cFloatingPointNumber> Designate a string that contains a Harbour
      number in flotaing point format.
      ATTENTION: different implementations or platforms of Harbour, they
      could produce different format in the string returned by FTOC().

   $RETURNS$
      CToF() return the floating point number that corresponds to the
      string passed.

   $DESCRIPTION$
      Character strings created with FTOC() or XToC() are convert into
      Harbour floating point number

      TODO: add documentation
   $EXAMPLES$

   $TESTS$

   $STATUS$
      Started
   $COMPLIANCE$

   $PLATFORMS$
      All
   $FILES$
      Library is libct.
   $SEEALSO$
      FTOC(), XToC()
   $END$
 */
