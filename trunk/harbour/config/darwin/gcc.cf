#
# $Id$
#

ifeq ($(HB_BUILD_MODE),cpp)
   HB_CMP := g++
else
   # for old Darwin systems (having GCC 2.95) this may need to be
   # redefined to 'cc'.
   HB_CMP := gcc
endif

OBJ_EXT := .o
LIB_PREF := lib
LIB_EXT := .a

CC := $(HB_CCACHE) $(HB_CCPREFIX)$(HB_CMP)$(HB_CCPOSTFIX)
CC_IN := -c
# NOTE: The ending space after -o is important, please preserve it.
#       Now solved with '$(subst x,x, )' expression.
CC_OUT := -o$(subst x,x, )

CPPFLAGS = -I. -I$(HB_INC_COMPILE)

# -no-cpp-precomp prevents from using buggy precompiled headers
CPPFLAGS += -no-cpp-precomp

# -fno-common enables building .dylib files
CFLAGS = -fno-common

ifneq ($(HB_BUILD_WARN),no)
CFLAGS += -Wall -W
endif

ifneq ($(HB_BUILD_OPTIM),no)
CFLAGS += -O3
endif

ifeq ($(HB_BUILD_DEBUG),yes)
CFLAGS += -g
endif

# It's to avoid warning message generated when 'long double' is used
# remove it if you have newer compiler version
#CFLAGS += -Wno-long-double

LD := $(HB_CCPREFIX)$(HB_CMP)$(HB_CCPOSTFIX)
LD_OUT := -o

LINKPATHS += -L$(LIB_DIR)

LINKLIBS += $(foreach lib, $(LIBS), -l$(lib))

# Add the specified GT driver library and other RTLs
ifeq ($(findstring hbrtl,$(LIBS)),hbrtl)

# screen driver libraries
ifeq ($(HB_CRS_LIB),)
HB_CRS_LIB := ncurses
endif

ifneq ($(findstring gtcrs, $(LIBS)),)
LINKLIBS += -l$(HB_CRS_LIB)
endif

ifneq ($(findstring gtsln, $(LIBS)),)
LINKLIBS += -lslang
# In BSD, slang still needs curses :(
ifeq ($(findstring gtcrs, $(LIBS)),)
LINKLIBS += -l$(HB_CRS_LIB)
endif
endif

ifneq ($(findstring gtxwc, $(LIBS)),)
LINKLIBS += -lX11
#LINKPATHS += -L/usr/X11R6/lib64
LINKPATHS += -L/usr/X11R6/lib
endif

endif

ifneq ($(findstring -DHB_PCRE_REGEX, $(HB_USER_CFLAGS)),)
LINKLIBS += -lpcre
endif

ifneq ($(findstring -DHB_EXT_ZLIB, $(HB_USER_CFLAGS)),)
LINKLIBS += -lz
endif

LINKLIBS += -lm

LDFLAGS = $(LINKPATHS)
LD_RULE = $(LD) $(CFLAGS) $(LD_OUT) $(BIN_DIR)/$@ $(^F) $(LDFLAGS) $(HB_USER_LDFLAGS) $(LINKLIBS) $(LINKLIBS)

#AR := ar
#ARFLAGS = $(HB_USER_AFLAGS)
#AR_RULE = $(AR) $(ARFLAGS) r $@ $(^F) || $(RM) $@
LIBTOOL := libtool
LIBTOOLFLAGS = $(HB_USER_AFLAGS)
AR_RULE = $(LIBTOOL) -static $(LIBTOOLFLAGS) -o $(LIB_DIR)/$@ $(^F) || ( $(RM) $(LIB_DIR)/$@ && false )
RANLIB := ranlib

include $(TOP)$(ROOT)config/rules.cf
