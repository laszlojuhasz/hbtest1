#
# $Id$
#

# GNU MAKE file for Open Watcom C/C++ compiler

# ---------------------------------------------------------------
# See option docs here:
#    http://www.users.pjwstk.edu.pl/~jms/qnx/help/watcom/compiler-tools/cpopts.html
#    http://www.users.pjwstk.edu.pl/~jms/qnx/help/watcom/compiler-tools/wlink.html
#    http://www.users.pjwstk.edu.pl/~jms/qnx/help/watcom/compiler-tools/wlib.html
# ---------------------------------------------------------------

OBJ_EXT = .obj
LIB_PREF =
LIB_EXT = .lib

ifeq ($(HB_BUILD_MODE),c)
CC = wcc386
endif
ifeq ($(HB_BUILD_MODE),cpp)
CC = wpp386
endif
# Build in C++ mode by default
ifeq ($(HB_BUILD_MODE),)
CC = wpp386
endif
CC_IN =
CC_OUT = -fo=

CPPFLAGS = -zq -bt=os2

ifneq ($(HB_BUILD_WARN),no)
CPPFLAGS += -w3
endif

ifneq ($(HB_BUILD_OPTIM),no)
# architecture flags
CPPFLAGS += -5r -fp5

# optimization flags
# don't enable -ol optimization in OpenWatcom 1.1 - gives buggy code
CPPFLAGS += -onaehtr -s -ei -zp4 -zt0
#CPPFLAGS += -obl+m
ifeq ($(CC),wpp386)
CPPFLAGS += -oi+
else
CPPFLAGS += -oi
endif
endif

CPPFLAGS += -i. -i$(TOP)$(ROOT)include

ifeq ($(HB_BUILD_DEBUG),yes)
CPPFLAGS += -d2
endif

ifeq ($(CC),wcc386)
ifneq ($(HB_HOST_ARCH),linux)
CPPFLAGS := $(subst /,\,$(CPPFLAGS))
CC_RULE = $(CC) $(CPPFLAGS) $(subst /,\,$(CFLAGS)) $(HB_CDBG) $(subst /,\,$(HB_USER_CFLAGS)) $(HB_CDYNLIB) $(CC_IN)$(subst /,\,$<) $(CC_OUT)$(<F:.c=$(OBJ_EXT))
endif
endif

empty:=
space:= $(empty) $(empty)
comma:= ,

LD = wlink
LDFLAGS = SYS os2v2
ifeq ($(HB_BUILD_DEBUG),yes)
LDFLAGS := DEBUG ALL $(LDFLAGS)
endif

LINKLIBS = $(foreach lib, $(LIBS), $(LIB_DIR)/$(lib))

# If LIBS specifies the RDD library, add all DB drivers.
ifeq ($(findstring hbrdd,$(LIBS)),hbrdd)
   RDDLIBS = $(foreach drv, $(HB_DB_DRIVERS), $(LIB_DIR)/$(drv))
endif

ifeq ($(findstring hbrtl,$(LIBS)),hbrtl)
   GTLIBS = $(foreach gt, $(HB_GT_LIBS), $(LIB_DIR)/$(gt))
endif

LDFILES = $(subst $(space),$(comma) ,$(^F))
LDLIBS  = $(subst $(space),$(comma) ,$(strip $(LINKLIBS) $(RDDLIBS) $(GTLIBS)))
LD_RULE = $(LD) $(LDFLAGS) $(HB_USER_LDFLAGS) NAME $(BIN_DIR)/$@ FILE $(LDFILES) $(if $(LDLIBS), LIB $(LDLIBS),)

# maximum size of command line in OS2 is limited to 1024 characters
# the trick below with 'wordlist' is workaround for it
define create_library
echo $(LIB_DIR)/$@ > __lib__.tmp
$(if $(wordlist   1, 50,$(^F)), echo $(wordlist   1, 50,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist  51,100,$(^F)), echo $(wordlist  51,100,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist 101,150,$(^F)), echo $(wordlist 101,150,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist 151,200,$(^F)), echo $(wordlist 151,200,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist 201,250,$(^F)), echo $(wordlist 201,250,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist 250,300,$(^F)), echo $(wordlist 250,300,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(if $(wordlist 300,999,$(^F)), echo $(wordlist 300,999,$(addprefix -+,$(^F))) >> __lib__.tmp,)
$(AR) $(ARFLAGS) @__lib__.tmp
endef

ARFILES = $(addprefix -+,$(^F))

AR = wlib
ARFLAGS = -p=64 -c -n $(HB_USER_AFLAGS)
AR_RULE = $(create_library)

include $(TOP)$(ROOT)config/rules.cf
