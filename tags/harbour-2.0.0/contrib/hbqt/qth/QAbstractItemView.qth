/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
Inherit  = QAbstractScrollArea
New      = pParent
</CLASS>


<CODE>
#include <QtGui/QAbstractItemView>


/*
 * QAbstractItemView ( QWidget * parent = 0 )
 * ~QAbstractItemView ()
 */
HB_FUNC( QT_QABSTRACTITEMVIEW )
{

}
</CODE>

<ENUMS>
flags EditTriggers
enum DragDropMode { NoDragDrop, DragOnly, DropOnly, DragDrop, InternalMove }
enum EditTrigger { NoEditTriggers, CurrentChanged, DoubleClicked, SelectedClicked, ..., AllEditTriggers }
enum ScrollHint { EnsureVisible, PositionAtTop, PositionAtBottom, PositionAtCenter }
enum ScrollMode { ScrollPerItem, ScrollPerPixel }
enum SelectionBehavior { SelectItems, SelectRows, SelectColumns }
enum SelectionMode { SingleSelection, ContiguousSelection, ExtendedSelection, MultiSelection, NoSelection }
</ENUMS>

<PROTOS>
bool alternatingRowColors () const
int autoScrollMargin () const
void closePersistentEditor ( const QModelIndex & index )
QModelIndex currentIndex () const
DragDropMode dragDropMode () const
bool dragDropOverwriteMode () const
bool dragEnabled () const
EditTriggers editTriggers () const
bool hasAutoScroll () const
ScrollMode horizontalScrollMode () const
QSize iconSize () const
virtual QModelIndex indexAt ( const QPoint & point ) const = 0
QWidget * indexWidget ( const QModelIndex & index ) const
QAbstractItemDelegate * itemDelegate () const
QAbstractItemDelegate * itemDelegate ( const QModelIndex & index ) const
QAbstractItemDelegate * itemDelegateForColumn ( int column ) const
QAbstractItemDelegate * itemDelegateForRow ( int row ) const
virtual void keyboardSearch ( const QString & search )
QAbstractItemModel * model () const
void openPersistentEditor ( const QModelIndex & index )
QModelIndex rootIndex () const
virtual void scrollTo ( const QModelIndex & index, ScrollHint hint = EnsureVisible ) = 0
QAbstractItemView::SelectionBehavior selectionBehavior () const
QAbstractItemView::SelectionMode selectionMode () const
QItemSelectionModel * selectionModel () const
void setAlternatingRowColors ( bool enable )
void setAutoScroll ( bool enable )
void setAutoScrollMargin ( int margin )
void setDragDropMode ( DragDropMode behavior )
void setDragDropOverwriteMode ( bool overwrite )
void setDragEnabled ( bool enable )
void setDropIndicatorShown ( bool enable )
void setEditTriggers ( EditTriggers triggers )
void setHorizontalScrollMode ( ScrollMode mode )
void setIconSize ( const QSize & size )
void setIndexWidget ( const QModelIndex & index, QWidget * widget )
void setItemDelegate ( QAbstractItemDelegate * delegate )
void setItemDelegateForColumn ( int column, QAbstractItemDelegate * delegate )
void setItemDelegateForRow ( int row, QAbstractItemDelegate * delegate )
virtual void setModel ( QAbstractItemModel * model )
void setSelectionBehavior ( QAbstractItemView::SelectionBehavior behavior )
void setSelectionMode ( QAbstractItemView::SelectionMode mode )
virtual void setSelectionModel ( QItemSelectionModel * selectionModel )
void setTabKeyNavigation ( bool enable )
void setTextElideMode ( Qt::TextElideMode mode )
void setVerticalScrollMode ( ScrollMode mode )
bool showDropIndicator () const
virtual int sizeHintForColumn ( int column ) const
QSize sizeHintForIndex ( const QModelIndex & index ) const
virtual int sizeHintForRow ( int row ) const
bool tabKeyNavigation () const
Qt::TextElideMode textElideMode () const
ScrollMode verticalScrollMode () const
virtual QRect visualRect ( const QModelIndex & index ) const = 0
</PROTOS>

<SLOTS>
void clearSelection ()
void edit ( const QModelIndex & index )
virtual void reset ()
void scrollToBottom ()
void scrollToTop ()
virtual void selectAll ()
void setCurrentIndex ( const QModelIndex & index )
virtual void setRootIndex ( const QModelIndex & index )
void update ( const QModelIndex & index )
</SLOTS>

<SIGNALS>
void activated ( const QModelIndex & index )
void clicked ( const QModelIndex & index )
void doubleClicked ( const QModelIndex & index )
void entered ( const QModelIndex & index )
void pressed ( const QModelIndex & index )
void viewportEntered ()
</SIGNALS>


