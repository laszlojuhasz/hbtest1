/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

; Header File to Generate Sources
;

<CLASS>
Inherit  = QObject
New      = pParent
</CLASS>

<CODE>
#include <QtNetwork/QFtp>


/*
 * QFtp ( QObject * parent = 0 )
 * virtual ~QFtp ()
 */
HB_FUNC( QT_QFTP )
{
   hb_retptr( new QFtp( hbqt_par_QObject( 1 ) ) );
}

/*
 * qint64 read ( char * data, qint64 maxlen )
 */
HB_FUNC( QT_QFTP_READ )
{
   char * iData = ( char * ) hb_xgrab( hb_parnint( 3 ) + 1 );
   qint64 iRead;

   iRead = hbqt_par_QFtp( 1 )->read( iData, hb_parnint( 3 ) );

   hb_retnint( iRead );
   if( ! hb_storclen_buffer( iData, iRead, 2 ) )
      hb_xfree( iData );
}
</CODE>

<ENUMS>
enum Command { None, SetTransferMode, SetProxy, ConnectToHost, ..., RawCommand }
enum Error { NoError, HostNotFound, ConnectionRefused, NotConnected, UnknownError }
enum State { Unconnected, HostLookup, Connecting, Connected, LoggedIn, Closing }
enum TransferMode { Passive, Active }
enum TransferType { Binary, Ascii }
</ENUMS>

<PROTOS>
qint64 bytesAvailable () const
int cd ( const QString & dir )
void clearPendingCommands ()
int close ()
int connectToHost ( const QString & host, quint16 port = 21 )
Command currentCommand () const
QIODevice * currentDevice () const
int currentId () const
Error error () const
QString errorString () const
int get ( const QString & file, QIODevice * dev = 0, TransferType type = Binary )
bool hasPendingCommands () const
int list ( const QString & dir = QString() )
int login ( const QString & user = QString(), const QString & password = QString() )
int mkdir ( const QString & dir )
int put ( QIODevice * dev, const QString & file, TransferType type = Binary )
int put ( const QByteArray & data, const QString & file, TransferType type = Binary )
int rawCommand ( const QString & command )
#           Never uncomment it : See above
// qint64 read ( char * data, qint64 maxlen )
#
QByteArray readAll ()
int remove ( const QString & file )
int rename ( const QString & oldname, const QString & newname )
int rmdir ( const QString & dir )
int setProxy ( const QString & host, quint16 port )
int setTransferMode ( TransferMode mode )
State state () const
</PROTOS>

<SLOTS>
void abort ()
</SLOTS>

<SIGNALS>
void commandFinished ( int id, bool error )
void commandStarted ( int id )
void dataTransferProgress ( qint64 done, qint64 total )
void done ( bool error )
void listInfo ( const QUrlInfo & i )
void rawCommandReply ( int replyCode, const QString & detail )
void readyRead ()
void stateChanged ( int state )
</SIGNALS>
