/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009 Pritpal Bedi <pritpal@vouchcac.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherits = 
Type     = Core
New      = 
</CLASS>

<CODE>
#include <QtCore/QByteArray>


/* QByteArray ()
 * QByteArray ( const char * str )
 * QByteArray ( const char * data, int size )
 * QByteArray ( int size, char ch )
 * QByteArray ( const QByteArray & other )
 * ~QByteArray ()
 */
HB_FUNC( QT_QBYTEARRAY )
{
   hb_retptr( new QByteArray() );
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
QByteArray & append ( const QByteArray & ba )
QByteArray & append ( const QString & str )
QByteArray & append ( const char * str )
QByteArray & append ( const char * str, int len )
QByteArray & append ( char ch )
char at ( int i ) const
int capacity () const
void chop ( int n )
void clear ()
const char * constData () const
// bool contains ( const QByteArray & ba ) const
// bool contains ( const char * str ) const
// bool contains ( char ch ) const
int count ( const QByteArray & ba ) const
int count ( const char * str ) const
int count ( char ch ) const
int count () const
char * data ()
const char * data () const
bool endsWith ( const QByteArray & ba ) const
bool endsWith ( const char * str ) const
bool endsWith ( char ch ) const
QByteArray & fill ( char ch, int size = -1 )
int indexOf ( const QByteArray & ba, int from = 0 ) const
int indexOf ( const QString & str, int from = 0 ) const
int indexOf ( const char * str, int from = 0 ) const
int indexOf ( char ch, int from = 0 ) const
QByteArray & insert ( int i, const QByteArray & ba )
QByteArray & insert ( int i, const QString & str )
QByteArray & insert ( int i, const char * str )
QByteArray & insert ( int i, char ch )
bool isEmpty () const
bool isNull () const
int lastIndexOf ( const QByteArray & ba, int from = -1 ) const
int lastIndexOf ( const QString & str, int from = -1 ) const
int lastIndexOf ( const char * str, int from = -1 ) const
int lastIndexOf ( char ch, int from = -1 ) const
QByteArray left ( int len ) const
QByteArray leftJustified ( int width, char fill = ' ', bool truncate = false ) const
int length () const
QByteArray mid ( int pos, int len = -1 ) const
QByteArray & prepend ( const QByteArray & ba )
QByteArray & prepend ( const char * str )
QByteArray & prepend ( char ch )
void push_back ( const QByteArray & other )
void push_back ( const char * str )
void push_back ( char ch )
void push_front ( const QByteArray & other )
void push_front ( const char * str )
void push_front ( char ch )
QByteArray & remove ( int pos, int len )
QByteArray repeated ( int times ) const
QByteArray & replace ( int pos, int len, const QByteArray & after )
QByteArray & replace ( int pos, int len, const char * after )
QByteArray & replace ( const QByteArray & before, const QByteArray & after )
QByteArray & replace ( const char * before, const QByteArray & after )
QByteArray & replace ( const char * before, int bsize, const char * after, int asize )
QByteArray & replace ( const QByteArray & before, const char * after )
QByteArray & replace ( const QString & before, const QByteArray & after )
QByteArray & replace ( const QString & before, const char * after )
QByteArray & replace ( const char * before, const char * after )
QByteArray & replace ( char before, const QByteArray & after )
QByteArray & replace ( char before, const QString & after )
QByteArray & replace ( char before, const char * after )
QByteArray & replace ( char before, char after )
void reserve ( int size )
void resize ( int size )
QByteArray right ( int len ) const
QByteArray rightJustified ( int width, char fill = ' ', bool truncate = false ) const
QByteArray & setNum ( int n, int base = 10 )
QByteArray & setNum ( uint n, int base = 10 )
QByteArray & setNum ( short n, int base = 10 )
QByteArray & setNum ( ushort n, int base = 10 )
QByteArray & setNum ( qlonglong n, int base = 10 )
QByteArray & setNum ( qulonglong n, int base = 10 )
QByteArray & setNum ( double n, char f = 'g', int prec = 6 )
QByteArray & setNum ( float n, char f = 'g', int prec = 6 )
QByteArray simplified () const
int size () const
QList<QByteArray> split ( char sep ) const
void squeeze ()
bool startsWith ( const QByteArray & ba ) const
bool startsWith ( const char * str ) const
bool startsWith ( char ch ) const
QByteArray toBase64 () const
double toDouble ( bool * ok = 0 ) const
float toFloat ( bool * ok = 0 ) const
QByteArray toHex () const
int toInt ( bool * ok = 0, int base = 10 ) const
long toLong ( bool * ok = 0, int base = 10 ) const
qlonglong toLongLong ( bool * ok = 0, int base = 10 ) const
QByteArray toLower () const
QByteArray toPercentEncoding ( const QByteArray & exclude = QByteArray(), const QByteArray & include = QByteArray(), char percent = '%' ) const
short toShort ( bool * ok = 0, int base = 10 ) const
uint toUInt ( bool * ok = 0, int base = 10 ) const
ulong toULong ( bool * ok = 0, int base = 10 ) const
qulonglong toULongLong ( bool * ok = 0, int base = 10 ) const
ushort toUShort ( bool * ok = 0, int base = 10 ) const
QByteArray toUpper () const
QByteArray trimmed () const
void truncate ( int pos )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>




